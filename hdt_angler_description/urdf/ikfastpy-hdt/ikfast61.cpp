/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2020-04-27 23:24:16.488776
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKsin(j[2]);
x3=IKcos(j[2]);
x4=IKsin(j[1]);
x5=IKsin(j[3]);
x6=IKcos(j[3]);
x7=IKsin(j[0]);
x8=IKcos(j[4]);
x9=IKsin(j[4]);
x10=IKcos(j[5]);
x11=IKsin(j[5]);
x12=((0.07155)*x6);
x13=((0.2585)*x0);
x14=((0.3571)*x4);
x15=((0.27155)*x1);
x16=((1.0)*x8);
x17=((1.0)*x9);
x18=((0.2585)*x6);
x19=((1.0)*x7);
x20=((0.2585)*x7);
x21=((1.0)*x0);
x22=((0.07155)*x0);
x23=(x2*x4);
x24=(x1*x3);
x25=(x3*x4);
x26=(x1*x2);
x27=(x6*x7);
x28=((-1.0)*x5);
x29=(x6*x9);
x30=(x21*x6);
x31=((1.0)*x23);
x32=(x25*x7);
x33=(x21*x23);
x34=(x19*x23);
x35=((((-1.0)*x24))+x31);
x36=((((1.0)*x25))+(((1.0)*x26)));
x37=(x35*x6);
x38=((((-1.0)*x19*x24))+x34);
x39=(x21*(((((-1.0)*x26))+(((-1.0)*x25)))));
x40=(x19*(((((-1.0)*x26))+(((-1.0)*x25)))));
x41=(x38*x9);
x42=(x40*x6);
x43=(x40*x5);
x44=(x39*x5);
x45=((((-1.0)*x19*x5))+((x39*x6)));
x46=(((x0*x5))+x42);
x47=(x46*x8);
x48=((((-1.0)*x17*x36))+(((-1.0)*x16*x37)));
x49=((((-1.0)*x16*x45))+((x17*(((((-1.0)*x33))+((x21*x24)))))));
eerot[0]=(((x8*(((((-1.0)*x33))+((x0*x24))))))+((x45*x9)));
eerot[1]=(((x10*(((((-1.0)*x27))+((x28*x39))))))+((x11*x49)));
eerot[2]=(((x10*x49))+((x11*((x44+x27)))));
eetrans[0]=(((x0*x14))+(((-1.0)*x12*x7))+((x8*(((((-1.0)*x13*x23))+((x13*x24))))))+((x9*((((x18*x39))+(((-1.0)*x20*x5))))))+((x5*((((x22*x26))+((x22*x25))))))+(((-0.27155)*x0*x23))+((x0*x15*x3)));
eerot[3]=(((x8*(((((-1.0)*x34))+((x24*x7))))))+((x46*x9)));
eerot[4]=(((x11*(((((-1.0)*x17*x38))+(((-1.0)*x16*x46))))))+((x10*((((x28*x40))+x30)))));
eerot[5]=(((x10*(((((-1.0)*x41))+(((-1.0)*x47))))))+((x11*(((((-1.0)*x30))+x43)))));
eetrans[1]=(((x0*x12))+((x8*((((x20*x24))+(((-1.0)*x20*x23))))))+((x14*x7))+((x15*x3*x7))+(((-0.27155)*x23*x7))+((x5*(((((0.07155)*x32))+(((0.07155)*x26*x7))))))+((x9*((((x18*x40))+((x13*x5)))))));
eerot[6]=(((x29*x35))+(((-1.0)*x36*x8)));
eerot[7]=(((x11*x48))+((x10*x5*(((((-1.0)*x31))+x24)))));
eerot[8]=(((x10*x48))+((x11*x35*x5)));
eetrans[2]=((0.08335)+(((0.3571)*x1))+((x5*(((((0.07155)*x24))+(((-0.07155)*x23))))))+((x29*(((((0.2585)*x23))+(((-0.2585)*x24))))))+(((-1.0)*x15*x2))+((x8*(((((-0.2585)*x26))+(((-0.2585)*x25))))))+(((-0.27155)*x25)));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=((-1.0)*r01);
new_r01=((-1.0)*r02);
new_r02=r00;
new_px=(px+(((-0.2585)*r00)));
new_r10=((-1.0)*r11);
new_r11=((-1.0)*r12);
new_r12=r10;
new_py=(py+(((-0.2585)*r10)));
new_r20=((-1.0)*r21);
new_r21=((-1.0)*r22);
new_r22=r20;
new_pz=((-0.08335)+pz+(((-0.2585)*r20)));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x50=((1.0)*px);
IkReal x51=((1.0)*pz);
IkReal x52=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x52))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x51)));
rxp0_2=((((-1.0)*r10*x50))+((py*r00)));
rxp1_0=((((-1.0)*r21*x52))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x51)));
rxp1_2=((((-1.0)*r11*x50))+((py*r01)));
rxp2_0=(((pz*r12))+(((-1.0)*r22*x52)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x51)));
rxp2_2=((((-1.0)*r12*x50))+((py*r02)));
IkReal op[8+1], zeror[8];
int numroots;
IkReal x53=((0.3571)*pp);
IkReal x54=((0.19394101)*npz);
IkReal x55=((0.05110101)*npx);
IkReal x56=((2.0)*rxp1_2);
IkReal x57=((0.1431)*r22);
IkReal x58=((0.07155)*r21);
IkReal x59=((1.0)*rxp2_2);
IkReal x60=(x57+(((-1.0)*x56)));
IkReal x61=(x58+(((-1.0)*x59)));
IkReal x62=((-0.0173770591455)+x53);
IkReal x63=(x57+x56);
IkReal x64=((((-1.0)*x58))+(((-1.0)*x59)));
IkReal x65=(x55+x54);
IkReal x66=(x55+x62+(((-1.0)*x54)));
IkReal x67=(x62+(((-1.0)*x65)));
IkReal x68=(x54+x62+(((-1.0)*x55)));
IkReal x69=(x62+x65);
IkReal gconst0=x66;
IkReal gconst1=x67;
IkReal gconst2=x66;
IkReal gconst3=x67;
IkReal gconst4=x60;
IkReal gconst5=x63;
IkReal gconst6=x60;
IkReal gconst7=x63;
IkReal gconst8=x64;
IkReal gconst9=x61;
IkReal gconst10=x69;
IkReal gconst11=x68;
IkReal gconst12=x64;
IkReal gconst13=x61;
IkReal gconst14=x69;
IkReal gconst15=x68;
IkReal x70=npy*npy;
IkReal x71=r20*r20;
IkReal x72=rxp2_2*rxp2_2;
IkReal x73=r21*r21;
IkReal x74=(gconst6*r21);
IkReal x75=(gconst0*gconst2);
IkReal x76=((0.014625109062)*r20);
IkReal x77=(gconst11*npy);
IkReal x78=(gconst12*gconst8);
IkReal x79=(gconst1*npy);
IkReal x80=((0.055505917062)*r21);
IkReal x81=(r20*r21);
IkReal x82=(gconst3*rxp2_2);
IkReal x83=((1.0)*gconst7);
IkReal x84=(gconst14*gconst9);
IkReal x85=(gconst1*gconst2);
IkReal x86=((0.40880808)*rxp0_2);
IkReal x87=(gconst12*gconst5);
IkReal x88=(gconst11*gconst12);
IkReal x89=((1.0)*gconst15);
IkReal x90=(gconst12*gconst9);
IkReal x91=(gconst0*gconst3);
IkReal x92=(gconst13*gconst8);
IkReal x93=(gconst11*gconst14);
IkReal x94=(gconst5*rxp2_2);
IkReal x95=((0.38788202)*npy);
IkReal x96=(gconst1*gconst3);
IkReal x97=((0.0079428967315722)*npx);
IkReal x98=(gconst14*npy);
IkReal x99=(gconst0*npy);
IkReal x100=(gconst10*gconst15);
IkReal x101=((0.1431)*r21);
IkReal x102=(gconst2*npy);
IkReal x103=((1.0)*gconst1);
IkReal x104=(gconst6*gconst9);
IkReal x105=((0.000747357844428353)*x70);
IkReal x106=((1.0)*x72);
IkReal x107=((0.07155)*gconst5*r21);
IkReal x108=(rxp2_2*x102);
IkReal x109=((0.0079428967315722)*x71);
IkReal x110=((0.0104452528920804)*x70);
IkReal x111=((0.0051194025)*x73);
IkReal x112=((1.1448)*r20*rxp0_2);
IkReal x113=((0.111011834124)*npx*r20);
IkReal x114=((0.158569303862722)*npx*npy);
IkReal x115=((0.029250218124)*r21*rxp0_2);
IkReal x116=((0.77576404)*x72);
IkReal x117=((0.02047761)*x71);
IkReal x118=((0.07155)*gconst7*r21);
IkReal x119=((1.0)*gconst10*gconst13);
IkReal x120=((0.07155)*gconst4*r21);
IkReal x121=((0.00567281684568887)*r20*x70);
op[0]=(((x100*x90))+((x92*x93))+(((-1.0)*x119*x84))+(((-1.0)*x110*x90))+((npy*x76*x84))+(((-1.0)*x117*x93))+(((-1.0)*gconst11*x78*x89))+((gconst12*x76*x77)));
op[1]=((((-1.0)*gconst14*x92*x95))+(((-1.0)*gconst10*gconst13*gconst9*x95))+((gconst12*x77*x86))+(((-1.0)*gconst11*gconst6*gconst8*x89))+((x100*x87))+((gconst9*x121))+(((-1.0)*x113*x88))+(((-1.0)*x113*x84))+(((-1.0)*x109*x77))+(((-1.0)*gconst14*gconst5*x119))+(((0.38788202)*x77*x92))+((x114*x90))+((gconst5*x76*x98))+(((-1.0)*x112*x93))+(((-1.0)*x110*x87))+(((-1.0)*gconst12*x121))+(((-1.0)*gconst10*x83*x84))+((gconst15*x78*x95))+(((0.38788202)*x77*x78))+((x109*x98))+((gconst7*gconst8*x93))+((gconst15*x90*x95))+(((-1.0)*gconst4*x88*x89))+((gconst6*x76*x77))+(((-1.0)*gconst13*x84*x95))+((gconst13*gconst4*x93))+((npy*x84*x86))+(((-1.0)*gconst10*x90*x95))+(((-1.0)*x104*x110))+((x100*x104)));
op[2]=((((0.07155)*gconst10*gconst14*gconst9*r21))+(((0.40880808)*gconst14*gconst5*npy*rxp0_2))+((gconst10*gconst15*gconst9*rxp2_2))+(((-0.444047336496)*gconst11*npy*r20*rxp0_2))+(((-16.0)*gconst11*gconst14*(rxp0_2*rxp0_2)))+(((0.014625109062)*gconst1*gconst12*npy*r20))+(((-0.38788202)*gconst10*gconst7*gconst9*npy))+((gconst11*gconst14*gconst4*gconst7))+(((0.04095522)*gconst11*gconst14*(r20*r20)))+(((-0.38788202)*gconst14*gconst7*gconst9*npy))+(((0.07155)*gconst11*gconst13*gconst14*r21))+((gconst11*gconst13*gconst14*rxp2_2))+(((-1.0)*gconst1*gconst12*gconst15*gconst8))+(((-0.07155)*gconst11*gconst15*gconst8*r21))+(((-0.38788202)*gconst13*gconst14*gconst5*npy))+(((-0.158569303862722)*gconst12*rxp0_2*(npy*npy)))+(((-0.38788202)*gconst14*gconst7*gconst8*npy))+(((-0.15045246143928)*gconst12*gconst8*(npy*npy)))+(((0.38788202)*gconst11*gconst6*gconst8*npy))+(((0.38788202)*gconst15*gconst6*gconst8*npy))+(((-0.0104452528920804)*gconst5*gconst6*(npy*npy)))+(((-0.171342967223441)*gconst12*gconst9*(npy*npy)))+(((-0.02047761)*gconst11*gconst2*(r20*r20)))+(((0.38788202)*gconst15*gconst6*gconst9*npy))+((gconst11*gconst14*gconst8*rxp2_2))+(((0.014625109062)*gconst2*gconst9*npy*r20))+(((-0.00567281684568887)*gconst6*r20*(npy*npy)))+(((-0.0430594944639221)*gconst9*npx*npy*r20))+((gconst0*gconst12*gconst15*gconst9))+(((-0.07155)*gconst11*gconst14*gconst8*r21))+(((0.158569303862722)*gconst6*gconst9*npx*npy))+((gconst11*gconst13*gconst2*gconst8))+(((0.00567281684568887)*gconst5*r20*(npy*npy)))+(((0.0010464265533861)*gconst11*npy*r20*r21))+((gconst1*gconst13*gconst14*gconst8))+(((0.38788202)*gconst11*gconst13*gconst4*npy))+(((0.014625109062)*gconst14*npy*r20*rxp2_2))+(((-3.10305616)*gconst14*gconst9*npx*rxp0_2))+(((0.38788202)*gconst11*gconst12*gconst4*npy))+(((0.38788202)*gconst11*gconst7*gconst8*npy))+(((-0.38788202)*gconst10*gconst6*gconst9*npy))+(((-0.111011834124)*gconst11*gconst6*npx*r20))+(((-0.07155)*gconst10*gconst12*gconst15*r21))+(((-0.38788202)*gconst13*gconst14*gconst4*npy))+(((0.0430594944639221)*gconst12*npx*npy*r20))+((gconst10*gconst12*gconst3*gconst9))+(((0.07155)*gconst10*gconst13*gconst14*r21))+((gconst10*gconst15*gconst5*gconst6))+(((-0.0104452528920804)*gconst12*rxp2_2*(npy*npy)))+(((-0.111011834124)*gconst14*gconst5*npx*r20))+(((-1.0)*gconst10*gconst14*gconst9*rxp2_2))+(((-0.601809845757122)*gconst12*gconst9*(npx*npx)))+(((0.000747357844428353)*gconst12*r21*(npy*npy)))+(((0.00308090682889362)*(npy*npy)*(r20*r20)))+(((-1.0)*gconst11*gconst12*gconst15*rxp2_2))+(((-0.0104452528920804)*gconst9*rxp2_2*(npy*npy)))+((gconst10*gconst12*gconst15*rxp2_2))+(((-0.07155)*gconst11*gconst12*gconst15*r21))+(((0.444047336496)*gconst14*npy*r20*rxp0_2))+(((0.158569303862722)*gconst9*rxp0_2*(npy*npy)))+(((0.158569303862722)*gconst12*gconst5*npx*npy))+(((-1.0)*gconst10*gconst13*gconst14*rxp2_2))+(((0.014625109062)*gconst11*npy*r20*rxp2_2))+(((-0.0010464265533861)*gconst14*npy*r20*r21))+(((0.38788202)*gconst12*gconst15*gconst5*npy))+(((-0.15045246143928)*gconst13*gconst9*(npy*npy)))+(((-0.38788202)*gconst10*gconst13*gconst5*npy))+(((-1.0)*gconst10*gconst13*gconst2*gconst9))+(((0.07155)*gconst10*gconst15*gconst9*r21))+(((-0.000747357844428353)*gconst9*r21*(npy*npy)))+(((-0.38788202)*gconst10*gconst12*gconst5*npy))+(((-1.0)*gconst10*gconst14*gconst5*gconst7))+(((0.38788202)*gconst12*gconst15*gconst4*npy))+(((-3.10305616)*gconst11*gconst12*npx*rxp0_2))+(((-1.0)*gconst11*gconst12*gconst3*gconst8))+(((0.40880808)*gconst11*gconst6*npy*rxp0_2))+(((-1.0)*gconst11*gconst15*gconst8*rxp2_2))+(((-0.15045246143928)*gconst13*gconst8*(npy*npy)))+(((-1.0)*gconst0*gconst13*gconst14*gconst9))+(((-1.0)*gconst11*gconst15*gconst4*gconst6))+(((-0.02047761)*gconst1*gconst14*(r20*r20))));
op[3]=((((0.07155)*gconst11*gconst14*gconst7*r21))+(((0.158569303862722)*gconst5*rxp0_2*(npy*npy)))+(((-0.07155)*gconst11*gconst15*gconst4*r21))+(((-0.171342967223441)*gconst12*gconst5*(npy*npy)))+(((0.0158857934631444)*gconst11*npy*(r20*r20)))+(((-1.0)*gconst0*gconst14*gconst7*gconst9))+(((0.027752958531)*gconst15*gconst9*npy*r21))+(((-1.0)*gconst10*gconst14*gconst5*rxp2_2))+(((0.111011834124)*gconst14*gconst9*npx*r20))+(((0.38788202)*gconst12*gconst3*gconst9*npy))+(((-1.0)*gconst11*gconst15*gconst6*rxp2_2))+(((-0.07155)*gconst11*gconst14*gconst4*r21))+(((0.38788202)*gconst11*gconst4*gconst6*npy))+(((0.40880808)*gconst14*gconst9*npy*rxp0_2))+(((-0.000811780090618077)*r20*r21*(npy*npy)))+(((-0.38788202)*gconst0*gconst13*gconst9*npy))+(((-0.0104452528920804)*gconst6*rxp2_2*(npy*npy)))+(((-1.0)*gconst1*gconst12*gconst15*gconst4))+(((-0.38788202)*gconst10*gconst12*npy*rxp2_2))+(((-0.77576404)*gconst13*gconst14*npy*rxp2_2))+((gconst11*gconst14*gconst7*rxp2_2))+(((0.38788202)*gconst15*gconst9*npy*rxp2_2))+((gconst10*gconst3*gconst6*gconst9))+(((0.38788202)*gconst15*gconst8*npy*rxp2_2))+(((0.40880808)*gconst14*npy*rxp0_2*rxp2_2))+(((0.38788202)*gconst11*gconst12*npy*rxp2_2))+(((0.027752958531)*gconst14*gconst9*npy*r21))+(((0.0079428967315722)*gconst14*npx*r20*r21))+(((-1.0)*gconst11*gconst3*gconst6*gconst8))+(((-0.111011834124)*gconst2*gconst9*npx*r20))+(((-0.000747357844428353)*gconst5*r21*(npy*npy)))+(((0.38788202)*gconst15*gconst5*gconst6*npy))+(((0.027752958531)*gconst10*gconst12*npy*r21))+((gconst10*gconst15*gconst5*rxp2_2))+(((0.40880808)*gconst2*gconst9*npy*rxp0_2))+(((1.20361969151424)*gconst12*npx*npy*rxp0_2))+(((0.38788202)*gconst11*gconst13*npy*rxp2_2))+(((6.20611232)*gconst14*npy*(rxp0_2*rxp0_2)))+((gconst0*gconst12*gconst15*gconst5))+((gconst11*gconst13*gconst2*gconst4))+(((-1.0)*gconst10*gconst2*gconst7*gconst9))+(((-0.0079428967315722)*gconst1*npy*(r20*r20)))+(((-0.0113456336913777)*gconst12*npx*npy*r21))+(((-0.0430594944639221)*gconst5*npx*npy*r20))+(((-1.0)*gconst10*gconst14*gconst7*rxp2_2))+(((-0.171342967223441)*gconst6*gconst9*(npy*npy)))+((gconst1*gconst13*gconst14*gconst4))+(((-0.15045246143928)*gconst6*gconst8*(npy*npy)))+(((-0.029250218124)*gconst14*npy*r21*rxp0_2))+(((0.07155)*gconst10*gconst15*gconst5*r21))+((gconst0*gconst15*gconst6*gconst9))+(((0.07155)*gconst10*gconst14*gconst5*r21))+(((-6.20611232)*gconst11*npy*(rxp0_2*rxp0_2)))+(((-3.10305616)*gconst14*gconst5*npx*rxp0_2))+(((-1.0)*gconst1*gconst15*gconst6*gconst8))+(((0.77576404)*gconst11*gconst8*npy*rxp2_2))+(((-0.111011834124)*gconst11*npx*r20*rxp2_2))+(((-0.0158857934631444)*gconst14*npy*(r20*r20)))+(((-0.38788202)*gconst14*gconst4*gconst7*npy))+(((-1.1448)*gconst1*gconst14*r20*rxp0_2))+(((-0.15045246143928)*gconst12*gconst4*(npy*npy)))+((gconst11*gconst14*gconst4*rxp2_2))+(((-0.15045246143928)*gconst7*gconst9*(npy*npy)))+(((-0.38788202)*gconst0*gconst12*gconst9*npy))+(((0.172237977855688)*r20*rxp0_2*(npy*npy)))+(((0.158569303862722)*gconst12*npx*npy*rxp2_2))+(((-0.38788202)*gconst10*gconst5*gconst7*npy))+(((-0.15045246143928)*gconst7*gconst8*(npy*npy)))+(((-0.38788202)*gconst14*gconst9*npy*rxp2_2))+(((-1.20361969151424)*gconst9*npx*npy*rxp0_2))+(((0.158569303862722)*gconst5*gconst6*npx*npy))+((gconst10*gconst12*gconst3*gconst5))+(((-0.0079428967315722)*gconst11*npx*r20*r21))+(((-0.15045246143928)*gconst13*gconst5*(npy*npy)))+((gconst10*gconst15*gconst6*rxp2_2))+(((-0.111011834124)*gconst14*npx*r20*rxp2_2))+((gconst11*gconst2*gconst7*gconst8))+(((-0.601809845757122)*gconst12*gconst5*(npx*npx)))+(((0.027752958531)*gconst11*gconst13*npy*r21))+(((0.027752958531)*gconst15*gconst8*npy*r21))+(((-0.15045246143928)*gconst13*gconst4*(npy*npy)))+(((0.029250218124)*gconst11*npy*r21*rxp0_2))+(((0.07155)*gconst10*gconst14*gconst7*r21))+(((-0.07155)*gconst11*gconst15*gconst6*r21))+(((-0.07155)*gconst10*gconst15*gconst6*r21))+(((0.38788202)*gconst12*gconst3*gconst8*npy))+(((0.000747357844428353)*gconst6*r21*(npy*npy)))+(((0.38788202)*gconst1*gconst13*gconst8*npy))+(((-0.38788202)*gconst10*gconst13*npy*rxp2_2))+(((-1.1448)*gconst11*gconst2*r20*rxp0_2))+(((-0.0104452528920804)*gconst5*rxp2_2*(npy*npy)))+(((0.0430594944639221)*gconst6*npx*npy*r20))+(((0.0113456336913777)*gconst9*npx*npy*r21))+(((-0.38788202)*gconst14*gconst5*gconst7*npy))+(((0.158569303862722)*gconst12*gconst9*npx*npy))+(((0.014625109062)*gconst1*gconst6*npy*r20))+(((0.0079428967315722)*gconst2*npy*(r20*r20)))+(((-0.111011834124)*gconst1*gconst12*npx*r20))+(((-0.158569303862722)*gconst6*rxp0_2*(npy*npy)))+(((-0.77576404)*gconst10*gconst9*npy*rxp2_2))+(((-1.0)*gconst11*gconst15*gconst4*rxp2_2))+(((-1.0)*gconst10*gconst13*gconst2*gconst5))+(((0.014625109062)*gconst2*gconst5*npy*r20))+(((0.027752958531)*gconst11*gconst12*npy*r21))+(((0.40880808)*gconst11*gconst12*npy*rxp0_2))+(((0.40880808)*gconst1*gconst12*npy*rxp0_2))+(((0.38788202)*gconst1*gconst12*gconst8*npy))+(((0.158569303862722)*gconst9*npx*npy*rxp2_2))+(((-0.38788202)*gconst14*gconst8*npy*rxp2_2))+(((0.027752958531)*gconst10*gconst13*npy*r21))+(((0.111011834124)*gconst11*gconst12*npx*r20))+(((-1.0)*gconst11*gconst12*gconst3*gconst4))+(((0.77576404)*gconst12*gconst15*npy*rxp2_2))+(((0.38788202)*gconst11*gconst4*gconst7*npy))+(((-3.10305616)*gconst11*gconst6*npx*rxp0_2))+(((0.027752958531)*gconst14*gconst8*npy*r21))+(((-1.0)*gconst0*gconst13*gconst14*gconst5))+(((-0.38788202)*gconst13*gconst2*gconst8*npy))+(((0.38788202)*gconst15*gconst4*gconst6*npy))+((gconst1*gconst14*gconst7*gconst8))+(((-0.38788202)*gconst10*gconst5*gconst6*npy))+(((-0.601809845757122)*gconst6*gconst9*(npx*npx)))+(((-0.38788202)*gconst13*gconst2*gconst9*npy))+(((1.1448)*gconst11*gconst14*r20*rxp0_2))+(((0.40880808)*gconst11*npy*rxp0_2*rxp2_2)));
op[4]=((((0.158569303862722)*gconst6*npx*npy*rxp2_2))+(((0.04095522)*gconst1*gconst14*(r20*r20)))+(((-3.10305616)*gconst14*npx*rxp0_2*rxp2_2))+(((0.40880808)*gconst14*gconst5*npy*rxp0_2))+(((-0.1431)*gconst11*gconst15*r21*rxp2_2))+((gconst0*gconst15*gconst9*rxp2_2))+(((-0.38788202)*gconst0*gconst12*gconst5*npy))+(((-0.0113456336913777)*gconst6*npx*npy*r21))+((gconst1*gconst14*gconst8*rxp2_2))+(((-1.0)*gconst0*gconst14*gconst9*rxp2_2))+(((-0.601809845757122)*gconst5*gconst6*(npx*npx)))+(((-1.0)*gconst10*gconst2*gconst9*rxp2_2))+(((-0.15045246143928)*gconst5*gconst7*(npy*npy)))+(((5.34734537688486e-5)*(npy*npy)*(r21*r21)))+(((-1.0)*gconst10*gconst2*gconst5*gconst7))+(((-3.10305616)*gconst11*npx*rxp0_2*rxp2_2))+(((0.38788202)*gconst15*gconst5*npy*rxp2_2))+(((-1.0)*gconst1*gconst12*gconst3*gconst8))+(((0.38788202)*gconst1*gconst13*gconst4*npy))+(((-0.158569303862722)*gconst12*rxp0_2*(npy*npy)))+(((-0.0051194025)*gconst11*gconst14*(r21*r21)))+(((0.027752958531)*gconst11*gconst7*npy*r21))+(((0.111011834124)*gconst14*gconst5*npx*r20))+(((0.07155)*gconst0*gconst13*gconst14*r21))+((gconst11*gconst14*(rxp2_2*rxp2_2)))+(((-3.10305616)*gconst2*gconst9*npx*rxp0_2))+(((0.07155)*gconst10*gconst3*gconst9*r21))+((gconst1*gconst14*gconst4*gconst7))+(((-0.0104452528920804)*gconst12*gconst9*(npy*npy)))+(((-1.0)*gconst11*gconst12*gconst3*rxp2_2))+(((0.07155)*gconst11*gconst13*gconst2*r21))+(((-1.0)*gconst10*gconst13*gconst2*rxp2_2))+(((1.20361969151424)*gconst6*npx*npy*rxp0_2))+(((0.00149471568885671)*gconst12*r21*(npy*npy)))+(((-0.171342967223441)*gconst5*gconst6*(npy*npy)))+(((0.38788202)*gconst1*gconst7*gconst8*npy))+((gconst1*gconst13*gconst2*gconst8))+(((-0.601809845757122)*gconst9*rxp2_2*(npx*npx)))+(((0.027752958531)*gconst14*gconst4*npy*r21))+(((0.07155)*gconst0*gconst14*gconst9*r21))+(((-0.0051194025)*gconst10*gconst15*(r21*r21)))+(((-0.07155)*gconst11*gconst3*gconst8*r21))+(((0.027752958531)*gconst14*gconst5*npy*r21))+((gconst11*gconst2*gconst4*gconst7))+(((0.38788202)*gconst1*gconst12*gconst4*npy))+(((-0.444047336496)*gconst14*npy*r20*rxp0_2))+(((0.38788202)*gconst1*gconst6*gconst8*npy))+(((-0.38788202)*gconst0*gconst7*gconst9*npy))+(((0.158569303862722)*gconst6*gconst9*npx*npy))+(((0.0010464265533861)*gconst1*npy*r20*r21))+(((-0.300904922878561)*gconst8*rxp2_2*(npy*npy)))+(((-0.07155)*gconst0*gconst12*gconst15*r21))+((gconst10*gconst15*(rxp2_2*rxp2_2)))+(((-0.07155)*gconst1*gconst15*gconst8*r21))+((gconst10*gconst12*gconst3*rxp2_2))+(((-16.0)*gconst1*gconst14*(rxp0_2*rxp0_2)))+(((-0.38788202)*gconst0*gconst6*gconst9*npy))+(((-0.07155)*gconst1*gconst14*gconst8*r21))+(((-1.0)*gconst1*gconst15*gconst4*gconst6))+(((0.0430594944639221)*gconst12*r21*(npx*npx)))+(((0.04095522)*gconst11*gconst2*(r20*r20)))+(((-0.07155)*gconst1*gconst12*gconst15*r21))+(((0.38788202)*gconst12*gconst3*gconst5*npy))+((gconst10*gconst3*gconst5*gconst6))+(((-0.38788202)*gconst2*gconst7*gconst9*npy))+(((-0.77576404)*gconst14*gconst7*npy*rxp2_2))+(((-0.321795428662722)*gconst12*rxp2_2*(npy*npy)))+(((0.38788202)*gconst3*gconst6*gconst9*npy))+((gconst0*gconst12*gconst15*rxp2_2))+(((0.40880808)*gconst2*gconst5*npy*rxp0_2))+(((-0.444047336496)*gconst1*npy*r20*rxp0_2))+(((-0.38788202)*gconst2*gconst7*gconst8*npy))+(((-0.0430594944639221)*gconst9*r21*(npx*npx)))+(((-0.014625109062)*gconst11*gconst12*npy*r20))+(((-1.0)*gconst11*gconst3*gconst8*rxp2_2))+(((-0.0051194025)*gconst11*gconst15*(r21*r21)))+(((-0.0430594944639221)*gconst12*npx*npy*r20))+(((-0.014625109062)*gconst14*gconst9*npy*r20))+(((-0.00616181365778725)*(npy*npy)*(r20*r20)))+(((0.444047336496)*gconst2*npy*r20*rxp0_2))+(((-1.0)*gconst1*gconst12*gconst15*rxp2_2))+(((0.00616181365778725)*npx*npy*r20*r21))+(((0.111011834124)*gconst11*gconst6*npx*r20))+(((0.38788202)*gconst15*gconst4*npy*rxp2_2))+(((-0.02047761)*gconst11*gconst14*(r20*r20)))+(((-0.300904922878561)*gconst13*rxp2_2*(npy*npy)))+(((-1.0)*gconst11*gconst15*(rxp2_2*rxp2_2)))+(((-0.0010464265533861)*gconst2*npy*r20*r21))+((gconst11*gconst2*gconst8*rxp2_2))+(((-0.222023668248)*gconst11*npx*r21*rxp0_2))+(((2.40723938302849)*(npy*npy)*(rxp0_2*rxp0_2)))+(((-1.0)*gconst11*gconst3*gconst4*gconst6))+(((0.40880808)*gconst1*gconst6*npy*rxp0_2))+(((-0.0226912673827555)*r21*rxp0_2*(npy*npy)))+(((0.014625109062)*gconst2*npy*r20*rxp2_2))+(((-3.10305616)*gconst1*gconst12*npx*rxp0_2))+(((0.07155)*gconst10*gconst13*gconst2*r21))+(((-0.0051194025)*gconst10*gconst14*(r21*r21)))+(((0.444047336496)*gconst11*npy*r20*rxp0_2))+(((-0.38788202)*gconst10*gconst7*npy*rxp2_2))+(((0.158569303862722)*gconst9*rxp0_2*(npy*npy)))+(((-0.07155)*gconst11*gconst2*gconst8*r21))+(((-16.0)*gconst11*gconst2*(rxp0_2*rxp0_2)))+(((0.158569303862722)*gconst12*gconst5*npx*npy))+(((-0.38788202)*gconst14*gconst5*npy*rxp2_2))+(((0.38788202)*gconst11*gconst7*npy*rxp2_2))+(((-0.38788202)*gconst0*gconst13*gconst5*npy))+(((-0.111011834124)*gconst2*gconst5*npx*r20))+(((0.158569303862722)*gconst5*npx*npy*rxp2_2))+(((0.38788202)*gconst12*gconst3*gconst4*npy))+(((-0.38788202)*gconst10*gconst6*npy*rxp2_2))+(((0.38788202)*gconst11*gconst6*npy*rxp2_2))+((gconst1*gconst13*gconst14*rxp2_2))+(((-0.38788202)*gconst13*gconst2*gconst5*npy))+(((0.1431)*gconst10*gconst14*r21*rxp2_2))+((gconst0*gconst12*gconst3*gconst9))+(((-1.0)*gconst0*gconst13*gconst2*gconst9))+(((-1.20361969151424)*gconst5*npx*npy*rxp0_2))+(((-1.0)*gconst0*gconst13*gconst14*rxp2_2))+(((0.027752958531)*gconst10*gconst7*npy*r21))+(((0.07155)*gconst0*gconst15*gconst9*r21))+(((0.027752958531)*gconst10*gconst6*npy*r21))+(((-0.601809845757122)*gconst12*rxp2_2*(npx*npx)))+(((0.07155)*gconst10*gconst2*gconst9*r21))+(((-0.0104452528920804)*(npy*npy)*(rxp2_2*rxp2_2)))+(((-0.321795428662722)*gconst9*rxp2_2*(npy*npy)))+(((0.0113456336913777)*gconst5*npx*npy*r21))+(((-0.15045246143928)*gconst4*gconst7*(npy*npy)))+(((0.40880808)*gconst11*gconst6*npy*rxp0_2))+(((0.07155)*gconst1*gconst13*gconst14*r21))+(((-1.0)*gconst1*gconst15*gconst8*rxp2_2))+(((-0.38788202)*gconst13*gconst2*gconst4*npy))+(((0.222023668248)*gconst14*npx*r21*rxp0_2))+(((0.77576404)*gconst15*gconst6*npy*rxp2_2))+(((-1.0)*gconst0*gconst14*gconst5*gconst7))+(((-0.111011834124)*gconst1*gconst6*npx*r20))+(((-0.02047761)*gconst1*gconst2*(r20*r20)))+(((0.38788202)*gconst3*gconst6*gconst8*npy))+(((0.027752958531)*gconst15*gconst5*npy*r21))+((gconst11*gconst13*gconst2*rxp2_2))+(((-0.15045246143928)*gconst4*gconst6*(npy*npy)))+(((-0.07155)*gconst11*gconst12*gconst3*r21))+((gconst0*gconst15*gconst5*gconst6))+(((-1.0)*gconst10*gconst14*(rxp2_2*rxp2_2)))+(((0.027752958531)*gconst15*gconst4*npy*r21))+(((0.014625109062)*gconst1*npy*r20*rxp2_2))+(((-0.77576404)*gconst10*gconst5*npy*rxp2_2))+(((-0.07155)*gconst10*gconst12*gconst3*r21))+(((0.77576404)*gconst11*gconst4*npy*rxp2_2))+(((0.027752958531)*gconst11*gconst6*npy*r21))+(((-0.38788202)*gconst14*gconst4*npy*rxp2_2))+(((0.0430594944639221)*gconst9*npx*npy*r20))+((gconst10*gconst3*gconst9*rxp2_2))+(((-0.00149471568885671)*gconst9*r21*(npy*npy))));
op[5]=((((0.0430594944639221)*gconst5*npx*npy*r20))+(((-0.00567281684568887)*gconst9*r20*(npy*npy)))+(((0.77576404)*gconst1*gconst8*npy*rxp2_2))+(((0.158569303862722)*gconst5*rxp0_2*(npy*npy)))+((gconst11*gconst2*gconst7*rxp2_2))+(((-0.38788202)*gconst2*gconst4*gconst7*npy))+(((0.07155)*gconst0*gconst14*gconst7*r21))+(((-1.0)*gconst1*gconst3*gconst6*gconst8))+(((-0.0430594944639221)*gconst5*r21*(npx*npx)))+(((0.029250218124)*gconst1*npy*r21*rxp0_2))+(((-0.07155)*gconst11*gconst3*gconst4*r21))+(((1.1448)*gconst11*gconst2*r20*rxp0_2))+(((-1.0)*gconst1*gconst15*gconst4*rxp2_2))+(((6.20611232)*gconst2*npy*(rxp0_2*rxp0_2)))+(((0.111011834124)*gconst14*npx*r20*rxp2_2))+(((-1.0)*gconst1*gconst12*gconst3*gconst4))+(((0.40880808)*gconst14*npy*rxp0_2*rxp2_2))+(((-0.77576404)*gconst14*npy*(rxp2_2*rxp2_2)))+(((-0.07155)*gconst11*gconst2*gconst4*r21))+(((-0.77576404)*gconst0*gconst9*npy*rxp2_2))+(((0.027752958531)*gconst1*gconst13*npy*r21))+(((-0.321795428662722)*gconst6*rxp2_2*(npy*npy)))+(((0.00567281684568887)*gconst12*r20*(npy*npy)))+(((-1.0)*gconst11*gconst3*gconst6*rxp2_2))+(((-0.014625109062)*gconst11*gconst6*npy*r20))+(((1.1448)*gconst1*gconst14*r20*rxp0_2))+(((0.38788202)*gconst1*gconst12*npy*rxp2_2))+(((-3.10305616)*gconst2*gconst5*npx*rxp0_2))+((gconst1*gconst13*gconst2*gconst4))+(((0.027752958531)*gconst3*gconst9*npy*r21))+(((-0.0079428967315722)*gconst14*npx*r20*r21))+(((-0.38788202)*gconst2*gconst8*npy*rxp2_2))+((gconst1*gconst14*gconst4*rxp2_2))+((gconst10*gconst3*gconst6*rxp2_2))+(((0.40880808)*gconst2*gconst9*npy*rxp0_2))+(((0.0079428967315722)*gconst2*npx*r20*r21))+(((-1.0)*gconst11*gconst3*gconst4*rxp2_2))+(((-0.014625109062)*gconst14*gconst5*npy*r20))+(((-0.111011834124)*gconst1*npx*r20*rxp2_2))+(((0.055505917062)*gconst10*npy*r21*rxp2_2))+((gconst0*gconst3*gconst6*gconst9))+(((-0.0113456336913777)*gconst12*npx*npy*r21))+(((-0.38788202)*gconst0*gconst13*npy*rxp2_2))+(((-0.0079428967315722)*gconst11*npy*(r20*r20)))+(((0.0430594944639221)*gconst6*r21*(npx*npx)))+(((0.027752958531)*gconst2*gconst8*npy*r21))+((gconst1*gconst14*gconst7*rxp2_2))+(((-0.029250218124)*gconst14*npy*r21*rxp0_2))+(((-0.0158857934631444)*gconst2*npy*(r20*r20)))+(((-0.172237977855688)*r20*rxp0_2*(npy*npy)))+(((0.158569303862722)*npx*npy*(rxp2_2*rxp2_2)))+(((0.111011834124)*gconst2*gconst9*npx*r20))+(((-0.38788202)*gconst0*gconst12*npy*rxp2_2))+(((0.77576404)*gconst15*npy*(rxp2_2*rxp2_2)))+(((-1.0)*gconst10*gconst2*gconst7*rxp2_2))+(((0.40880808)*gconst1*npy*rxp0_2*rxp2_2))+(((0.027752958531)*gconst0*gconst12*npy*r21))+(((0.07155)*gconst1*gconst14*gconst7*r21))+(((0.77576404)*gconst12*gconst3*npy*rxp2_2))+(((0.027752958531)*gconst2*gconst9*npy*r21))+(((0.38788202)*gconst3*gconst4*gconst6*npy))+(((0.055505917062)*gconst15*npy*r21*rxp2_2))+(((-0.300904922878561)*gconst4*rxp2_2*(npy*npy)))+(((0.07155)*gconst0*gconst14*gconst5*r21))+(((0.07155)*gconst10*gconst2*gconst7*r21))+(((0.055505917062)*gconst14*npy*r21*rxp2_2))+(((0.07155)*gconst10*gconst2*gconst5*r21))+((gconst1*gconst2*gconst7*gconst8))+(((-1.0)*gconst1*gconst15*gconst6*rxp2_2))+(((-1.0)*gconst10*gconst2*gconst5*rxp2_2))+(((-0.77576404)*gconst10*npy*(rxp2_2*rxp2_2)))+(((0.07155)*gconst10*gconst3*gconst5*r21))+(((-0.00149471568885671)*gconst5*r21*(npy*npy)))+(((-0.07155)*gconst0*gconst15*gconst6*r21))+(((0.0079428967315722)*gconst11*npx*r20*r21))+(((-0.0079428967315722)*gconst1*npx*r20*r21))+(((-0.000811780090618077)*npx*npy*(r21*r21)))+(((0.027752958531)*gconst0*gconst13*npy*r21))+(((0.158569303862722)*gconst12*npx*npy*rxp2_2))+(((0.158569303862722)*gconst5*gconst6*npx*npy))+(((-0.38788202)*gconst2*gconst9*npy*rxp2_2))+(((0.07155)*gconst0*gconst15*gconst5*r21))+(((0.38788202)*gconst1*gconst4*gconst6*npy))+(((-0.38788202)*gconst0*gconst5*gconst6*npy))+(((-0.38788202)*gconst2*gconst5*gconst7*npy))+(((0.77576404)*gconst11*npy*(rxp2_2*rxp2_2)))+((gconst11*gconst2*gconst4*rxp2_2))+(((0.029250218124)*gconst11*npy*r21*rxp0_2))+(((0.172237977855688)*npx*npy*r21*rxp0_2))+(((0.111011834124)*gconst1*gconst12*npx*r20))+(((-0.029250218124)*gconst2*npy*r21*rxp0_2))+(((-0.77576404)*gconst13*gconst2*npy*rxp2_2))+(((-0.07155)*gconst10*gconst3*gconst6*r21))+(((-0.07155)*gconst1*gconst14*gconst4*r21))+(((0.111011834124)*gconst11*npx*r20*rxp2_2))+(((0.38788202)*gconst3*gconst9*npy*rxp2_2))+(((-1.0)*gconst0*gconst14*gconst7*rxp2_2))+(((-0.38788202)*gconst0*gconst5*gconst7*npy))+(((0.38788202)*gconst1*gconst13*npy*rxp2_2))+(((0.0113456336913777)*gconst9*npx*npy*r21))+(((0.0079428967315722)*gconst14*npy*(r20*r20)))+(((-6.20611232)*gconst1*npy*(rxp0_2*rxp0_2)))+(((-1.1448)*gconst1*gconst2*r20*rxp0_2))+(((0.38788202)*gconst1*gconst4*gconst7*npy))+(((-0.321795428662722)*gconst5*rxp2_2*(npy*npy)))+(((-0.07155)*gconst11*gconst3*gconst6*r21))+(((0.027752958531)*gconst3*gconst8*npy*r21))+(((-0.158569303862722)*gconst6*rxp0_2*(npy*npy)))+(((0.38788202)*gconst3*gconst8*npy*rxp2_2))+((gconst0*gconst12*gconst3*gconst5))+(((-0.0104452528920804)*gconst12*gconst5*(npy*npy)))+(((-1.0)*gconst0*gconst13*gconst2*gconst5))+(((-0.07155)*gconst1*gconst15*gconst4*r21))+(((0.40880808)*gconst1*gconst12*npy*rxp0_2))+(((0.158569303862722)*gconst9*npx*npy*rxp2_2))+(((0.0158857934631444)*gconst1*npy*(r20*r20)))+((gconst0*gconst15*gconst6*rxp2_2))+(((-3.10305616)*gconst1*gconst6*npx*rxp0_2))+(((-0.111011834124)*gconst2*npx*r20*rxp2_2))+(((0.027752958531)*gconst1*gconst12*npy*r21))+(((-1.0)*gconst0*gconst14*gconst5*rxp2_2))+(((-0.0104452528920804)*gconst6*gconst9*(npy*npy)))+(((-1.0)*gconst0*gconst2*gconst7*gconst9))+(((-0.601809845757122)*gconst6*rxp2_2*(npx*npx)))+(((0.055505917062)*gconst11*npy*r21*rxp2_2))+(((-0.300904922878561)*gconst7*rxp2_2*(npy*npy)))+(((0.07155)*gconst11*gconst2*gconst7*r21))+(((0.40880808)*gconst2*npy*rxp0_2*rxp2_2))+(((-0.601809845757122)*gconst5*rxp2_2*(npx*npx)))+((gconst0*gconst15*gconst5*rxp2_2))+(((-0.0430594944639221)*gconst6*npx*npy*r20))+(((-0.07155)*gconst1*gconst15*gconst6*r21))+(((0.38788202)*gconst3*gconst5*gconst6*npy))+((gconst10*gconst3*gconst5*rxp2_2))+(((0.40880808)*gconst11*npy*rxp0_2*rxp2_2))+(((0.00149471568885671)*gconst6*r21*(npy*npy))));
op[6]=((((0.158569303862722)*gconst6*npx*npy*rxp2_2))+(((-0.0051194025)*gconst0*gconst15*(r21*r21)))+((gconst0*gconst12*gconst3*rxp2_2))+(((-0.00567281684568887)*gconst5*r20*(npy*npy)))+((gconst1*gconst2*gconst4*gconst7))+(((-0.1431)*gconst1*gconst15*r21*rxp2_2))+(((-0.0113456336913777)*gconst6*npx*npy*r21))+(((0.00567281684568887)*gconst6*r20*(npy*npy)))+(((0.027752958531)*gconst0*gconst7*npy*r21))+(((-0.77576404)*gconst2*gconst7*npy*rxp2_2))+(((-1.0)*gconst10*gconst2*(rxp2_2*rxp2_2)))+(((-0.1431)*gconst11*gconst3*r21*rxp2_2))+(((0.444047336496)*gconst1*npy*r20*rxp0_2))+((gconst1*gconst2*gconst8*rxp2_2))+(((0.027752958531)*gconst2*gconst4*npy*r21))+(((-0.0010464265533861)*gconst11*npy*r20*r21))+(((-0.0051194025)*gconst10*gconst2*(r21*r21)))+(((-0.0104452528920804)*gconst5*gconst6*(npy*npy)))+(((-0.014625109062)*gconst1*gconst12*npy*r20))+(((0.77576404)*gconst3*gconst6*npy*rxp2_2))+((gconst0*gconst3*gconst5*gconst6))+(((-1.0)*gconst0*gconst14*(rxp2_2*rxp2_2)))+(((0.04095522)*gconst1*gconst2*(r20*r20)))+(((0.027752958531)*gconst1*gconst6*npy*r21))+(((-0.02047761)*gconst11*gconst2*(r20*r20)))+(((-0.07155)*gconst1*gconst12*gconst3*r21))+((gconst1*gconst14*(rxp2_2*rxp2_2)))+(((0.00308090682889362)*(npx*npx)*(r21*r21)))+(((-1.0)*gconst1*gconst3*gconst4*gconst6))+(((0.07155)*gconst0*gconst13*gconst2*r21))+(((-0.014625109062)*gconst14*npy*r20*rxp2_2))+(((-0.0051194025)*gconst1*gconst14*(r21*r21)))+((gconst0*gconst3*gconst9*rxp2_2))+(((-0.0051194025)*gconst11*gconst3*(r21*r21)))+(((-0.00616181365778725)*npx*npy*r20*r21))+(((-0.38788202)*gconst0*gconst6*npy*rxp2_2))+(((-0.0051194025)*gconst10*gconst3*(r21*r21)))+(((0.027752958531)*gconst3*gconst5*npy*r21))+(((0.027752958531)*gconst0*gconst6*npy*r21))+(((-1.0)*gconst11*gconst3*(rxp2_2*rxp2_2)))+((gconst1*gconst13*gconst2*rxp2_2))+(((-1.0)*gconst0*gconst13*gconst2*rxp2_2))+(((0.027752958531)*gconst1*gconst7*npy*r21))+(((-0.38788202)*gconst2*gconst4*npy*rxp2_2))+(((0.38788202)*gconst3*gconst4*npy*rxp2_2))+(((0.07155)*gconst0*gconst2*gconst9*r21))+(((-3.10305616)*gconst1*npx*rxp0_2*rxp2_2))+((gconst10*gconst3*(rxp2_2*rxp2_2)))+(((0.40880808)*gconst2*gconst5*npy*rxp0_2))+(((0.07155)*gconst0*gconst3*gconst9*r21))+(((-1.0)*gconst1*gconst3*gconst8*rxp2_2))+(((-0.0104452528920804)*gconst12*rxp2_2*(npy*npy)))+(((-3.10305616)*gconst2*npx*rxp0_2*rxp2_2))+(((0.38788202)*gconst1*gconst7*npy*rxp2_2))+(((0.0010464265533861)*gconst14*npy*r20*r21))+(((0.000747357844428353)*gconst12*r21*(npy*npy)))+(((0.00308090682889362)*(npy*npy)*(r20*r20)))+(((0.027752958531)*gconst3*gconst4*npy*r21))+(((0.40880808)*gconst1*gconst6*npy*rxp0_2))+(((-0.0226912673827555)*r21*rxp0_2*(npy*npy)))+(((-0.38788202)*gconst2*gconst5*npy*rxp2_2))+(((-0.0104452528920804)*gconst9*rxp2_2*(npy*npy)))+(((-0.07155)*gconst1*gconst3*gconst8*r21))+(((-1.0)*gconst0*gconst2*gconst5*gconst7))+(((-0.622700351541282)*(npy*npy)*(rxp2_2*rxp2_2)))+(((-1.0)*gconst0*gconst2*gconst9*rxp2_2))+((gconst0*gconst15*(rxp2_2*rxp2_2)))+(((0.158569303862722)*gconst5*npx*npy*rxp2_2))+(((0.222023668248)*gconst2*npx*r21*rxp0_2))+(((-0.07155)*gconst0*gconst12*gconst3*r21))+(((-0.07155)*gconst1*gconst2*gconst8*r21))+(((0.111011834124)*gconst1*gconst6*npx*r20))+(((-16.0)*gconst1*gconst2*(rxp0_2*rxp0_2)))+(((0.07155)*gconst1*gconst13*gconst2*r21))+(((-0.38788202)*gconst0*gconst7*npy*rxp2_2))+(((0.000106946907537697)*(npy*npy)*(r21*r21)))+(((0.1431)*gconst0*gconst14*r21*rxp2_2))+(((-0.601809845757122)*(npx*npx)*(rxp2_2*rxp2_2)))+(((-0.000747357844428353)*gconst9*r21*(npy*npy)))+(((0.38788202)*gconst3*gconst5*npy*rxp2_2))+(((-0.0051194025)*gconst1*gconst15*(r21*r21)))+(((0.38788202)*gconst1*gconst6*npy*rxp2_2))+(((-0.0051194025)*gconst0*gconst14*(r21*r21)))+(((0.0113456336913777)*gconst5*npx*npy*r21))+((gconst11*gconst2*(rxp2_2*rxp2_2)))+(((-0.0051194025)*gconst11*gconst2*(r21*r21)))+(((0.111011834124)*gconst2*gconst5*npx*r20))+(((-0.77576404)*gconst0*gconst5*npy*rxp2_2))+(((0.77576404)*gconst1*gconst4*npy*rxp2_2))+(((-0.222023668248)*gconst1*npx*r21*rxp0_2))+(((-1.0)*gconst1*gconst12*gconst3*rxp2_2))+(((-1.0)*gconst1*gconst15*(rxp2_2*rxp2_2)))+(((0.1431)*gconst10*gconst2*r21*rxp2_2))+(((-0.014625109062)*gconst2*gconst9*npy*r20))+(((-0.444047336496)*gconst2*npy*r20*rxp0_2))+(((-0.014625109062)*gconst11*npy*r20*rxp2_2))+(((0.027752958531)*gconst2*gconst5*npy*r21))+(((-0.02047761)*gconst1*gconst14*(r20*r20))));
op[7]=((((-1.0)*gconst2*x81*x97))+(((-1.0)*x120*x85))+((gconst0*gconst5*x82))+((x107*x91))+((rxp2_2*x80*x99))+((gconst3*npy*x116))+(((-0.000811780090618077)*npx*npy*x73))+(((-0.07155)*x74*x91))+(((-0.07155)*x74*x96))+((gconst7*rxp2_2*x85))+((x115*x79))+((x107*x75))+(((-1.0)*x109*x79))+((x116*x79))+((gconst2*rxp2_2*x113))+((gconst1*x81*x97))+(((0.000811780090618077)*x70*x81))+((x105*x74))+((npy*x80*x82))+((gconst0*gconst6*x82))+((x102*x109))+(((-1.0)*gconst6*x103*x82))+(((-1.0)*x110*x94))+((x118*x75))+(((-1.0)*gconst4*x103*x82))+(((-1.0)*gconst5*r21*x105))+(((-1.0)*x75*x94))+((x112*x85))+(((-1.0)*gconst6*rxp2_2*x110))+((x108*x86))+((x108*x80))+((x118*x85))+(((-1.0)*x116*x99))+((rxp2_2*x79*x86))+((rxp2_2*x79*x80))+(((-1.0)*x102*x115))+(((-1.0)*x102*x116))+((gconst1*rxp2_2*x113))+(((-1.0)*rxp2_2*x75*x83))+(((-1.0)*gconst5*x102*x76))+((gconst4*rxp2_2*x85))+(((-1.0)*x120*x96))+(((-1.0)*gconst6*x76*x79))+((x114*x72)));
op[8]=((((-0.0010464265533861)*x79*x81))+(((-1.0)*x111*x75))+((x72*x91))+(((-1.0)*x111*x85))+(((-1.0)*x108*x76))+((x72*x85))+(((-1.0)*x111*x91))+(((-1.0)*x111*x96))+(((-1.0)*gconst1*x101*x82))+(((-1.0)*x106*x75))+(((-1.0)*x117*x85))+((rxp2_2*x101*x75))+(((0.0010464265533861)*x102*x81))+(((5.34734537688486e-5)*x70*x73))+(((-1.0)*rxp2_2*x76*x79))+(((-1.0)*x106*x96))+(((-1.0)*x110*x72)));
polyroots8(op,zeror,numroots);
IkReal j4array[8], cj4array[8], sj4array[8], tempj4array[1];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ++ij4)
{
IkReal htj4 = zeror[ij4];
tempj4array[0]=((2.0)*(atan(htj4)));
for(int kj4 = 0; kj4 < 1; ++kj4)
{
j4array[numsolutions] = tempj4array[kj4];
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
numsolutions++;
}
}
bool j4valid[8]={true,true,true,true,true,true,true,true};
_nj4 = 8;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
htj4 = IKtan(j4/2);

_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
{
IkReal j5eval[2];
IkReal x122=cj4*cj4;
IkReal x123=((0.05110101)*sj4);
IkReal x124=(npx*rxp0_2);
IkReal x125=(npy*rxp1_2);
IkReal x126=((13.9762403913347)*sj4);
IkReal x127=(npx*rxp1_2);
IkReal x128=(cj4*pz);
IkReal x129=((0.19394101)*npy*rxp0_2);
IkReal x130=((53.04329948661)*npy*rxp0_2);
IkReal x131=(cj4*npz*r22);
IkReal x132=(cj4*npx*r21*sj4);
IkReal x133=(cj4*npy*r20*sj4);
j5eval[0]=((((-3.79524807826695)*x132))+((x122*x130))+x128+(((-1.0)*x124*x126))+(((-1.0)*x130))+(((-1.0)*x125*x126))+(((-1.0)*x131))+(((-53.04329948661)*x122*x127))+(((53.04329948661)*x127))+(((3.79524807826695)*x133)));
j5eval[1]=IKsign(((((-0.0138764792655)*x132))+(((-0.0036562772655)*x131))+(((-1.0)*x123*x124))+(((-1.0)*x123*x125))+(((0.19394101)*x127))+(((0.0138764792655)*x133))+(((-0.19394101)*x122*x127))+((x122*x129))+(((-1.0)*x129))+(((0.0036562772655)*x128))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j5]

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x134=cj4*cj4;
IkReal x135=(cj4*r21);
IkReal x136=((0.025550505)*pp);
IkReal x137=(npx*sj4);
IkReal x138=(cj4*rxp2_2);
IkReal x139=((0.05110101)*npy);
IkReal x140=((0.0138764792655)*r22);
IkReal x141=(cj4*npz);
IkReal x142=(rxp1_2*sj4);
IkReal x143=(rxp0_2*sj4);
IkReal x144=((0.3571)*pp);
IkReal x145=((0.0036562772655)*r22);
IkReal x146=(npy*sj4);
IkReal x147=(cj4*r20);
IkReal x148=((0.19394101)*x134);
IkReal x149=((0.0138764792655)*npz*x134);
CheckValue<IkReal> x150 = IKatan2WithCheck(IkReal(((((-1.0)*x137*x145))+(((-0.19394101)*x138*x146))+(((-1.0)*x142*x144))+((x135*x136))+(((-0.00124332858186052)*x135))+(((0.0173770591455)*x142))+(((0.19394101)*x141*x142))+(((-0.05110101)*npx*x138))+(((-1.0)*npy*x140))+(((-1.0)*r21*x149))+((npy*x134*x140)))),IkReal(((((0.00124332858186052)*x147))+((r20*x149))+(((-1.0)*x138*x139))+(((0.19394101)*x137*x138))+(((-0.19394101)*x141*x143))+(((-0.0173770591455)*x143))+(((-1.0)*npx*x134*x140))+((npx*x140))+(((-1.0)*x145*x146))+(((-1.0)*x136*x147))+((x143*x144)))),IKFAST_ATAN2_MAGTHRESH);
if(!x150.valid){
continue;
}
CheckValue<IkReal> x151=IKPowWithIntegerCheck(IKsign(((((0.0138764792655)*x146*x147))+(((-0.05110101)*rxp0_2*x137))+(((-1.0)*x139*x142))+(((0.0036562772655)*cj4*pz))+(((-0.0138764792655)*x135*x137))+(((-1.0)*x141*x145))+((npy*rxp0_2*(((-0.19394101)+x148))))+((npx*rxp1_2*(((0.19394101)+(((-1.0)*x148)))))))),-1);
if(!x151.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x150.value)+(((1.5707963267949)*(x151.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
IkReal x152=IKcos(j5);
IkReal x153=IKsin(j5);
IkReal x154=((0.07155)*cj4);
IkReal x155=(sj4*x153);
IkReal x156=(sj4*x152);
evalcond[0]=((-0.0173770591455)+(((-0.05110101)*npy*x153))+(((0.05110101)*npx*x152))+(((0.19394101)*npx*x155))+(((0.19394101)*npy*x156))+(((-0.19394101)*cj4*npz))+(((0.3571)*pp)));
evalcond[1]=(((r20*x153*x154))+(((-1.0)*rxp0_2*x155))+((r21*x152*x154))+((cj4*rxp2_2))+(((-1.0)*rxp1_2*x156))+(((0.07155)*r22*sj4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0eval[1];
j0eval[0]=(((cj5*r10))+(((13.9762403913347)*py))+(((-1.0)*r11*sj5)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
IkReal x157=((1.0)*sj4);
j0eval[0]=((((-1.0)*r10*sj5*x157))+(((-1.0)*cj5*r11*x157))+((cj4*r12)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
IkReal x158=((13.9762403913347)*sj4);
j0eval[0]=(((cj4*r00*sj5))+(((-1.0)*rxp0_0*sj5*x158))+((r02*sj4))+((cj4*cj5*r01))+(((13.9762403913347)*cj4*rxp2_0))+(((-1.0)*cj5*rxp1_0*x158)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x159=((13.9762403913347)*py);
IkReal x160=((1.0)+(((-1.0)*(r12*r12))));
if((x160) < -0.00001)
continue;
IkReal x161=IKabs(IKsqrt(x160));
IkReal x167 = x160;
if(IKabs(x167)==0){
continue;
}
IkReal x162=pow(x167,-0.5);
CheckValue<IkReal> x168=IKPowWithIntegerCheck(x161,-1);
if(!x168.valid){
continue;
}
IkReal x163=x168.value;
IkReal x164=(x162*x163);
if((((1.0)+(((-195.335295476376)*(py*py)*(x163*x163))))) < -0.00001)
continue;
IkReal x165=IKsqrt(((1.0)+(((-195.335295476376)*(py*py)*(x163*x163)))));
IkReal x166=((1.0)*x162*x165);
if((((r11*r11)+(r10*r10))) < -0.00001)
continue;
CheckValue<IkReal> x169=IKPowWithIntegerCheck(IKabs(IKsqrt(((r11*r11)+(r10*r10)))),-1);
if(!x169.valid){
continue;
}
if( ((x159*(x169.value))) < -1-IKFAST_SINCOS_THRESH || ((x159*(x169.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x170 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x170.valid){
continue;
}
IkReal gconst32=((((-1.0)*(IKasin((x159*(x169.value))))))+(((-1.0)*(x170.value))));
IkReal gconst33=((((-1.0)*r10*x166))+((r11*x159*x164)));
IkReal gconst34=((((-1.0)*r10*x159*x164))+(((-1.0)*r11*x166)));
if((((r11*r11)+(r10*r10))) < -0.00001)
continue;
CheckValue<IkReal> x171=IKPowWithIntegerCheck(IKabs(IKsqrt(((r11*r11)+(r10*r10)))),-1);
if(!x171.valid){
continue;
}
if( (((13.9762403913347)*py*(x171.value))) < -1-IKFAST_SINCOS_THRESH || (((13.9762403913347)*py*(x171.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x172 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x172.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((IKasin(((13.9762403913347)*py*(x171.value))))+j5+(x172.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x173=gconst33*gconst33;
IkReal x174=gconst34*gconst34;
IkReal x175=((0.5724)*gconst33);
IkReal x176=((0.07155)*gconst34);
IkReal x177=((0.07155)*gconst33);
IkReal x178=((0.5724)*gconst34);
IkReal x179=((0.02047761)*x174);
IkReal x180=((0.04095522)*gconst33*gconst34);
IkReal x181=((0.02047761)*x173);
CheckValue<IkReal> x188=IKPowWithIntegerCheck(((((-1.0)*r11*x177))+py+((r10*x176))),-1);
if(!x188.valid){
continue;
}
IkReal x182=x188.value;
IkReal x183=(px*x182);
CheckValue<IkReal> x189=IKPowWithIntegerCheck(((((-1.0)*r11*x177))+(((0.07155)*gconst34*r10))+py),-1);
if(!x189.valid){
continue;
}
IkReal x184=(r00*x176*(x189.value));
CheckValue<IkReal> x190=IKPowWithIntegerCheck(((((-0.07155)*gconst33*r11))+py+((r10*x176))),-1);
if(!x190.valid){
continue;
}
IkReal x185=(r01*x177*(x190.value));
IkReal x186=(x184+x183);
if(((((py*r10*x178))+(((4.0)*(py*py)))+((px*r00*x178))+((x179*(r10*r10)))+(((-1.0)*py*r11*x175))+((x179*(r00*r00)))+((x181*(r11*r11)))+(((4.0)*(px*px)))+(((-1.0)*px*r01*x175))+(((-1.0)*r00*r01*x180))+((x181*(r01*r01)))+(((-1.0)*r10*r11*x180)))) < -0.00001)
continue;
IkReal x187=((0.5)*x182*(IKsqrt((((py*r10*x178))+(((4.0)*(py*py)))+((px*r00*x178))+((x179*(r10*r10)))+(((-1.0)*py*r11*x175))+((x179*(r00*r00)))+((x181*(r11*r11)))+(((4.0)*(px*px)))+(((-1.0)*px*r01*x175))+(((-1.0)*r00*r01*x180))+((x181*(r01*r01)))+(((-1.0)*r10*r11*x180))))));
j0array[0]=((2.0)*(atan(((((-1.0)*x186))+x185+x187))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((-2.0)*(atan(((((-1.0)*x185))+x186+x187))));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

innerfn(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2771=((13.9762403913347)*py);
IkReal x2772=((1.0)+(((-1.0)*(r12*r12))));
if((x2772) < -0.00001)
continue;
IkReal x2773=IKabs(IKsqrt(x2772));
IkReal x2779 = x2772;
if(IKabs(x2779)==0){
continue;
}
IkReal x2774=pow(x2779,-0.5);
CheckValue<IkReal> x2780=IKPowWithIntegerCheck(x2773,-1);
if(!x2780.valid){
continue;
}
IkReal x2775=x2780.value;
IkReal x2776=(x2774*x2775);
if((((1.0)+(((-195.335295476376)*(py*py)*(x2775*x2775))))) < -0.00001)
continue;
IkReal x2777=IKsqrt(((1.0)+(((-195.335295476376)*(py*py)*(x2775*x2775)))));
IkReal x2778=((1.0)*x2774*x2777);
CheckValue<IkReal> x2781 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x2781.valid){
continue;
}
if((((r11*r11)+(r10*r10))) < -0.00001)
continue;
CheckValue<IkReal> x2782=IKPowWithIntegerCheck(IKabs(IKsqrt(((r11*r11)+(r10*r10)))),-1);
if(!x2782.valid){
continue;
}
if( ((x2771*(x2782.value))) < -1-IKFAST_SINCOS_THRESH || ((x2771*(x2782.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal gconst35=((3.14159265358979)+(((-1.0)*(x2781.value)))+(IKasin((x2771*(x2782.value)))));
IkReal gconst36=(((r11*x2771*x2776))+((r10*x2778)));
IkReal gconst37=(((r11*x2778))+(((-1.0)*r10*x2771*x2776)));
if((((r11*r11)+(r10*r10))) < -0.00001)
continue;
CheckValue<IkReal> x2783=IKPowWithIntegerCheck(IKabs(IKsqrt(((r11*r11)+(r10*r10)))),-1);
if(!x2783.valid){
continue;
}
if( (((13.9762403913347)*py*(x2783.value))) < -1-IKFAST_SINCOS_THRESH || (((13.9762403913347)*py*(x2783.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x2784 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x2784.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(((-1.0)*(IKasin(((13.9762403913347)*py*(x2783.value))))))+j5+(x2784.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x2785=gconst37*gconst37;
IkReal x2786=gconst36*gconst36;
IkReal x2787=(gconst37*r00);
IkReal x2788=(gconst36*r01);
IkReal x2789=((0.5724)*px);
IkReal x2790=(gconst36*r11);
IkReal x2791=((0.5724)*py);
IkReal x2792=(gconst37*r10);
IkReal x2793=((0.02047761)*x2786);
IkReal x2794=((0.02047761)*x2785);
CheckValue<IkReal> x2802=IKPowWithIntegerCheck(((((-0.07155)*x2790))+(((0.07155)*x2792))+py),-1);
if(!x2802.valid){
continue;
}
IkReal x2795=x2802.value;
IkReal x2796=(px*x2795);
IkReal x2797=((0.07155)*x2795);
IkReal x2798=(x2787*x2797);
IkReal x2799=(x2788*x2797);
IkReal x2800=(x2798+x2796);
if(((((x2794*(r00*r00)))+(((4.0)*(py*py)))+(((-1.0)*x2790*x2791))+((x2787*x2789))+((x2793*(r11*r11)))+((x2794*(r10*r10)))+(((-0.04095522)*x2790*x2792))+((x2793*(r01*r01)))+((x2791*x2792))+(((4.0)*(px*px)))+(((-1.0)*x2788*x2789))+(((-0.04095522)*x2787*x2788)))) < -0.00001)
continue;
IkReal x2801=((0.5)*x2795*(IKsqrt((((x2794*(r00*r00)))+(((4.0)*(py*py)))+(((-1.0)*x2790*x2791))+((x2787*x2789))+((x2793*(r11*r11)))+((x2794*(r10*r10)))+(((-0.04095522)*x2790*x2792))+((x2793*(r01*r01)))+((x2791*x2792))+(((4.0)*(px*px)))+(((-1.0)*x2788*x2789))+(((-0.04095522)*x2787*x2788))))));
j0array[0]=((2.0)*(atan((x2799+(((-1.0)*x2800))+x2801))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((-2.0)*(atan(((((-1.0)*x2799))+x2800+x2801))));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

innerfn(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x2803=IKPowWithIntegerCheck(((((-1.0)*cj5*rxp1_0*sj4))+(((0.07155)*cj4*r00*sj5))+(((-1.0)*rxp0_0*sj4*sj5))+((cj4*rxp2_0))+(((0.07155)*cj4*cj5*r01))+(((0.07155)*r02*sj4))),-1);
if(!x2803.valid){
continue;
}
CheckValue<IkReal> x2804=IKPowWithIntegerCheck(((((-1.0)*cj5*rxp1_0*sj4))+(((0.07155)*cj4*r00*sj5))+(((-1.0)*rxp0_0*sj4*sj5))+((cj4*rxp2_0))+(((0.07155)*cj4*cj5*r01))+(((0.07155)*r02*sj4))),-1);
if(!x2804.valid){
continue;
}
if((((((0.02047761)*(r12*r12)))+(((-0.5724)*cj4*r11*rxp1_1*sj4*(cj5*cj5)))+(((0.5724)*cj5*r02*rxp1_0*(cj4*cj4)))+(((0.04095522)*cj4*r10*r12*sj4*sj5))+(((-4.0)*(cj4*cj4)*(rxp0_0*rxp0_0)))+(((4.0)*(cj5*cj5)*(rxp1_1*rxp1_1)))+(((4.0)*(rxp0_1*rxp0_1)))+(((0.04095522)*cj4*cj5*r11*r12*sj4))+(((0.02047761)*(cj4*cj4)*(r10*r10)))+(((-0.02047761)*(cj4*cj4)*(cj5*cj5)*(r10*r10)))+(((4.0)*(cj4*cj4)*(cj5*cj5)*(rxp0_0*rxp0_0)))+(((0.5724)*r00*rxp2_0*sj5*(cj4*cj4)))+(((0.5724)*cj4*r02*rxp2_0*sj4))+(((4.0)*(cj4*cj4)*(rxp2_1*rxp2_1)))+(((0.5724)*r12*rxp0_1*sj5*(cj4*cj4)))+(((0.5724)*cj5*r11*rxp2_1*(cj4*cj4)))+(((8.0)*cj5*rxp0_0*rxp1_0*sj5))+(((-0.5724)*r02*rxp0_0*sj5))+(((0.5724)*cj5*r12*rxp1_1*(cj4*cj4)))+(((-8.0)*cj4*cj5*rxp1_0*rxp2_0*sj4))+(((-4.0)*(cj5*cj5)*(rxp0_1*rxp0_1)))+(((0.5724)*cj5*r01*rxp2_0*(cj4*cj4)))+(((8.0)*cj5*rxp0_1*rxp1_1*sj5))+(((-4.0)*(cj4*cj4)*(cj5*cj5)*(rxp1_1*rxp1_1)))+(((-8.0)*cj4*rxp0_1*rxp2_1*sj4*sj5))+(((-0.5724)*cj5*r12*rxp1_1))+(((-8.0)*cj5*rxp0_0*rxp1_0*sj5*(cj4*cj4)))+(((-0.5724)*cj4*cj5*r01*rxp0_0*sj4*sj5))+(((0.04095522)*cj4*cj5*r01*r02*sj4))+(((0.02047761)*(cj4*cj4)*(cj5*cj5)*(r01*r01)))+(((0.5724)*cj4*r12*rxp2_1*sj4))+(((0.04095522)*cj5*r10*r11*sj5*(cj4*cj4)))+(((-8.0)*cj4*cj5*rxp1_1*rxp2_1*sj4))+(((-0.5724)*cj5*r02*rxp1_0))+(((-0.5724)*cj4*r10*rxp0_1*sj4))+(((0.5724)*r02*rxp0_0*sj5*(cj4*cj4)))+(((0.02047761)*(cj4*cj4)*(r00*r00)))+(((-8.0)*cj4*rxp0_0*rxp2_0*sj4*sj5))+(((0.02047761)*(r02*r02)))+(((-8.0)*cj5*rxp0_1*rxp1_1*sj5*(cj4*cj4)))+(((-0.5724)*r12*rxp0_1*sj5))+(((0.5724)*r10*rxp2_1*sj5*(cj4*cj4)))+(((-4.0)*(cj4*cj4)*(rxp0_1*rxp0_1)))+(((-0.5724)*cj4*r00*rxp0_0*sj4))+(((-0.02047761)*(cj4*cj4)*(r02*r02)))+(((-0.5724)*cj4*cj5*r10*rxp1_1*sj4*sj5))+(((-0.5724)*cj4*cj5*r00*rxp1_0*sj4*sj5))+(((-0.02047761)*(cj4*cj4)*(cj5*cj5)*(r00*r00)))+(((-4.0)*(cj5*cj5)*(rxp0_0*rxp0_0)))+(((0.04095522)*cj5*r00*r01*sj5*(cj4*cj4)))+(((0.04095522)*cj4*r00*r02*sj4*sj5))+(((0.5724)*cj4*r10*rxp0_1*sj4*(cj5*cj5)))+(((-0.5724)*cj4*cj5*r11*rxp0_1*sj4*sj5))+(((-0.02047761)*(cj4*cj4)*(r12*r12)))+(((4.0)*(cj4*cj4)*(cj5*cj5)*(rxp0_1*rxp0_1)))+(((-0.5724)*cj4*r01*rxp1_0*sj4*(cj5*cj5)))+(((4.0)*(cj5*cj5)*(rxp1_0*rxp1_0)))+(((0.5724)*cj4*r00*rxp0_0*sj4*(cj5*cj5)))+(((4.0)*(cj4*cj4)*(rxp2_0*rxp2_0)))+(((-4.0)*(cj4*cj4)*(cj5*cj5)*(rxp1_0*rxp1_0)))+(((4.0)*(rxp0_0*rxp0_0)))+(((0.02047761)*(cj4*cj4)*(cj5*cj5)*(r11*r11))))) < -0.00001)
continue;
CheckValue<IkReal> x2805=IKPowWithIntegerCheck(((((-1.0)*cj5*rxp1_0*sj4))+(((0.07155)*cj4*r00*sj5))+(((-1.0)*rxp0_0*sj4*sj5))+((cj4*rxp2_0))+(((0.07155)*cj4*cj5*r01))+(((0.07155)*r02*sj4))),-1);
if(!x2805.valid){
continue;
}
CheckValue<IkReal> x2806=IKPowWithIntegerCheck(((((-1.0)*cj5*rxp1_0*sj4))+(((0.07155)*cj4*r00*sj5))+(((-1.0)*rxp0_0*sj4*sj5))+((cj4*rxp2_0))+(((0.07155)*cj4*cj5*r01))+(((0.07155)*r02*sj4))),-1);
if(!x2806.valid){
continue;
}
CheckValue<IkReal> x2807=IKPowWithIntegerCheck(((((-1.0)*cj5*rxp1_0*sj4))+(((0.07155)*cj4*r00*sj5))+(((-1.0)*rxp0_0*sj4*sj5))+((cj4*rxp2_0))+(((0.07155)*cj4*cj5*r01))+(((0.07155)*r02*sj4))),-1);
if(!x2807.valid){
continue;
}
CheckValue<IkReal> x2808=IKPowWithIntegerCheck(((((-1.0)*cj5*rxp1_0*sj4))+(((0.07155)*cj4*r00*sj5))+(((-1.0)*rxp0_0*sj4*sj5))+((cj4*rxp2_0))+(((0.07155)*cj4*cj5*r01))+(((0.07155)*r02*sj4))),-1);
if(!x2808.valid){
continue;
}
CheckValue<IkReal> x2809=IKPowWithIntegerCheck(((((-1.0)*cj5*rxp1_0*sj4))+(((0.07155)*cj4*r00*sj5))+(((-1.0)*rxp0_0*sj4*sj5))+((cj4*rxp2_0))+(((0.07155)*cj4*cj5*r01))+(((0.07155)*r02*sj4))),-1);
if(!x2809.valid){
continue;
}
j0array[0]=((2.0)*(atan(((((0.07155)*r12*sj4*(x2803.value)))+(((0.5)*(x2804.value)*(IKsqrt(((((0.02047761)*(r12*r12)))+(((-0.5724)*cj4*r11*rxp1_1*sj4*(cj5*cj5)))+(((0.5724)*cj5*r02*rxp1_0*(cj4*cj4)))+(((0.04095522)*cj4*r10*r12*sj4*sj5))+(((-4.0)*(cj4*cj4)*(rxp0_0*rxp0_0)))+(((4.0)*(cj5*cj5)*(rxp1_1*rxp1_1)))+(((4.0)*(rxp0_1*rxp0_1)))+(((0.04095522)*cj4*cj5*r11*r12*sj4))+(((0.02047761)*(cj4*cj4)*(r10*r10)))+(((-0.02047761)*(cj4*cj4)*(cj5*cj5)*(r10*r10)))+(((4.0)*(cj4*cj4)*(cj5*cj5)*(rxp0_0*rxp0_0)))+(((0.5724)*r00*rxp2_0*sj5*(cj4*cj4)))+(((0.5724)*cj4*r02*rxp2_0*sj4))+(((4.0)*(cj4*cj4)*(rxp2_1*rxp2_1)))+(((0.5724)*r12*rxp0_1*sj5*(cj4*cj4)))+(((0.5724)*cj5*r11*rxp2_1*(cj4*cj4)))+(((8.0)*cj5*rxp0_0*rxp1_0*sj5))+(((-0.5724)*r02*rxp0_0*sj5))+(((0.5724)*cj5*r12*rxp1_1*(cj4*cj4)))+(((-8.0)*cj4*cj5*rxp1_0*rxp2_0*sj4))+(((-4.0)*(cj5*cj5)*(rxp0_1*rxp0_1)))+(((0.5724)*cj5*r01*rxp2_0*(cj4*cj4)))+(((8.0)*cj5*rxp0_1*rxp1_1*sj5))+(((-4.0)*(cj4*cj4)*(cj5*cj5)*(rxp1_1*rxp1_1)))+(((-8.0)*cj4*rxp0_1*rxp2_1*sj4*sj5))+(((-0.5724)*cj5*r12*rxp1_1))+(((-8.0)*cj5*rxp0_0*rxp1_0*sj5*(cj4*cj4)))+(((-0.5724)*cj4*cj5*r01*rxp0_0*sj4*sj5))+(((0.04095522)*cj4*cj5*r01*r02*sj4))+(((0.02047761)*(cj4*cj4)*(cj5*cj5)*(r01*r01)))+(((0.5724)*cj4*r12*rxp2_1*sj4))+(((0.04095522)*cj5*r10*r11*sj5*(cj4*cj4)))+(((-8.0)*cj4*cj5*rxp1_1*rxp2_1*sj4))+(((-0.5724)*cj5*r02*rxp1_0))+(((-0.5724)*cj4*r10*rxp0_1*sj4))+(((0.5724)*r02*rxp0_0*sj5*(cj4*cj4)))+(((0.02047761)*(cj4*cj4)*(r00*r00)))+(((-8.0)*cj4*rxp0_0*rxp2_0*sj4*sj5))+(((0.02047761)*(r02*r02)))+(((-8.0)*cj5*rxp0_1*rxp1_1*sj5*(cj4*cj4)))+(((-0.5724)*r12*rxp0_1*sj5))+(((0.5724)*r10*rxp2_1*sj5*(cj4*cj4)))+(((-4.0)*(cj4*cj4)*(rxp0_1*rxp0_1)))+(((-0.5724)*cj4*r00*rxp0_0*sj4))+(((-0.02047761)*(cj4*cj4)*(r02*r02)))+(((-0.5724)*cj4*cj5*r10*rxp1_1*sj4*sj5))+(((-0.5724)*cj4*cj5*r00*rxp1_0*sj4*sj5))+(((-0.02047761)*(cj4*cj4)*(cj5*cj5)*(r00*r00)))+(((-4.0)*(cj5*cj5)*(rxp0_0*rxp0_0)))+(((0.04095522)*cj5*r00*r01*sj5*(cj4*cj4)))+(((0.04095522)*cj4*r00*r02*sj4*sj5))+(((0.5724)*cj4*r10*rxp0_1*sj4*(cj5*cj5)))+(((-0.5724)*cj4*cj5*r11*rxp0_1*sj4*sj5))+(((-0.02047761)*(cj4*cj4)*(r12*r12)))+(((4.0)*(cj4*cj4)*(cj5*cj5)*(rxp0_1*rxp0_1)))+(((-0.5724)*cj4*r01*rxp1_0*sj4*(cj5*cj5)))+(((4.0)*(cj5*cj5)*(rxp1_0*rxp1_0)))+(((0.5724)*cj4*r00*rxp0_0*sj4*(cj5*cj5)))+(((4.0)*(cj4*cj4)*(rxp2_0*rxp2_0)))+(((-4.0)*(cj4*cj4)*(cj5*cj5)*(rxp1_0*rxp1_0)))+(((4.0)*(rxp0_0*rxp0_0)))+(((0.02047761)*(cj4*cj4)*(cj5*cj5)*(r11*r11))))))))+((cj4*rxp2_1*(x2805.value)))+(((0.07155)*cj4*cj5*r11*(x2806.value)))+(((-1.0)*cj5*rxp1_1*sj4*(x2807.value)))+(((0.07155)*cj4*r10*sj5*(x2808.value)))+(((-1.0)*rxp0_1*sj4*sj5*(x2809.value)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
CheckValue<IkReal> x2810=IKPowWithIntegerCheck(((((-1.0)*cj5*rxp1_0*sj4))+(((0.07155)*cj4*r00*sj5))+(((-1.0)*rxp0_0*sj4*sj5))+((cj4*rxp2_0))+(((0.07155)*cj4*cj5*r01))+(((0.07155)*r02*sj4))),-1);
if(!x2810.valid){
continue;
}
CheckValue<IkReal> x2811=IKPowWithIntegerCheck(((((-1.0)*cj5*rxp1_0*sj4))+(((0.07155)*cj4*r00*sj5))+(((-1.0)*rxp0_0*sj4*sj5))+((cj4*rxp2_0))+(((0.07155)*cj4*cj5*r01))+(((0.07155)*r02*sj4))),-1);
if(!x2811.valid){
continue;
}
CheckValue<IkReal> x2812=IKPowWithIntegerCheck(((((-1.0)*cj5*rxp1_0*sj4))+(((0.07155)*cj4*r00*sj5))+(((-1.0)*rxp0_0*sj4*sj5))+((cj4*rxp2_0))+(((0.07155)*cj4*cj5*r01))+(((0.07155)*r02*sj4))),-1);
if(!x2812.valid){
continue;
}
CheckValue<IkReal> x2813=IKPowWithIntegerCheck(((((-1.0)*cj5*rxp1_0*sj4))+(((0.07155)*cj4*r00*sj5))+(((-1.0)*rxp0_0*sj4*sj5))+((cj4*rxp2_0))+(((0.07155)*cj4*cj5*r01))+(((0.07155)*r02*sj4))),-1);
if(!x2813.valid){
continue;
}
CheckValue<IkReal> x2814=IKPowWithIntegerCheck(((((-1.0)*cj5*rxp1_0*sj4))+(((0.07155)*cj4*r00*sj5))+(((-1.0)*rxp0_0*sj4*sj5))+((cj4*rxp2_0))+(((0.07155)*cj4*cj5*r01))+(((0.07155)*r02*sj4))),-1);
if(!x2814.valid){
continue;
}
if((((((0.02047761)*(r12*r12)))+(((-0.5724)*cj4*r11*rxp1_1*sj4*(cj5*cj5)))+(((0.5724)*cj5*r02*rxp1_0*(cj4*cj4)))+(((0.04095522)*cj4*r10*r12*sj4*sj5))+(((-4.0)*(cj4*cj4)*(rxp0_0*rxp0_0)))+(((4.0)*(cj5*cj5)*(rxp1_1*rxp1_1)))+(((4.0)*(rxp0_1*rxp0_1)))+(((0.04095522)*cj4*cj5*r11*r12*sj4))+(((0.02047761)*(cj4*cj4)*(r10*r10)))+(((-0.02047761)*(cj4*cj4)*(cj5*cj5)*(r10*r10)))+(((4.0)*(cj4*cj4)*(cj5*cj5)*(rxp0_0*rxp0_0)))+(((0.5724)*r00*rxp2_0*sj5*(cj4*cj4)))+(((0.5724)*cj4*r02*rxp2_0*sj4))+(((4.0)*(cj4*cj4)*(rxp2_1*rxp2_1)))+(((0.5724)*r12*rxp0_1*sj5*(cj4*cj4)))+(((0.5724)*cj5*r11*rxp2_1*(cj4*cj4)))+(((8.0)*cj5*rxp0_0*rxp1_0*sj5))+(((-0.5724)*r02*rxp0_0*sj5))+(((0.5724)*cj5*r12*rxp1_1*(cj4*cj4)))+(((-8.0)*cj4*cj5*rxp1_0*rxp2_0*sj4))+(((-4.0)*(cj5*cj5)*(rxp0_1*rxp0_1)))+(((0.5724)*cj5*r01*rxp2_0*(cj4*cj4)))+(((8.0)*cj5*rxp0_1*rxp1_1*sj5))+(((-4.0)*(cj4*cj4)*(cj5*cj5)*(rxp1_1*rxp1_1)))+(((-8.0)*cj4*rxp0_1*rxp2_1*sj4*sj5))+(((-0.5724)*cj5*r12*rxp1_1))+(((-8.0)*cj5*rxp0_0*rxp1_0*sj5*(cj4*cj4)))+(((-0.5724)*cj4*cj5*r01*rxp0_0*sj4*sj5))+(((0.04095522)*cj4*cj5*r01*r02*sj4))+(((0.02047761)*(cj4*cj4)*(cj5*cj5)*(r01*r01)))+(((0.5724)*cj4*r12*rxp2_1*sj4))+(((0.04095522)*cj5*r10*r11*sj5*(cj4*cj4)))+(((-8.0)*cj4*cj5*rxp1_1*rxp2_1*sj4))+(((-0.5724)*cj5*r02*rxp1_0))+(((-0.5724)*cj4*r10*rxp0_1*sj4))+(((0.5724)*r02*rxp0_0*sj5*(cj4*cj4)))+(((0.02047761)*(cj4*cj4)*(r00*r00)))+(((-8.0)*cj4*rxp0_0*rxp2_0*sj4*sj5))+(((0.02047761)*(r02*r02)))+(((-8.0)*cj5*rxp0_1*rxp1_1*sj5*(cj4*cj4)))+(((-0.5724)*r12*rxp0_1*sj5))+(((0.5724)*r10*rxp2_1*sj5*(cj4*cj4)))+(((-4.0)*(cj4*cj4)*(rxp0_1*rxp0_1)))+(((-0.5724)*cj4*r00*rxp0_0*sj4))+(((-0.02047761)*(cj4*cj4)*(r02*r02)))+(((-0.5724)*cj4*cj5*r10*rxp1_1*sj4*sj5))+(((-0.5724)*cj4*cj5*r00*rxp1_0*sj4*sj5))+(((-0.02047761)*(cj4*cj4)*(cj5*cj5)*(r00*r00)))+(((-4.0)*(cj5*cj5)*(rxp0_0*rxp0_0)))+(((0.04095522)*cj5*r00*r01*sj5*(cj4*cj4)))+(((0.04095522)*cj4*r00*r02*sj4*sj5))+(((0.5724)*cj4*r10*rxp0_1*sj4*(cj5*cj5)))+(((-0.5724)*cj4*cj5*r11*rxp0_1*sj4*sj5))+(((-0.02047761)*(cj4*cj4)*(r12*r12)))+(((4.0)*(cj4*cj4)*(cj5*cj5)*(rxp0_1*rxp0_1)))+(((-0.5724)*cj4*r01*rxp1_0*sj4*(cj5*cj5)))+(((4.0)*(cj5*cj5)*(rxp1_0*rxp1_0)))+(((0.5724)*cj4*r00*rxp0_0*sj4*(cj5*cj5)))+(((4.0)*(cj4*cj4)*(rxp2_0*rxp2_0)))+(((-4.0)*(cj4*cj4)*(cj5*cj5)*(rxp1_0*rxp1_0)))+(((4.0)*(rxp0_0*rxp0_0)))+(((0.02047761)*(cj4*cj4)*(cj5*cj5)*(r11*r11))))) < -0.00001)
continue;
CheckValue<IkReal> x2815=IKPowWithIntegerCheck(((((-1.0)*cj5*rxp1_0*sj4))+(((0.07155)*cj4*r00*sj5))+(((-1.0)*rxp0_0*sj4*sj5))+((cj4*rxp2_0))+(((0.07155)*cj4*cj5*r01))+(((0.07155)*r02*sj4))),-1);
if(!x2815.valid){
continue;
}
CheckValue<IkReal> x2816=IKPowWithIntegerCheck(((((-1.0)*cj5*rxp1_0*sj4))+(((0.07155)*cj4*r00*sj5))+(((-1.0)*rxp0_0*sj4*sj5))+((cj4*rxp2_0))+(((0.07155)*cj4*cj5*r01))+(((0.07155)*r02*sj4))),-1);
if(!x2816.valid){
continue;
}
j0array[1]=((2.0)*(atan(((((0.07155)*r12*sj4*(x2810.value)))+((cj4*rxp2_1*(x2811.value)))+(((0.07155)*cj4*cj5*r11*(x2812.value)))+(((-1.0)*cj5*rxp1_1*sj4*(x2813.value)))+(((-0.5)*(x2814.value)*(IKsqrt(((((0.02047761)*(r12*r12)))+(((-0.5724)*cj4*r11*rxp1_1*sj4*(cj5*cj5)))+(((0.5724)*cj5*r02*rxp1_0*(cj4*cj4)))+(((0.04095522)*cj4*r10*r12*sj4*sj5))+(((-4.0)*(cj4*cj4)*(rxp0_0*rxp0_0)))+(((4.0)*(cj5*cj5)*(rxp1_1*rxp1_1)))+(((4.0)*(rxp0_1*rxp0_1)))+(((0.04095522)*cj4*cj5*r11*r12*sj4))+(((0.02047761)*(cj4*cj4)*(r10*r10)))+(((-0.02047761)*(cj4*cj4)*(cj5*cj5)*(r10*r10)))+(((4.0)*(cj4*cj4)*(cj5*cj5)*(rxp0_0*rxp0_0)))+(((0.5724)*r00*rxp2_0*sj5*(cj4*cj4)))+(((0.5724)*cj4*r02*rxp2_0*sj4))+(((4.0)*(cj4*cj4)*(rxp2_1*rxp2_1)))+(((0.5724)*r12*rxp0_1*sj5*(cj4*cj4)))+(((0.5724)*cj5*r11*rxp2_1*(cj4*cj4)))+(((8.0)*cj5*rxp0_0*rxp1_0*sj5))+(((-0.5724)*r02*rxp0_0*sj5))+(((0.5724)*cj5*r12*rxp1_1*(cj4*cj4)))+(((-8.0)*cj4*cj5*rxp1_0*rxp2_0*sj4))+(((-4.0)*(cj5*cj5)*(rxp0_1*rxp0_1)))+(((0.5724)*cj5*r01*rxp2_0*(cj4*cj4)))+(((8.0)*cj5*rxp0_1*rxp1_1*sj5))+(((-4.0)*(cj4*cj4)*(cj5*cj5)*(rxp1_1*rxp1_1)))+(((-8.0)*cj4*rxp0_1*rxp2_1*sj4*sj5))+(((-0.5724)*cj5*r12*rxp1_1))+(((-8.0)*cj5*rxp0_0*rxp1_0*sj5*(cj4*cj4)))+(((-0.5724)*cj4*cj5*r01*rxp0_0*sj4*sj5))+(((0.04095522)*cj4*cj5*r01*r02*sj4))+(((0.02047761)*(cj4*cj4)*(cj5*cj5)*(r01*r01)))+(((0.5724)*cj4*r12*rxp2_1*sj4))+(((0.04095522)*cj5*r10*r11*sj5*(cj4*cj4)))+(((-8.0)*cj4*cj5*rxp1_1*rxp2_1*sj4))+(((-0.5724)*cj5*r02*rxp1_0))+(((-0.5724)*cj4*r10*rxp0_1*sj4))+(((0.5724)*r02*rxp0_0*sj5*(cj4*cj4)))+(((0.02047761)*(cj4*cj4)*(r00*r00)))+(((-8.0)*cj4*rxp0_0*rxp2_0*sj4*sj5))+(((0.02047761)*(r02*r02)))+(((-8.0)*cj5*rxp0_1*rxp1_1*sj5*(cj4*cj4)))+(((-0.5724)*r12*rxp0_1*sj5))+(((0.5724)*r10*rxp2_1*sj5*(cj4*cj4)))+(((-4.0)*(cj4*cj4)*(rxp0_1*rxp0_1)))+(((-0.5724)*cj4*r00*rxp0_0*sj4))+(((-0.02047761)*(cj4*cj4)*(r02*r02)))+(((-0.5724)*cj4*cj5*r10*rxp1_1*sj4*sj5))+(((-0.5724)*cj4*cj5*r00*rxp1_0*sj4*sj5))+(((-0.02047761)*(cj4*cj4)*(cj5*cj5)*(r00*r00)))+(((-4.0)*(cj5*cj5)*(rxp0_0*rxp0_0)))+(((0.04095522)*cj5*r00*r01*sj5*(cj4*cj4)))+(((0.04095522)*cj4*r00*r02*sj4*sj5))+(((0.5724)*cj4*r10*rxp0_1*sj4*(cj5*cj5)))+(((-0.5724)*cj4*cj5*r11*rxp0_1*sj4*sj5))+(((-0.02047761)*(cj4*cj4)*(r12*r12)))+(((4.0)*(cj4*cj4)*(cj5*cj5)*(rxp0_1*rxp0_1)))+(((-0.5724)*cj4*r01*rxp1_0*sj4*(cj5*cj5)))+(((4.0)*(cj5*cj5)*(rxp1_0*rxp1_0)))+(((0.5724)*cj4*r00*rxp0_0*sj4*(cj5*cj5)))+(((4.0)*(cj4*cj4)*(rxp2_0*rxp2_0)))+(((-4.0)*(cj4*cj4)*(cj5*cj5)*(rxp1_0*rxp1_0)))+(((4.0)*(rxp0_0*rxp0_0)))+(((0.02047761)*(cj4*cj4)*(cj5*cj5)*(r11*r11))))))))+(((0.07155)*cj4*r10*sj5*(x2815.value)))+(((-1.0)*rxp0_1*sj4*sj5*(x2816.value)))))));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

innerfn(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x2817=cj4*cj4;
IkReal x2818=cj5*cj5;
IkReal x2819=r10*r10;
IkReal x2820=r00*r00;
IkReal x2821=r11*r11;
IkReal x2822=r01*r01;
IkReal x2823=(r10*sj5);
IkReal x2824=((1.0)*sj4);
IkReal x2825=(cj5*r01);
IkReal x2826=(cj4*r02);
IkReal x2827=((4.0)*x2817);
IkReal x2828=((8.0)*cj5*r11);
IkReal x2829=(r00*sj4*sj5);
IkReal x2830=((4.0)*x2819);
IkReal x2831=((4.0)*x2820);
IkReal x2832=(cj4*r12*sj4);
IkReal x2833=((8.0)*r00*sj5);
IkReal x2834=(x2818*x2822);
IkReal x2835=(x2818*x2821);
CheckValue<IkReal> x2843=IKPowWithIntegerCheck(((((-1.0)*cj5*r11*x2824))+(((-1.0)*x2823*x2824))+((cj4*r12))),-1);
if(!x2843.valid){
continue;
}
IkReal x2836=x2843.value;
IkReal x2837=(sj4*x2836);
IkReal x2838=(x2825*x2837);
IkReal x2839=(x2829*x2836);
IkReal x2840=((1.0)*x2826*x2836);
IkReal x2841=(x2839+x2838);
if((((((-1.0)*x2820*x2827))+(((-8.0)*x2823*x2832))+((x2827*(r12*r12)))+((x2818*x2819*x2827))+(((-1.0)*x2817*x2823*x2828))+((x2825*x2833))+((x2818*x2820*x2827))+(((-8.0)*x2826*x2829))+((x2823*x2828))+(((4.0)*x2834))+(((4.0)*x2835))+(((-1.0)*x2817*x2825*x2833))+(((-1.0)*x2827*x2835))+(((-1.0)*x2827*x2834))+(((-1.0)*x2819*x2827))+(((-1.0)*x2828*x2832))+x2831+x2830+(((-8.0)*sj4*x2825*x2826))+((x2827*(r02*r02)))+(((-1.0)*x2818*x2831))+(((-1.0)*x2818*x2830)))) < -0.00001)
continue;
IkReal x2842=((0.5)*x2836*(IKsqrt(((((-1.0)*x2820*x2827))+(((-8.0)*x2823*x2832))+((x2827*(r12*r12)))+((x2818*x2819*x2827))+(((-1.0)*x2817*x2823*x2828))+((x2825*x2833))+((x2818*x2820*x2827))+(((-8.0)*x2826*x2829))+((x2823*x2828))+(((4.0)*x2834))+(((4.0)*x2835))+(((-1.0)*x2817*x2825*x2833))+(((-1.0)*x2827*x2835))+(((-1.0)*x2827*x2834))+(((-1.0)*x2819*x2827))+(((-1.0)*x2828*x2832))+x2831+x2830+(((-8.0)*sj4*x2825*x2826))+((x2827*(r02*r02)))+(((-1.0)*x2818*x2831))+(((-1.0)*x2818*x2830))))));
j0array[0]=((2.0)*(atan((x2842+x2841+(((-1.0)*x2840))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((-2.0)*(atan((x2842+x2840+(((-1.0)*x2841))))));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

innerfn(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x2844=cj5*cj5;
IkReal x2845=r11*r11;
IkReal x2846=r01*r01;
IkReal x2847=(cj5*r10);
IkReal x2848=((0.5724)*sj5);
IkReal x2849=((0.07155)*sj5);
IkReal x2850=(cj5*r00);
IkReal x2851=((0.04095522)*cj5*sj5);
IkReal x2852=((0.02047761)*x2844);
CheckValue<IkReal> x2858=IKPowWithIntegerCheck(((((-1.0)*r11*x2849))+py+(((0.07155)*x2847))),-1);
if(!x2858.valid){
continue;
}
IkReal x2853=x2858.value;
IkReal x2854=(px*x2853);
IkReal x2855=((0.07155)*x2850*x2853);
CheckValue<IkReal> x2859=IKPowWithIntegerCheck(((((-0.07155)*r11*sj5))+py+(((0.07155)*x2847))),-1);
if(!x2859.valid){
continue;
}
IkReal x2856=(r01*x2849*(x2859.value));
if((((((-0.04095522)*r11*sj5*x2847))+(((0.5724)*px*x2850))+(((-1.0)*px*r01*x2848))+(((4.0)*(py*py)))+(((-1.0)*x2845*x2852))+((x2852*(r10*r10)))+(((-0.04095522)*r01*sj5*x2850))+(((0.02047761)*x2846))+(((0.02047761)*x2845))+(((4.0)*(px*px)))+((x2852*(r00*r00)))+(((-1.0)*py*r11*x2848))+(((0.5724)*py*x2847))+(((-1.0)*x2846*x2852)))) < -0.00001)
continue;
IkReal x2857=((0.5)*x2853*(IKsqrt(((((-0.04095522)*r11*sj5*x2847))+(((0.5724)*px*x2850))+(((-1.0)*px*r01*x2848))+(((4.0)*(py*py)))+(((-1.0)*x2845*x2852))+((x2852*(r10*r10)))+(((-0.04095522)*r01*sj5*x2850))+(((0.02047761)*x2846))+(((0.02047761)*x2845))+(((4.0)*(px*px)))+((x2852*(r00*r00)))+(((-1.0)*py*r11*x2848))+(((0.5724)*py*x2847))+(((-1.0)*x2846*x2852))))));
j0array[0]=((-2.0)*(atan(((((1.0)*x2854))+x2855+(((-1.0)*x2856))+(((-1.0)*x2857))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((-2.0)*(atan((x2855+x2854+x2857+(((-1.0)*x2856))))));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

innerfn(solutions);
}
}

}

}
}
}

}

}
    }
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots7(IkReal rawcoeffs[7+1], IkReal rawroots[7], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots6(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[7];
    const int maxsteps = 110;
    for(int i = 0; i < 7; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[7];
    IkReal err[7];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 7; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 7; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 7; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 7; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[7] = {false};
    for(int i = 0; i < 7; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 7; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots8(IkReal rawcoeffs[8+1], IkReal rawroots[8], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots7(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[8];
    const int maxsteps = 110;
    for(int i = 0; i < 8; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[8];
    IkReal err[8];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 8; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 8; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 8; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 8; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[8] = {false};
    for(int i = 0; i < 8; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 8; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j3eval[3];
IkReal x191=((1.0)*sj5);
IkReal x192=(r20*sj0);
IkReal x193=((1.0)*cj5);
IkReal x194=(r21*sj0);
IkReal x195=((((-1.0)*r11*sj4*x193))+(((-1.0)*r10*sj4*x191))+((cj4*r12)));
j3eval[0]=x195;
j3eval[1]=((IKabs(((((-1.0)*x192*x193))+((sj5*x194)))))+(IKabs(((((-1.0)*cj4*x191*x192))+(((-1.0)*cj4*x193*x194))+(((-1.0)*r22*sj0*sj4))))));
j3eval[2]=IKsign(x195);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
IkReal x196=(cj0*r21);
IkReal x197=((1.0)*cj5);
IkReal x198=((1.0)*sj4);
IkReal x199=(cj0*r20);
IkReal x200=((((-1.0)*r00*sj5*x198))+(((-1.0)*r01*sj4*x197))+((cj4*r02)));
j3eval[0]=x200;
j3eval[1]=IKsign(x200);
j3eval[2]=((IKabs(((((-1.0)*cj4*x196*x197))+(((-1.0)*cj0*r22*x198))+(((-1.0)*cj4*sj5*x199)))))+(IKabs(((((-1.0)*x197*x199))+((sj5*x196))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
IkReal x201=(((cj5*r21*sj4))+(((-1.0)*cj4*r22))+((r20*sj4*sj5)));
j3eval[0]=x201;
j3eval[1]=IKsign(x201);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x202=((1.0)*r10);
IkReal x203=((1.0)*cj4);
IkReal x204=((((-1.0)*r22*x203))+((cj5*r21*sj4))+((r20*sj4*sj5)));
j3eval[0]=x204;
j3eval[1]=IKsign(x204);
j3eval[2]=((IKabs((((r11*sj5))+(((-1.0)*cj5*x202)))))+(IKabs(((((-1.0)*cj4*sj5*x202))+(((-1.0)*cj5*r11*x203))+(((-1.0)*r12*sj4))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x205=((1.0)*sj5);
IkReal x206=((1.0)*cj5);
IkReal x207=((((-1.0)*r11*sj4*x206))+(((-1.0)*r10*sj4*x205))+((cj4*r12)));
j3eval[0]=x207;
j3eval[1]=IKsign(x207);
j3eval[2]=((IKabs((((r21*sj5))+(((-1.0)*r20*x206)))))+(IKabs(((((-1.0)*cj4*r20*x205))+(((-1.0)*cj4*r21*x206))+(((-1.0)*r22*sj4))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x208=cj5*cj5;
IkReal x209=cj4*cj4;
IkReal x210=r00*r00;
IkReal x211=r01*r01;
IkReal x212=r02*r02;
IkReal x213=(r00*sj5);
IkReal x214=((2.0)*cj5*r01);
IkReal x215=(cj4*r02*sj4);
IkReal x216=((1.0)*x209);
IkReal x217=(x208*x210);
IkReal x218=(x208*x211);
IkReal x219=(((x213*x214))+(((-2.0)*x213*x215))+((x209*x212))+((x209*x217))+x218+(((-1.0)*x210*x216))+(((-1.0)*x217))+(((-1.0)*x211))+(((-1.0)*x212))+(((-1.0)*x214*x215))+(((-1.0)*x216*x218))+(((-1.0)*x209*x213*x214)));
j3eval[0]=x219;
j3eval[1]=IKsign(x219);
j3eval[2]=((IKabs((((cj4*x213))+((r02*sj4))+((cj4*cj5*r01)))))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x220=cj5*cj5;
IkReal x221=cj4*cj4;
IkReal x222=r00*r00;
IkReal x223=r01*r01;
IkReal x224=r02*r02;
IkReal x225=(r00*sj5);
IkReal x226=((2.0)*cj5*r01);
IkReal x227=(cj4*r02*sj4);
IkReal x228=((1.0)*x221);
IkReal x229=(x220*x222);
IkReal x230=(x220*x223);
CheckValue<IkReal> x231=IKPowWithIntegerCheck(IKsign((((x225*x226))+(((-1.0)*x222*x228))+(((-1.0)*x221*x225*x226))+x230+((x221*x229))+((x221*x224))+(((-2.0)*x225*x227))+(((-1.0)*x226*x227))+(((-1.0)*x228*x230))+(((-1.0)*x223))+(((-1.0)*x229))+(((-1.0)*x224)))),-1);
if(!x231.valid){
continue;
}
CheckValue<IkReal> x232 = IKatan2WithCheck(IkReal((((r02*sj4))+((cj4*cj5*r01))+((cj4*x225)))),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x232.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x231.value)))+(x232.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x233=IKsin(j3);
IkReal x234=IKcos(j3);
IkReal x235=(cj4*r00);
IkReal x236=(sj5*x233);
IkReal x237=(sj4*x233);
IkReal x238=(sj5*x234);
IkReal x239=(cj4*cj5*x233);
IkReal x240=((1.0)*cj5*x234);
evalcond[0]=(((cj4*r20*x236))+((r21*x238))+((r21*x239))+(((-1.0)*r20*x240))+((r22*x237)));
evalcond[1]=(((r11*x239))+((r11*x238))+((cj4*r10*x236))+(((-1.0)*r10*x240))+((r12*x237)));
evalcond[2]=(((cj5*r00*x233))+(((-1.0)*r01*x236))+((x235*x238))+((cj4*cj5*r01*x234))+((r02*sj4*x234)));
evalcond[3]=((1.0)+((r02*x237))+((x235*x236))+((r01*x238))+((r01*x239))+(((-1.0)*r00*x240)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x241=((0.76043125175021)*sj4);
IkReal x242=((0.200364043685242)*sj5);
IkReal x243=((0.200364043685242)*cj5);
IkReal x244=((0.76043125175021)*cj4);
if( IKabs(((((2.80033604032484)*py))+(((-1.0)*r11*x242))+(((-1.0)*r12*x244))+((cj5*r11*x241))+((r10*sj5*x241))+((r10*x243)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.80033604032484)*pz))+((r20*sj5*x241))+((cj5*r21*x241))+(((-1.0)*r22*x244))+(((-1.0)*r21*x242))+((r20*x243)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.80033604032484)*py))+(((-1.0)*r11*x242))+(((-1.0)*r12*x244))+((cj5*r11*x241))+((r10*sj5*x241))+((r10*x243))))+IKsqr(((((2.80033604032484)*pz))+((r20*sj5*x241))+((cj5*r21*x241))+(((-1.0)*r22*x244))+(((-1.0)*r21*x242))+((r20*x243))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((2.80033604032484)*py))+(((-1.0)*r11*x242))+(((-1.0)*r12*x244))+((cj5*r11*x241))+((r10*sj5*x241))+((r10*x243))), ((((2.80033604032484)*pz))+((r20*sj5*x241))+((cj5*r21*x241))+(((-1.0)*r22*x244))+(((-1.0)*r21*x242))+((r20*x243))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x245=((1.0)*pz);
IkReal x246=((0.27155)*sj5);
IkReal x247=((0.07155)*cj5);
IkReal x248=(cj3*cj4);
IkReal x249=((0.27155)*sj4);
IkReal x250=((0.27155)*cj4);
IkReal x251=((0.07155)*sj5);
IkReal x252=(cj5*r21);
IkReal x253=(r10*x247);
IkReal x254=(r11*x251);
IkReal x255=((0.3571)*(IKsin(j1)));
IkReal x256=(r21*x251);
IkReal x257=((0.3571)*(IKcos(j1)));
IkReal x258=(r20*x247);
IkReal x259=((0.27155)*cj5*r11);
IkReal x260=((0.27155)*cj5*sj3);
IkReal x261=(x258+x245);
IkReal x262=(x254+x255);
IkReal x263=(x256+x257);
evalcond[0]=(x263+(((-1.0)*x249*x252))+((r22*x250))+(((-1.0)*x261))+(((-1.0)*r20*sj4*x246)));
evalcond[1]=((((-1.0)*r10*sj4*x246))+((r12*x250))+(((-1.0)*cj5*r11*x249))+(((-1.0)*py))+x262+(((-1.0)*x253)));
evalcond[2]=((((0.27155)*x248*x252))+(((-1.0)*r21*sj3*x246))+((r20*x246*x248))+x253+py+((cj3*r22*x249))+(((-1.0)*x262))+((r20*x260)));
evalcond[3]=(((x248*x259))+((r10*x246*x248))+x263+(((-1.0)*r11*sj3*x246))+((r10*x260))+(((-1.0)*x261))+((cj3*r12*x249)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x264=(cj1*cj4);
IkReal x265=((1.0)*r22);
IkReal x266=(cj4*sj1);
IkReal x267=(sj4*sj5);
IkReal x268=(cj1*cj5*sj4);
IkReal x269=(cj5*sj1*sj4);
if( IKabs(((((-1.0)*r12*x266))+((cj1*r20*x267))+((r10*sj1*x267))+((r21*x268))+((r11*x269))+(((-1.0)*x264*x265)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj1*r10*x267))+(((-1.0)*r11*x268))+((r20*sj1*x267))+((r21*x269))+((r12*x264))+(((-1.0)*x265*x266)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r12*x266))+((cj1*r20*x267))+((r10*sj1*x267))+((r21*x268))+((r11*x269))+(((-1.0)*x264*x265))))+IKsqr(((((-1.0)*cj1*r10*x267))+(((-1.0)*r11*x268))+((r20*sj1*x267))+((r21*x269))+((r12*x264))+(((-1.0)*x265*x266))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r12*x266))+((cj1*r20*x267))+((r10*sj1*x267))+((r21*x268))+((r11*x269))+(((-1.0)*x264*x265))), ((((-1.0)*cj1*r10*x267))+(((-1.0)*r11*x268))+((r20*sj1*x267))+((r21*x269))+((r12*x264))+(((-1.0)*x265*x266))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x270=IKcos(j2);
IkReal x271=IKsin(j2);
IkReal x272=((1.0)*cj4);
IkReal x273=((0.07155)*cj5);
IkReal x274=(cj5*sj4);
IkReal x275=(cj3*cj4);
IkReal x276=(r20*sj5);
IkReal x277=(r10*sj5);
IkReal x278=((0.07155)*sj5);
IkReal x279=(cj5*sj3);
IkReal x280=(cj3*sj4);
IkReal x281=(cj1*x270);
IkReal x282=((1.0)*sj3*sj5);
IkReal x283=(cj1*x271);
IkReal x284=(sj1*x270);
IkReal x285=(sj1*x271);
IkReal x286=((1.0)*x285);
evalcond[0]=((((-1.0)*r12*x272))+x281+(((-1.0)*x286))+((r11*x274))+((sj4*x277)));
evalcond[1]=(((r21*x274))+(((-1.0)*x284))+(((-1.0)*x283))+(((-1.0)*r22*x272))+((sj4*x276)));
evalcond[2]=((((0.3571)*cj1))+(((-0.27155)*x284))+(((-0.27155)*x283))+((r21*x278))+(((-1.0)*pz))+(((-1.0)*r20*x273)));
evalcond[3]=((((0.27155)*x281))+(((0.3571)*sj1))+(((-0.27155)*x285))+(((-1.0)*r10*x273))+(((-1.0)*py))+((r11*x278)));
evalcond[4]=(((x275*x277))+((r12*x280))+(((-1.0)*r11*x282))+x284+x283+((cj5*r11*x275))+((r10*x279)));
evalcond[5]=(((x275*x276))+(((-1.0)*r21*x282))+((r22*x280))+x281+((cj5*r21*x275))+(((-1.0)*x286))+((r20*x279)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x287=((1.0)*sj5);
IkReal x288=((1.0)*cj5);
CheckValue<IkReal> x289=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*sj4*x288))+(((-1.0)*r10*sj4*x287))+((cj4*r12)))),-1);
if(!x289.valid){
continue;
}
CheckValue<IkReal> x290 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x288)))),IkReal(((((-1.0)*cj4*r21*x288))+(((-1.0)*r22*sj4))+(((-1.0)*cj4*r20*x287)))),IKFAST_ATAN2_MAGTHRESH);
if(!x290.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x289.value)))+(x290.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x291=IKsin(j3);
IkReal x292=IKcos(j3);
IkReal x293=(cj4*r00);
IkReal x294=(sj5*x291);
IkReal x295=(sj4*x291);
IkReal x296=(sj5*x292);
IkReal x297=(cj4*cj5*x291);
IkReal x298=((1.0)*cj5*x292);
evalcond[0]=(((cj4*r20*x294))+(((-1.0)*r20*x298))+((r21*x296))+((r21*x297))+((r22*x295)));
evalcond[1]=(((r12*x295))+((cj4*r10*x294))+(((-1.0)*r10*x298))+((r11*x297))+((r11*x296)));
evalcond[2]=(((r02*sj4*x292))+(((-1.0)*r01*x294))+((cj4*cj5*r01*x292))+((x293*x296))+((cj5*r00*x291)));
evalcond[3]=((1.0)+(((-1.0)*r00*x298))+((r01*x296))+((r01*x297))+((r02*x295))+((x293*x294)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x299=((0.76043125175021)*sj4);
IkReal x300=((0.200364043685242)*sj5);
IkReal x301=((0.200364043685242)*cj5);
IkReal x302=((0.76043125175021)*cj4);
if( IKabs(((((2.80033604032484)*py))+((cj5*r11*x299))+((r10*x301))+(((-1.0)*r11*x300))+((r10*sj5*x299))+(((-1.0)*r12*x302)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r22*x302))+(((2.80033604032484)*pz))+(((-1.0)*r21*x300))+((r20*sj5*x299))+((r20*x301))+((cj5*r21*x299)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.80033604032484)*py))+((cj5*r11*x299))+((r10*x301))+(((-1.0)*r11*x300))+((r10*sj5*x299))+(((-1.0)*r12*x302))))+IKsqr(((((-1.0)*r22*x302))+(((2.80033604032484)*pz))+(((-1.0)*r21*x300))+((r20*sj5*x299))+((r20*x301))+((cj5*r21*x299))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((2.80033604032484)*py))+((cj5*r11*x299))+((r10*x301))+(((-1.0)*r11*x300))+((r10*sj5*x299))+(((-1.0)*r12*x302))), ((((-1.0)*r22*x302))+(((2.80033604032484)*pz))+(((-1.0)*r21*x300))+((r20*sj5*x299))+((r20*x301))+((cj5*r21*x299))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x303=((1.0)*pz);
IkReal x304=((0.27155)*sj5);
IkReal x305=((0.07155)*cj5);
IkReal x306=(cj3*cj4);
IkReal x307=((0.27155)*sj4);
IkReal x308=((0.27155)*cj4);
IkReal x309=((0.07155)*sj5);
IkReal x310=(cj5*r21);
IkReal x311=(r10*x305);
IkReal x312=(r11*x309);
IkReal x313=((0.3571)*(IKsin(j1)));
IkReal x314=(r21*x309);
IkReal x315=((0.3571)*(IKcos(j1)));
IkReal x316=(r20*x305);
IkReal x317=((0.27155)*cj5*r11);
IkReal x318=((0.27155)*cj5*sj3);
IkReal x319=(x303+x316);
IkReal x320=(x313+x312);
IkReal x321=(x315+x314);
evalcond[0]=(((r22*x308))+x321+(((-1.0)*r20*sj4*x304))+(((-1.0)*x319))+(((-1.0)*x307*x310)));
evalcond[1]=((((-1.0)*r10*sj4*x304))+(((-1.0)*cj5*r11*x307))+x320+(((-1.0)*py))+(((-1.0)*x311))+((r12*x308)));
evalcond[2]=((((-1.0)*r21*sj3*x304))+((r20*x304*x306))+((cj3*r22*x307))+((r20*x318))+(((-1.0)*x320))+x311+py+(((0.27155)*x306*x310)));
evalcond[3]=((((-1.0)*r11*sj3*x304))+((r10*x304*x306))+x321+(((-1.0)*x319))+((x306*x317))+((r10*x318))+((cj3*r12*x307)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x322=(cj1*cj4);
IkReal x323=((1.0)*r22);
IkReal x324=(cj4*sj1);
IkReal x325=(sj4*sj5);
IkReal x326=(cj1*cj5*sj4);
IkReal x327=(cj5*sj1*sj4);
if( IKabs((((r21*x326))+((cj1*r20*x325))+((r11*x327))+(((-1.0)*r12*x324))+(((-1.0)*x322*x323))+((r10*sj1*x325)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r20*sj1*x325))+((r21*x327))+((r12*x322))+(((-1.0)*r11*x326))+(((-1.0)*x323*x324))+(((-1.0)*cj1*r10*x325)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r21*x326))+((cj1*r20*x325))+((r11*x327))+(((-1.0)*r12*x324))+(((-1.0)*x322*x323))+((r10*sj1*x325))))+IKsqr((((r20*sj1*x325))+((r21*x327))+((r12*x322))+(((-1.0)*r11*x326))+(((-1.0)*x323*x324))+(((-1.0)*cj1*r10*x325))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r21*x326))+((cj1*r20*x325))+((r11*x327))+(((-1.0)*r12*x324))+(((-1.0)*x322*x323))+((r10*sj1*x325))), (((r20*sj1*x325))+((r21*x327))+((r12*x322))+(((-1.0)*r11*x326))+(((-1.0)*x323*x324))+(((-1.0)*cj1*r10*x325))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x328=IKcos(j2);
IkReal x329=IKsin(j2);
IkReal x330=((1.0)*cj4);
IkReal x331=((0.07155)*cj5);
IkReal x332=(cj5*sj4);
IkReal x333=(cj3*cj4);
IkReal x334=(r20*sj5);
IkReal x335=(r10*sj5);
IkReal x336=((0.07155)*sj5);
IkReal x337=(cj5*sj3);
IkReal x338=(cj3*sj4);
IkReal x339=(cj1*x328);
IkReal x340=((1.0)*sj3*sj5);
IkReal x341=(cj1*x329);
IkReal x342=(sj1*x328);
IkReal x343=(sj1*x329);
IkReal x344=((1.0)*x343);
evalcond[0]=(((r11*x332))+x339+((sj4*x335))+(((-1.0)*r12*x330))+(((-1.0)*x344)));
evalcond[1]=(((r21*x332))+((sj4*x334))+(((-1.0)*r22*x330))+(((-1.0)*x341))+(((-1.0)*x342)));
evalcond[2]=(((r21*x336))+(((0.3571)*cj1))+(((-1.0)*r20*x331))+(((-1.0)*pz))+(((-0.27155)*x342))+(((-0.27155)*x341)));
evalcond[3]=(((r11*x336))+(((0.3571)*sj1))+(((0.27155)*x339))+(((-1.0)*py))+(((-1.0)*r10*x331))+(((-0.27155)*x343)));
evalcond[4]=((((-1.0)*r11*x340))+((r12*x338))+x342+x341+((cj5*r11*x333))+((x333*x335))+((r10*x337)));
evalcond[5]=(((r22*x338))+((cj5*r21*x333))+x339+((r20*x337))+((x333*x334))+(((-1.0)*x344))+(((-1.0)*r21*x340)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x345=((1.0)*cj5);
IkReal x346=((1.0)*cj4);
CheckValue<IkReal> x347 = IKatan2WithCheck(IkReal((((r11*sj5))+(((-1.0)*r10*x345)))),IkReal(((((-1.0)*r10*sj5*x346))+(((-1.0)*cj4*r11*x345))+(((-1.0)*r12*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x347.valid){
continue;
}
CheckValue<IkReal> x348=IKPowWithIntegerCheck(IKsign(((((-1.0)*r22*x346))+((cj5*r21*sj4))+((r20*sj4*sj5)))),-1);
if(!x348.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x347.value)+(((1.5707963267949)*(x348.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x349=IKsin(j3);
IkReal x350=IKcos(j3);
IkReal x351=(cj4*r00);
IkReal x352=(sj5*x349);
IkReal x353=(sj4*x349);
IkReal x354=(sj5*x350);
IkReal x355=(cj4*cj5*x349);
IkReal x356=((1.0)*cj5*x350);
evalcond[0]=(((r21*x355))+((r21*x354))+((cj4*r20*x352))+((r22*x353))+(((-1.0)*r20*x356)));
evalcond[1]=(((r12*x353))+((r11*x354))+((r11*x355))+((cj4*r10*x352))+(((-1.0)*r10*x356)));
evalcond[2]=((((-1.0)*r01*x352))+((cj4*cj5*r01*x350))+((x351*x354))+((r02*sj4*x350))+((cj5*r00*x349)));
evalcond[3]=((1.0)+((r01*x355))+((r01*x354))+((x351*x352))+(((-1.0)*r00*x356))+((r02*x353)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x357=((0.76043125175021)*sj4);
IkReal x358=((0.200364043685242)*sj5);
IkReal x359=((0.200364043685242)*cj5);
IkReal x360=((0.76043125175021)*cj4);
if( IKabs(((((-1.0)*r11*x358))+(((2.80033604032484)*py))+((cj5*r11*x357))+((r10*x359))+(((-1.0)*r12*x360))+((r10*sj5*x357)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.80033604032484)*pz))+((r20*sj5*x357))+((cj5*r21*x357))+(((-1.0)*r21*x358))+(((-1.0)*r22*x360))+((r20*x359)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x358))+(((2.80033604032484)*py))+((cj5*r11*x357))+((r10*x359))+(((-1.0)*r12*x360))+((r10*sj5*x357))))+IKsqr(((((2.80033604032484)*pz))+((r20*sj5*x357))+((cj5*r21*x357))+(((-1.0)*r21*x358))+(((-1.0)*r22*x360))+((r20*x359))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*r11*x358))+(((2.80033604032484)*py))+((cj5*r11*x357))+((r10*x359))+(((-1.0)*r12*x360))+((r10*sj5*x357))), ((((2.80033604032484)*pz))+((r20*sj5*x357))+((cj5*r21*x357))+(((-1.0)*r21*x358))+(((-1.0)*r22*x360))+((r20*x359))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x361=((1.0)*pz);
IkReal x362=((0.27155)*sj5);
IkReal x363=((0.07155)*cj5);
IkReal x364=(cj3*cj4);
IkReal x365=((0.27155)*sj4);
IkReal x366=((0.27155)*cj4);
IkReal x367=((0.07155)*sj5);
IkReal x368=(cj5*r21);
IkReal x369=(r10*x363);
IkReal x370=(r11*x367);
IkReal x371=((0.3571)*(IKsin(j1)));
IkReal x372=(r21*x367);
IkReal x373=((0.3571)*(IKcos(j1)));
IkReal x374=(r20*x363);
IkReal x375=((0.27155)*cj5*r11);
IkReal x376=((0.27155)*cj5*sj3);
IkReal x377=(x374+x361);
IkReal x378=(x371+x370);
IkReal x379=(x373+x372);
evalcond[0]=((((-1.0)*x377))+(((-1.0)*r20*sj4*x362))+x379+((r22*x366))+(((-1.0)*x365*x368)));
evalcond[1]=((((-1.0)*x369))+x378+((r12*x366))+(((-1.0)*py))+(((-1.0)*cj5*r11*x365))+(((-1.0)*r10*sj4*x362)));
evalcond[2]=(((r20*x376))+(((-1.0)*r21*sj3*x362))+(((-1.0)*x378))+(((0.27155)*x364*x368))+x369+py+((r20*x362*x364))+((cj3*r22*x365)));
evalcond[3]=(((cj3*r12*x365))+((x364*x375))+(((-1.0)*x377))+x379+(((-1.0)*r11*sj3*x362))+((r10*x362*x364))+((r10*x376)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x380=(cj1*cj4);
IkReal x381=((1.0)*r22);
IkReal x382=(cj4*sj1);
IkReal x383=(sj4*sj5);
IkReal x384=(cj1*cj5*sj4);
IkReal x385=(cj5*sj1*sj4);
if( IKabs((((cj1*r20*x383))+((r11*x385))+((r10*sj1*x383))+(((-1.0)*x380*x381))+((r21*x384))+(((-1.0)*r12*x382)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x381*x382))+((r12*x380))+((r21*x385))+(((-1.0)*cj1*r10*x383))+(((-1.0)*r11*x384))+((r20*sj1*x383)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*r20*x383))+((r11*x385))+((r10*sj1*x383))+(((-1.0)*x380*x381))+((r21*x384))+(((-1.0)*r12*x382))))+IKsqr(((((-1.0)*x381*x382))+((r12*x380))+((r21*x385))+(((-1.0)*cj1*r10*x383))+(((-1.0)*r11*x384))+((r20*sj1*x383))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*r20*x383))+((r11*x385))+((r10*sj1*x383))+(((-1.0)*x380*x381))+((r21*x384))+(((-1.0)*r12*x382))), ((((-1.0)*x381*x382))+((r12*x380))+((r21*x385))+(((-1.0)*cj1*r10*x383))+(((-1.0)*r11*x384))+((r20*sj1*x383))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x386=IKcos(j2);
IkReal x387=IKsin(j2);
IkReal x388=((1.0)*cj4);
IkReal x389=((0.07155)*cj5);
IkReal x390=(cj5*sj4);
IkReal x391=(cj3*cj4);
IkReal x392=(r20*sj5);
IkReal x393=(r10*sj5);
IkReal x394=((0.07155)*sj5);
IkReal x395=(cj5*sj3);
IkReal x396=(cj3*sj4);
IkReal x397=(cj1*x386);
IkReal x398=((1.0)*sj3*sj5);
IkReal x399=(cj1*x387);
IkReal x400=(sj1*x386);
IkReal x401=(sj1*x387);
IkReal x402=((1.0)*x401);
evalcond[0]=(x397+((r11*x390))+(((-1.0)*r12*x388))+(((-1.0)*x402))+((sj4*x393)));
evalcond[1]=((((-1.0)*x399))+(((-1.0)*r22*x388))+((r21*x390))+(((-1.0)*x400))+((sj4*x392)));
evalcond[2]=((((0.3571)*cj1))+(((-0.27155)*x399))+(((-1.0)*pz))+(((-1.0)*r20*x389))+(((-0.27155)*x400))+((r21*x394)));
evalcond[3]=((((0.3571)*sj1))+(((-1.0)*r10*x389))+(((-1.0)*py))+((r11*x394))+(((0.27155)*x397))+(((-0.27155)*x401)));
evalcond[4]=(((r10*x395))+(((-1.0)*r11*x398))+x399+((x391*x393))+x400+((cj5*r11*x391))+((r12*x396)));
evalcond[5]=(((r20*x395))+((cj5*r21*x391))+(((-1.0)*r21*x398))+x397+((x391*x392))+((r22*x396))+(((-1.0)*x402)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x403=((1.0)*r20);
IkReal x404=((1.0)*cj4);
IkReal x405=(((cj5*r11*sj4))+((r10*sj4*sj5))+(((-1.0)*r12*x404)));
j3eval[0]=x405;
j3eval[1]=IKsign(x405);
j3eval[2]=((IKabs(((((-1.0)*cj5*r21*x404))+(((-1.0)*cj4*sj5*x403))+(((-1.0)*r22*sj4)))))+(IKabs((((r21*sj5))+(((-1.0)*cj5*x403))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x406=((1.0)*cj5);
IkReal x407=((1.0)*sj4);
IkReal x408=(((cj4*r22))+(((-1.0)*r21*sj4*x406))+(((-1.0)*r20*sj5*x407)));
j3eval[0]=x408;
j3eval[1]=IKsign(x408);
j3eval[2]=((IKabs(((((-1.0)*r10*x406))+((r11*sj5)))))+(IKabs(((((-1.0)*cj4*r11*x406))+(((-1.0)*cj4*r10*sj5))+(((-1.0)*r12*x407))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x409=cj4*cj4;
IkReal x410=r00*r00;
IkReal x411=cj5*cj5;
IkReal x412=r01*r01;
IkReal x413=r02*r02;
IkReal x414=(r00*sj5);
IkReal x415=((2.0)*cj5*r01);
IkReal x416=(cj4*r02*sj4);
IkReal x417=((1.0)*x411);
IkReal x418=(x409*x410);
IkReal x419=((((-1.0)*x417*x418))+(((-1.0)*x412*x417))+((x409*x414*x415))+((x415*x416))+((x410*x411))+(((-1.0)*x409*x413))+((x409*x411*x412))+x412+x413+x418+(((2.0)*x414*x416))+(((-1.0)*x414*x415)));
j3eval[0]=x419;
j3eval[1]=IKsign(x419);
j3eval[2]=((IKabs((((cj4*x414))+((r02*sj4))+((cj4*cj5*r01)))))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x420=cj4*cj4;
IkReal x421=r00*r00;
IkReal x422=cj5*cj5;
IkReal x423=r01*r01;
IkReal x424=r02*r02;
IkReal x425=(r00*sj5);
IkReal x426=((2.0)*cj5*r01);
IkReal x427=(cj4*r02*sj4);
IkReal x428=((1.0)*x422);
IkReal x429=(x420*x421);
CheckValue<IkReal> x430=IKPowWithIntegerCheck(IKsign((((x426*x427))+((x420*x422*x423))+(((-1.0)*x420*x424))+x429+x424+x423+(((-1.0)*x425*x426))+(((-1.0)*x428*x429))+((x420*x425*x426))+(((2.0)*x425*x427))+(((-1.0)*x423*x428))+((x421*x422)))),-1);
if(!x430.valid){
continue;
}
CheckValue<IkReal> x431 = IKatan2WithCheck(IkReal((((cj4*x425))+((r02*sj4))+((cj4*cj5*r01)))),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x431.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x430.value)))+(x431.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x432=IKsin(j3);
IkReal x433=IKcos(j3);
IkReal x434=(cj4*r00);
IkReal x435=(sj5*x432);
IkReal x436=(sj4*x432);
IkReal x437=(sj5*x433);
IkReal x438=(cj4*cj5*x432);
IkReal x439=((1.0)*cj5*x433);
evalcond[0]=(((cj4*r20*x435))+((r21*x437))+((r21*x438))+((r22*x436))+(((-1.0)*r20*x439)));
evalcond[1]=(((r12*x436))+((cj4*r10*x435))+(((-1.0)*r10*x439))+((r11*x437))+((r11*x438)));
evalcond[2]=(((x434*x437))+(((-1.0)*r01*x435))+((r02*sj4*x433))+((cj4*cj5*r01*x433))+((cj5*r00*x432)));
evalcond[3]=((-1.0)+((x434*x435))+((r02*x436))+(((-1.0)*r00*x439))+((r01*x438))+((r01*x437)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x440=((0.76043125175021)*sj4);
IkReal x441=((0.200364043685242)*sj5);
IkReal x442=((0.200364043685242)*cj5);
IkReal x443=((0.76043125175021)*cj4);
if( IKabs(((((-2.80033604032484)*py))+(((-1.0)*cj5*r11*x440))+(((-1.0)*r10*sj5*x440))+((r11*x441))+((r12*x443))+(((-1.0)*r10*x442)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.80033604032484)*pz))+((r20*sj5*x440))+(((-1.0)*r21*x441))+(((-1.0)*r22*x443))+((r20*x442))+((cj5*r21*x440)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.80033604032484)*py))+(((-1.0)*cj5*r11*x440))+(((-1.0)*r10*sj5*x440))+((r11*x441))+((r12*x443))+(((-1.0)*r10*x442))))+IKsqr(((((2.80033604032484)*pz))+((r20*sj5*x440))+(((-1.0)*r21*x441))+(((-1.0)*r22*x443))+((r20*x442))+((cj5*r21*x440))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-2.80033604032484)*py))+(((-1.0)*cj5*r11*x440))+(((-1.0)*r10*sj5*x440))+((r11*x441))+((r12*x443))+(((-1.0)*r10*x442))), ((((2.80033604032484)*pz))+((r20*sj5*x440))+(((-1.0)*r21*x441))+(((-1.0)*r22*x443))+((r20*x442))+((cj5*r21*x440))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x444=((0.27155)*sj5);
IkReal x445=((0.07155)*cj5);
IkReal x446=(cj3*cj4);
IkReal x447=((0.27155)*sj4);
IkReal x448=((0.27155)*cj4);
IkReal x449=((0.07155)*sj5);
IkReal x450=(cj5*r21);
IkReal x451=(r10*x445);
IkReal x452=((0.3571)*(IKsin(j1)));
IkReal x453=(r11*x449);
IkReal x454=(r20*x445);
IkReal x455=(r21*x449);
IkReal x456=((0.3571)*(IKcos(j1)));
IkReal x457=((0.27155)*cj5*r11);
IkReal x458=((0.27155)*cj5*sj3);
IkReal x459=(x456+x455);
IkReal x460=(x452+x451+py);
evalcond[0]=(((cj5*r11*x447))+(((-1.0)*r12*x448))+((r10*sj4*x444))+(((-1.0)*x453))+x460);
evalcond[1]=((((-1.0)*x447*x450))+(((-1.0)*x454))+(((-1.0)*pz))+x459+((r22*x448))+(((-1.0)*r20*sj4*x444)));
evalcond[2]=((((-0.27155)*x446*x450))+(((-1.0)*cj3*r22*x447))+(((-1.0)*x453))+x460+((r21*sj3*x444))+(((-1.0)*r20*x458))+(((-1.0)*r20*x444*x446)));
evalcond[3]=((((-1.0)*r11*sj3*x444))+(((-1.0)*x459))+((x446*x457))+((cj3*r12*x447))+x454+pz+((r10*x444*x446))+((r10*x458)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x461=(cj4*sj1);
IkReal x462=(cj5*sj4);
IkReal x463=((1.0)*sj1);
IkReal x464=(sj4*sj5);
IkReal x465=((1.0)*cj1*cj4);
if( IKabs((((cj1*r20*x464))+(((-1.0)*r11*x462*x463))+(((-1.0)*r10*x463*x464))+((r12*x461))+(((-1.0)*r22*x465))+((cj1*r21*x462)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r22*x461))+((r20*sj1*x464))+((cj1*r10*x464))+((cj1*r11*x462))+(((-1.0)*r12*x465))+((r21*sj1*x462)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*r20*x464))+(((-1.0)*r11*x462*x463))+(((-1.0)*r10*x463*x464))+((r12*x461))+(((-1.0)*r22*x465))+((cj1*r21*x462))))+IKsqr(((((-1.0)*r22*x461))+((r20*sj1*x464))+((cj1*r10*x464))+((cj1*r11*x462))+(((-1.0)*r12*x465))+((r21*sj1*x462))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*r20*x464))+(((-1.0)*r11*x462*x463))+(((-1.0)*r10*x463*x464))+((r12*x461))+(((-1.0)*r22*x465))+((cj1*r21*x462))), ((((-1.0)*r22*x461))+((r20*sj1*x464))+((cj1*r10*x464))+((cj1*r11*x462))+(((-1.0)*r12*x465))+((r21*sj1*x462))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x466=IKcos(j2);
IkReal x467=IKsin(j2);
IkReal x468=((1.0)*cj4);
IkReal x469=((0.07155)*cj5);
IkReal x470=(cj5*sj4);
IkReal x471=(cj3*cj4);
IkReal x472=(r20*sj5);
IkReal x473=(r10*sj5);
IkReal x474=((0.07155)*sj5);
IkReal x475=(cj5*sj3);
IkReal x476=(cj3*sj4);
IkReal x477=(cj1*x466);
IkReal x478=((1.0)*sj3*sj5);
IkReal x479=(sj1*x466);
IkReal x480=((0.27155)*x467);
IkReal x481=(sj1*x467);
IkReal x482=((1.0)*x479);
IkReal x483=((1.0)*cj1*x467);
IkReal x484=(x483+x482);
evalcond[0]=(((sj4*x473))+(((-1.0)*x477))+((r11*x470))+x481+(((-1.0)*r12*x468)));
evalcond[1]=(((r21*x470))+(((-1.0)*x484))+((sj4*x472))+(((-1.0)*r22*x468)));
evalcond[2]=(((r21*x474))+(((-1.0)*cj1*x480))+(((0.3571)*cj1))+(((-0.27155)*x479))+(((-1.0)*pz))+(((-1.0)*r20*x469)));
evalcond[3]=((((-0.27155)*x477))+((sj1*x480))+((r11*x474))+(((-1.0)*py))+(((-0.3571)*sj1))+(((-1.0)*r10*x469)));
evalcond[4]=((((-1.0)*r21*x478))+((x471*x472))+((r20*x475))+(((-1.0)*x481))+((cj5*r21*x471))+x477+((r22*x476)));
evalcond[5]=(((x471*x473))+((r10*x475))+(((-1.0)*x484))+((cj5*r11*x471))+(((-1.0)*r11*x478))+((r12*x476)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x485=((1.0)*cj5);
IkReal x486=((1.0)*sj4);
CheckValue<IkReal> x487=IKPowWithIntegerCheck(IKsign((((cj4*r22))+(((-1.0)*r20*sj5*x486))+(((-1.0)*r21*sj4*x485)))),-1);
if(!x487.valid){
continue;
}
CheckValue<IkReal> x488 = IKatan2WithCheck(IkReal((((r11*sj5))+(((-1.0)*r10*x485)))),IkReal(((((-1.0)*cj4*r11*x485))+(((-1.0)*cj4*r10*sj5))+(((-1.0)*r12*x486)))),IKFAST_ATAN2_MAGTHRESH);
if(!x488.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x487.value)))+(x488.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x489=IKsin(j3);
IkReal x490=IKcos(j3);
IkReal x491=(cj4*r00);
IkReal x492=(sj5*x489);
IkReal x493=(sj4*x489);
IkReal x494=(sj5*x490);
IkReal x495=(cj4*cj5*x489);
IkReal x496=((1.0)*cj5*x490);
evalcond[0]=(((r22*x493))+((cj4*r20*x492))+((r21*x494))+((r21*x495))+(((-1.0)*r20*x496)));
evalcond[1]=((((-1.0)*r10*x496))+((cj4*r10*x492))+((r11*x495))+((r11*x494))+((r12*x493)));
evalcond[2]=(((cj5*r00*x489))+((x491*x494))+((r02*sj4*x490))+(((-1.0)*r01*x492))+((cj4*cj5*r01*x490)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x496))+((x491*x492))+((r02*x493))+((r01*x494))+((r01*x495)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x497=((0.76043125175021)*sj4);
IkReal x498=((0.200364043685242)*sj5);
IkReal x499=((0.200364043685242)*cj5);
IkReal x500=((0.76043125175021)*cj4);
if( IKabs(((((-2.80033604032484)*py))+(((-1.0)*r10*x499))+(((-1.0)*cj5*r11*x497))+((r11*x498))+(((-1.0)*r10*sj5*x497))+((r12*x500)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r21*x498))+(((2.80033604032484)*pz))+(((-1.0)*r22*x500))+((cj5*r21*x497))+((r20*sj5*x497))+((r20*x499)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.80033604032484)*py))+(((-1.0)*r10*x499))+(((-1.0)*cj5*r11*x497))+((r11*x498))+(((-1.0)*r10*sj5*x497))+((r12*x500))))+IKsqr(((((-1.0)*r21*x498))+(((2.80033604032484)*pz))+(((-1.0)*r22*x500))+((cj5*r21*x497))+((r20*sj5*x497))+((r20*x499))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-2.80033604032484)*py))+(((-1.0)*r10*x499))+(((-1.0)*cj5*r11*x497))+((r11*x498))+(((-1.0)*r10*sj5*x497))+((r12*x500))), ((((-1.0)*r21*x498))+(((2.80033604032484)*pz))+(((-1.0)*r22*x500))+((cj5*r21*x497))+((r20*sj5*x497))+((r20*x499))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x501=((0.27155)*sj5);
IkReal x502=((0.07155)*cj5);
IkReal x503=(cj3*cj4);
IkReal x504=((0.27155)*sj4);
IkReal x505=((0.27155)*cj4);
IkReal x506=((0.07155)*sj5);
IkReal x507=(cj5*r21);
IkReal x508=(r10*x502);
IkReal x509=((0.3571)*(IKsin(j1)));
IkReal x510=(r11*x506);
IkReal x511=(r20*x502);
IkReal x512=(r21*x506);
IkReal x513=((0.3571)*(IKcos(j1)));
IkReal x514=((0.27155)*cj5*r11);
IkReal x515=((0.27155)*cj5*sj3);
IkReal x516=(x513+x512);
IkReal x517=(py+x508+x509);
evalcond[0]=(((cj5*r11*x504))+((r10*sj4*x501))+x517+(((-1.0)*x510))+(((-1.0)*r12*x505)));
evalcond[1]=((((-1.0)*r20*sj4*x501))+((r22*x505))+(((-1.0)*pz))+x516+(((-1.0)*x504*x507))+(((-1.0)*x511)));
evalcond[2]=(((r21*sj3*x501))+(((-1.0)*cj3*r22*x504))+(((-0.27155)*x503*x507))+(((-1.0)*r20*x515))+(((-1.0)*r20*x501*x503))+x517+(((-1.0)*x510)));
evalcond[3]=((((-1.0)*r11*sj3*x501))+((x503*x514))+((r10*x501*x503))+((r10*x515))+pz+x511+((cj3*r12*x504))+(((-1.0)*x516)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x518=(cj4*sj1);
IkReal x519=(cj5*sj4);
IkReal x520=((1.0)*sj1);
IkReal x521=(sj4*sj5);
IkReal x522=((1.0)*cj1*cj4);
if( IKabs((((cj1*r20*x521))+(((-1.0)*r10*x520*x521))+(((-1.0)*r11*x519*x520))+(((-1.0)*r22*x522))+((r12*x518))+((cj1*r21*x519)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r20*sj1*x521))+((r21*sj1*x519))+(((-1.0)*r22*x518))+((cj1*r11*x519))+(((-1.0)*r12*x522))+((cj1*r10*x521)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*r20*x521))+(((-1.0)*r10*x520*x521))+(((-1.0)*r11*x519*x520))+(((-1.0)*r22*x522))+((r12*x518))+((cj1*r21*x519))))+IKsqr((((r20*sj1*x521))+((r21*sj1*x519))+(((-1.0)*r22*x518))+((cj1*r11*x519))+(((-1.0)*r12*x522))+((cj1*r10*x521))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*r20*x521))+(((-1.0)*r10*x520*x521))+(((-1.0)*r11*x519*x520))+(((-1.0)*r22*x522))+((r12*x518))+((cj1*r21*x519))), (((r20*sj1*x521))+((r21*sj1*x519))+(((-1.0)*r22*x518))+((cj1*r11*x519))+(((-1.0)*r12*x522))+((cj1*r10*x521))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x523=IKcos(j2);
IkReal x524=IKsin(j2);
IkReal x525=((1.0)*cj4);
IkReal x526=((0.07155)*cj5);
IkReal x527=(cj5*sj4);
IkReal x528=(cj3*cj4);
IkReal x529=(r20*sj5);
IkReal x530=(r10*sj5);
IkReal x531=((0.07155)*sj5);
IkReal x532=(cj5*sj3);
IkReal x533=(cj3*sj4);
IkReal x534=(cj1*x523);
IkReal x535=((1.0)*sj3*sj5);
IkReal x536=(sj1*x523);
IkReal x537=((0.27155)*x524);
IkReal x538=(sj1*x524);
IkReal x539=((1.0)*x536);
IkReal x540=((1.0)*cj1*x524);
IkReal x541=(x540+x539);
evalcond[0]=((((-1.0)*x534))+((r11*x527))+x538+((sj4*x530))+(((-1.0)*r12*x525)));
evalcond[1]=(((r21*x527))+(((-1.0)*x541))+((sj4*x529))+(((-1.0)*r22*x525)));
evalcond[2]=((((-0.27155)*x536))+(((0.3571)*cj1))+(((-1.0)*cj1*x537))+(((-1.0)*r20*x526))+(((-1.0)*pz))+((r21*x531)));
evalcond[3]=((((-0.27155)*x534))+((sj1*x537))+((r11*x531))+(((-1.0)*r10*x526))+(((-1.0)*py))+(((-0.3571)*sj1)));
evalcond[4]=(((r20*x532))+(((-1.0)*x538))+(((-1.0)*r21*x535))+((cj5*r21*x528))+((r22*x533))+x534+((x528*x529)));
evalcond[5]=(((r12*x533))+(((-1.0)*x541))+((r10*x532))+((cj5*r11*x528))+((x528*x530))+(((-1.0)*r11*x535)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x542=((1.0)*r20);
IkReal x543=((1.0)*cj4);
CheckValue<IkReal> x544=IKPowWithIntegerCheck(IKsign((((cj5*r11*sj4))+((r10*sj4*sj5))+(((-1.0)*r12*x543)))),-1);
if(!x544.valid){
continue;
}
CheckValue<IkReal> x545 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*x542)))),IkReal(((((-1.0)*cj4*sj5*x542))+(((-1.0)*r22*sj4))+(((-1.0)*cj5*r21*x543)))),IKFAST_ATAN2_MAGTHRESH);
if(!x545.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x544.value)))+(x545.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x546=IKsin(j3);
IkReal x547=IKcos(j3);
IkReal x548=(cj4*r00);
IkReal x549=(sj5*x546);
IkReal x550=(sj4*x546);
IkReal x551=(sj5*x547);
IkReal x552=(cj4*cj5*x546);
IkReal x553=((1.0)*cj5*x547);
evalcond[0]=((((-1.0)*r20*x553))+((r22*x550))+((cj4*r20*x549))+((r21*x551))+((r21*x552)));
evalcond[1]=((((-1.0)*r10*x553))+((r12*x550))+((cj4*r10*x549))+((r11*x551))+((r11*x552)));
evalcond[2]=(((x548*x551))+((r02*sj4*x547))+((cj4*cj5*r01*x547))+(((-1.0)*r01*x549))+((cj5*r00*x546)));
evalcond[3]=((-1.0)+((r02*x550))+(((-1.0)*r00*x553))+((r01*x551))+((r01*x552))+((x548*x549)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x554=((0.76043125175021)*sj4);
IkReal x555=((0.200364043685242)*sj5);
IkReal x556=((0.200364043685242)*cj5);
IkReal x557=((0.76043125175021)*cj4);
if( IKabs(((((-2.80033604032484)*py))+(((-1.0)*r10*x556))+((r12*x557))+((r11*x555))+(((-1.0)*cj5*r11*x554))+(((-1.0)*r10*sj5*x554)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r22*x557))+(((2.80033604032484)*pz))+(((-1.0)*r21*x555))+((r20*x556))+((cj5*r21*x554))+((r20*sj5*x554)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.80033604032484)*py))+(((-1.0)*r10*x556))+((r12*x557))+((r11*x555))+(((-1.0)*cj5*r11*x554))+(((-1.0)*r10*sj5*x554))))+IKsqr(((((-1.0)*r22*x557))+(((2.80033604032484)*pz))+(((-1.0)*r21*x555))+((r20*x556))+((cj5*r21*x554))+((r20*sj5*x554))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-2.80033604032484)*py))+(((-1.0)*r10*x556))+((r12*x557))+((r11*x555))+(((-1.0)*cj5*r11*x554))+(((-1.0)*r10*sj5*x554))), ((((-1.0)*r22*x557))+(((2.80033604032484)*pz))+(((-1.0)*r21*x555))+((r20*x556))+((cj5*r21*x554))+((r20*sj5*x554))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x558=((0.27155)*sj5);
IkReal x559=((0.07155)*cj5);
IkReal x560=(cj3*cj4);
IkReal x561=((0.27155)*sj4);
IkReal x562=((0.27155)*cj4);
IkReal x563=((0.07155)*sj5);
IkReal x564=(cj5*r21);
IkReal x565=(r10*x559);
IkReal x566=((0.3571)*(IKsin(j1)));
IkReal x567=(r11*x563);
IkReal x568=(r20*x559);
IkReal x569=(r21*x563);
IkReal x570=((0.3571)*(IKcos(j1)));
IkReal x571=((0.27155)*cj5*r11);
IkReal x572=((0.27155)*cj5*sj3);
IkReal x573=(x570+x569);
IkReal x574=(py+x566+x565);
evalcond[0]=(((cj5*r11*x561))+((r10*sj4*x558))+x574+(((-1.0)*r12*x562))+(((-1.0)*x567)));
evalcond[1]=((((-1.0)*r20*sj4*x558))+((r22*x562))+(((-1.0)*pz))+x573+(((-1.0)*x561*x564))+(((-1.0)*x568)));
evalcond[2]=(((r21*sj3*x558))+(((-1.0)*r20*x558*x560))+(((-1.0)*cj3*r22*x561))+(((-0.27155)*x560*x564))+x574+(((-1.0)*r20*x572))+(((-1.0)*x567)));
evalcond[3]=(((r10*x558*x560))+((x560*x571))+pz+(((-1.0)*x573))+x568+(((-1.0)*r11*sj3*x558))+((r10*x572))+((cj3*r12*x561)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x575=(cj4*sj1);
IkReal x576=(cj5*sj4);
IkReal x577=((1.0)*sj1);
IkReal x578=(sj4*sj5);
IkReal x579=((1.0)*cj1*cj4);
if( IKabs((((r12*x575))+((cj1*r21*x576))+(((-1.0)*r11*x576*x577))+(((-1.0)*r10*x577*x578))+(((-1.0)*r22*x579))+((cj1*r20*x578)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r20*sj1*x578))+((cj1*r10*x578))+(((-1.0)*r12*x579))+((r21*sj1*x576))+(((-1.0)*r22*x575))+((cj1*r11*x576)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r12*x575))+((cj1*r21*x576))+(((-1.0)*r11*x576*x577))+(((-1.0)*r10*x577*x578))+(((-1.0)*r22*x579))+((cj1*r20*x578))))+IKsqr((((r20*sj1*x578))+((cj1*r10*x578))+(((-1.0)*r12*x579))+((r21*sj1*x576))+(((-1.0)*r22*x575))+((cj1*r11*x576))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r12*x575))+((cj1*r21*x576))+(((-1.0)*r11*x576*x577))+(((-1.0)*r10*x577*x578))+(((-1.0)*r22*x579))+((cj1*r20*x578))), (((r20*sj1*x578))+((cj1*r10*x578))+(((-1.0)*r12*x579))+((r21*sj1*x576))+(((-1.0)*r22*x575))+((cj1*r11*x576))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x580=IKcos(j2);
IkReal x581=IKsin(j2);
IkReal x582=((1.0)*cj4);
IkReal x583=((0.07155)*cj5);
IkReal x584=(cj5*sj4);
IkReal x585=(cj3*cj4);
IkReal x586=(r20*sj5);
IkReal x587=(r10*sj5);
IkReal x588=((0.07155)*sj5);
IkReal x589=(cj5*sj3);
IkReal x590=(cj3*sj4);
IkReal x591=(cj1*x580);
IkReal x592=((1.0)*sj3*sj5);
IkReal x593=(sj1*x580);
IkReal x594=((0.27155)*x581);
IkReal x595=(sj1*x581);
IkReal x596=((1.0)*x593);
IkReal x597=((1.0)*cj1*x581);
IkReal x598=(x597+x596);
evalcond[0]=(((r11*x584))+(((-1.0)*x591))+x595+(((-1.0)*r12*x582))+((sj4*x587)));
evalcond[1]=((((-1.0)*r22*x582))+(((-1.0)*x598))+((sj4*x586))+((r21*x584)));
evalcond[2]=((((-0.27155)*x593))+(((0.3571)*cj1))+(((-1.0)*pz))+(((-1.0)*cj1*x594))+(((-1.0)*r20*x583))+((r21*x588)));
evalcond[3]=(((r11*x588))+(((-0.27155)*x591))+(((-1.0)*py))+(((-0.3571)*sj1))+((sj1*x594))+(((-1.0)*r10*x583)));
evalcond[4]=(((r20*x589))+(((-1.0)*r21*x592))+((r22*x590))+(((-1.0)*x595))+((cj5*r21*x585))+((x585*x586))+x591);
evalcond[5]=(((cj5*r11*x585))+(((-1.0)*r11*x592))+((r10*x589))+((x585*x587))+(((-1.0)*x598))+((r12*x590)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x599=((1.0)*cj4);
IkReal x600=(((cj5*r21*sj4))+(((-1.0)*r22*x599))+((r20*sj4*sj5)));
j3eval[0]=x600;
j3eval[1]=IKsign(x600);
j3eval[2]=((IKabs(((((-1.0)*r00*sj5*x599))+(((-1.0)*cj5*r01*x599))+(((-1.0)*r02*sj4)))))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x601=((1.0)*sj5);
IkReal x602=((1.0)*cj5);
IkReal x603=((((-1.0)*r00*sj4*x601))+(((-1.0)*r01*sj4*x602))+((cj4*r02)));
j3eval[0]=x603;
j3eval[1]=IKsign(x603);
j3eval[2]=((IKabs(((((-1.0)*r20*x602))+((r21*sj5)))))+(IKabs(((((-1.0)*cj4*r20*x601))+(((-1.0)*cj4*r21*x602))+(((-1.0)*r22*sj4))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x604=cj4*cj4;
IkReal x605=r11*r11;
IkReal x606=cj5*cj5;
IkReal x607=r10*r10;
IkReal x608=r12*r12;
IkReal x609=(cj5*r11);
IkReal x610=((1.0)*x604);
IkReal x611=((2.0)*r10*sj5);
IkReal x612=(cj4*r12*sj4);
IkReal x613=(x606*x607);
IkReal x614=(x605*x606);
IkReal x615=(((x604*x609*x611))+(((-1.0)*x610*x613))+((x604*x607))+(((-1.0)*x609*x611))+((x611*x612))+(((-1.0)*x614))+(((2.0)*x609*x612))+x605+x608+x613+(((-1.0)*x608*x610))+((x604*x614)));
j3eval[0]=x615;
j3eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs((((r12*sj4))+((cj4*r10*sj5))+((cj4*x609))))));
j3eval[2]=IKsign(x615);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x616=cj4*cj4;
IkReal x617=r11*r11;
IkReal x618=cj5*cj5;
IkReal x619=r10*r10;
IkReal x620=r12*r12;
IkReal x621=(cj5*r11);
IkReal x622=((2.0)*r10*sj5);
IkReal x623=(cj4*r12*sj4);
IkReal x624=((1.0)*x616);
IkReal x625=(x618*x619);
IkReal x626=(x617*x618);
CheckValue<IkReal> x627=IKPowWithIntegerCheck(IKsign(((((-1.0)*x621*x622))+((x616*x626))+(((-1.0)*x620*x624))+((x616*x621*x622))+(((-1.0)*x624*x625))+((x616*x619))+x617+x625+x620+(((-1.0)*x626))+(((2.0)*x621*x623))+((x622*x623)))),-1);
if(!x627.valid){
continue;
}
CheckValue<IkReal> x628 = IKatan2WithCheck(IkReal((((cj4*x621))+((r12*sj4))+((cj4*r10*sj5)))),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x628.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x627.value)))+(x628.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x629=IKsin(j3);
IkReal x630=IKcos(j3);
IkReal x631=(cj4*r10);
IkReal x632=(cj4*r11);
IkReal x633=(cj5*x629);
IkReal x634=(sj5*x629);
IkReal x635=(sj4*x629);
IkReal x636=(sj5*x630);
IkReal x637=((1.0)*cj5*x630);
evalcond[0]=(((r21*x636))+((cj4*r21*x633))+((cj4*r20*x634))+((r22*x635))+(((-1.0)*r20*x637)));
evalcond[1]=(((r02*x635))+(((-1.0)*r00*x637))+((cj4*r00*x634))+((r01*x636))+((cj4*r01*x633)));
evalcond[2]=((((-1.0)*r11*x634))+((cj5*x630*x632))+((r10*x633))+((r12*sj4*x630))+((x631*x636)));
evalcond[3]=((-1.0)+((r12*x635))+((x632*x633))+((x631*x634))+(((-1.0)*r10*x637))+((r11*x636)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x638=((0.76043125175021)*sj4);
IkReal x639=((0.76043125175021)*cj4);
IkReal x640=((0.200364043685242)*sj5);
IkReal x641=((0.200364043685242)*cj5);
if( IKabs(((((2.80033604032484)*px))+(((-1.0)*r01*x640))+(((-1.0)*r02*x639))+((cj5*r01*x638))+((r00*x641))+((r00*sj5*x638)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r20*sj5*x638))+((r20*x641))+(((2.80033604032484)*pz))+((cj5*r21*x638))+(((-1.0)*r21*x640))+(((-1.0)*r22*x639)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.80033604032484)*px))+(((-1.0)*r01*x640))+(((-1.0)*r02*x639))+((cj5*r01*x638))+((r00*x641))+((r00*sj5*x638))))+IKsqr((((r20*sj5*x638))+((r20*x641))+(((2.80033604032484)*pz))+((cj5*r21*x638))+(((-1.0)*r21*x640))+(((-1.0)*r22*x639))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((2.80033604032484)*px))+(((-1.0)*r01*x640))+(((-1.0)*r02*x639))+((cj5*r01*x638))+((r00*x641))+((r00*sj5*x638))), (((r20*sj5*x638))+((r20*x641))+(((2.80033604032484)*pz))+((cj5*r21*x638))+(((-1.0)*r21*x640))+(((-1.0)*r22*x639))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x642=((1.0)*pz);
IkReal x643=((0.27155)*sj4);
IkReal x644=(r00*sj5);
IkReal x645=((0.07155)*sj5);
IkReal x646=((0.27155)*cj4);
IkReal x647=(cj5*r20);
IkReal x648=(cj3*cj5);
IkReal x649=((0.27155)*sj3);
IkReal x650=(r20*sj5);
IkReal x651=(cj5*r00);
IkReal x652=((0.07155)*x651);
IkReal x653=(r01*x645);
IkReal x654=((0.3571)*(IKsin(j1)));
IkReal x655=(r21*x645);
IkReal x656=((0.3571)*(IKcos(j1)));
IkReal x657=((0.07155)*x647);
IkReal x658=(sj5*x649);
IkReal x659=(x642+x657);
IkReal x660=(x653+x654);
IkReal x661=(x655+x656);
evalcond[0]=((((-1.0)*x659))+(((-1.0)*x643*x650))+x661+((r22*x646))+(((-1.0)*cj5*r21*x643)));
evalcond[1]=((((-1.0)*cj5*r01*x643))+((r02*x646))+(((-1.0)*x652))+(((-1.0)*px))+(((-1.0)*x643*x644))+x660);
evalcond[2]=(((r21*x646*x648))+((cj3*x646*x650))+((cj3*r22*x643))+(((-1.0)*x660))+px+x652+(((-1.0)*r21*x658))+((x647*x649)));
evalcond[3]=(((cj3*r02*x643))+((cj3*x644*x646))+((x649*x651))+(((-1.0)*r01*x658))+((r01*x646*x648))+(((-1.0)*x659))+x661);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x662=(cj5*sj4);
IkReal x663=(cj4*r02);
IkReal x664=((1.0)*cj1);
IkReal x665=(sj4*sj5);
IkReal x666=((1.0)*cj4*r22);
IkReal x667=(sj1*x665);
if( IKabs((((r00*x667))+((r01*sj1*x662))+((cj1*r20*x665))+(((-1.0)*cj4*r22*x664))+((cj1*r21*x662))+(((-1.0)*sj1*x663)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r21*sj1*x662))+((r20*x667))+(((-1.0)*r01*x662*x664))+(((-1.0)*sj1*x666))+(((-1.0)*r00*x664*x665))+((cj1*x663)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x667))+((r01*sj1*x662))+((cj1*r20*x665))+(((-1.0)*cj4*r22*x664))+((cj1*r21*x662))+(((-1.0)*sj1*x663))))+IKsqr((((r21*sj1*x662))+((r20*x667))+(((-1.0)*r01*x662*x664))+(((-1.0)*sj1*x666))+(((-1.0)*r00*x664*x665))+((cj1*x663))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r00*x667))+((r01*sj1*x662))+((cj1*r20*x665))+(((-1.0)*cj4*r22*x664))+((cj1*r21*x662))+(((-1.0)*sj1*x663))), (((r21*sj1*x662))+((r20*x667))+(((-1.0)*r01*x662*x664))+(((-1.0)*sj1*x666))+(((-1.0)*r00*x664*x665))+((cj1*x663))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x668=IKcos(j2);
IkReal x669=IKsin(j2);
IkReal x670=(cj3*sj4);
IkReal x671=((1.0)*cj4);
IkReal x672=(r00*sj5);
IkReal x673=(cj3*cj4);
IkReal x674=(cj5*sj4);
IkReal x675=((0.07155)*sj5);
IkReal x676=(cj5*r20);
IkReal x677=(cj5*r00);
IkReal x678=(r20*sj5);
IkReal x679=(cj1*x668);
IkReal x680=(sj1*x668);
IkReal x681=(cj1*x669);
IkReal x682=((1.0)*sj3*sj5);
IkReal x683=(sj1*x669);
IkReal x684=((1.0)*x683);
evalcond[0]=((((-1.0)*r02*x671))+((r01*x674))+(((-1.0)*x684))+x679+((sj4*x672)));
evalcond[1]=(((r21*x674))+(((-1.0)*r22*x671))+((sj4*x678))+(((-1.0)*x681))+(((-1.0)*x680)));
evalcond[2]=(((r21*x675))+(((-0.27155)*x681))+(((-0.27155)*x680))+(((0.3571)*cj1))+(((-0.07155)*x676))+(((-1.0)*pz)));
evalcond[3]=((((0.3571)*sj1))+(((-0.27155)*x683))+((r01*x675))+(((-0.07155)*x677))+(((-1.0)*px))+(((0.27155)*x679)));
evalcond[4]=(((r02*x670))+((x672*x673))+((sj3*x677))+(((-1.0)*r01*x682))+x681+x680+((cj5*r01*x673)));
evalcond[5]=(((x673*x678))+(((-1.0)*x684))+((r22*x670))+((sj3*x676))+(((-1.0)*r21*x682))+x679+((cj5*r21*x673)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x685=((1.0)*sj5);
IkReal x686=((1.0)*cj5);
CheckValue<IkReal> x687=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj4*x685))+(((-1.0)*r01*sj4*x686))+((cj4*r02)))),-1);
if(!x687.valid){
continue;
}
CheckValue<IkReal> x688 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x686)))),IkReal(((((-1.0)*cj4*r21*x686))+(((-1.0)*r22*sj4))+(((-1.0)*cj4*r20*x685)))),IKFAST_ATAN2_MAGTHRESH);
if(!x688.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x687.value)))+(x688.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x689=IKsin(j3);
IkReal x690=IKcos(j3);
IkReal x691=(cj4*r10);
IkReal x692=(cj4*r11);
IkReal x693=(cj5*x689);
IkReal x694=(sj5*x689);
IkReal x695=(sj4*x689);
IkReal x696=(sj5*x690);
IkReal x697=((1.0)*cj5*x690);
evalcond[0]=(((cj4*r21*x693))+((cj4*r20*x694))+((r22*x695))+(((-1.0)*r20*x697))+((r21*x696)));
evalcond[1]=((((-1.0)*r00*x697))+((r02*x695))+((cj4*r00*x694))+((r01*x696))+((cj4*r01*x693)));
evalcond[2]=((((-1.0)*r11*x694))+((r12*sj4*x690))+((x691*x696))+((cj5*x690*x692))+((r10*x693)));
evalcond[3]=((-1.0)+((x691*x694))+((x692*x693))+((r12*x695))+(((-1.0)*r10*x697))+((r11*x696)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x698=((0.76043125175021)*sj4);
IkReal x699=((0.76043125175021)*cj4);
IkReal x700=((0.200364043685242)*sj5);
IkReal x701=((0.200364043685242)*cj5);
if( IKabs(((((2.80033604032484)*px))+((r00*x701))+((r00*sj5*x698))+(((-1.0)*r02*x699))+((cj5*r01*x698))+(((-1.0)*r01*x700)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj5*r21*x698))+(((2.80033604032484)*pz))+((r20*x701))+(((-1.0)*r21*x700))+(((-1.0)*r22*x699))+((r20*sj5*x698)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.80033604032484)*px))+((r00*x701))+((r00*sj5*x698))+(((-1.0)*r02*x699))+((cj5*r01*x698))+(((-1.0)*r01*x700))))+IKsqr((((cj5*r21*x698))+(((2.80033604032484)*pz))+((r20*x701))+(((-1.0)*r21*x700))+(((-1.0)*r22*x699))+((r20*sj5*x698))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((2.80033604032484)*px))+((r00*x701))+((r00*sj5*x698))+(((-1.0)*r02*x699))+((cj5*r01*x698))+(((-1.0)*r01*x700))), (((cj5*r21*x698))+(((2.80033604032484)*pz))+((r20*x701))+(((-1.0)*r21*x700))+(((-1.0)*r22*x699))+((r20*sj5*x698))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x702=((1.0)*pz);
IkReal x703=((0.27155)*sj4);
IkReal x704=(r00*sj5);
IkReal x705=((0.07155)*sj5);
IkReal x706=((0.27155)*cj4);
IkReal x707=(cj5*r20);
IkReal x708=(cj3*cj5);
IkReal x709=((0.27155)*sj3);
IkReal x710=(r20*sj5);
IkReal x711=(cj5*r00);
IkReal x712=((0.07155)*x711);
IkReal x713=(r01*x705);
IkReal x714=((0.3571)*(IKsin(j1)));
IkReal x715=(r21*x705);
IkReal x716=((0.3571)*(IKcos(j1)));
IkReal x717=((0.07155)*x707);
IkReal x718=(sj5*x709);
IkReal x719=(x717+x702);
IkReal x720=(x713+x714);
IkReal x721=(x715+x716);
evalcond[0]=(((r22*x706))+(((-1.0)*x703*x710))+(((-1.0)*cj5*r21*x703))+(((-1.0)*x719))+x721);
evalcond[1]=((((-1.0)*x703*x704))+(((-1.0)*px))+(((-1.0)*x712))+x720+(((-1.0)*cj5*r01*x703))+((r02*x706)));
evalcond[2]=(((x707*x709))+((r21*x706*x708))+((cj3*r22*x703))+(((-1.0)*x720))+(((-1.0)*r21*x718))+px+x712+((cj3*x706*x710)));
evalcond[3]=(((x709*x711))+((cj3*r02*x703))+((cj3*x704*x706))+(((-1.0)*x719))+x721+((r01*x706*x708))+(((-1.0)*r01*x718)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x722=(cj5*sj4);
IkReal x723=(cj4*r02);
IkReal x724=((1.0)*cj1);
IkReal x725=(sj4*sj5);
IkReal x726=((1.0)*cj4*r22);
IkReal x727=(sj1*x725);
if( IKabs(((((-1.0)*cj4*r22*x724))+((r00*x727))+((cj1*r20*x725))+(((-1.0)*sj1*x723))+((cj1*r21*x722))+((r01*sj1*x722)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x724*x725))+((cj1*x723))+(((-1.0)*r01*x722*x724))+((r21*sj1*x722))+((r20*x727))+(((-1.0)*sj1*x726)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r22*x724))+((r00*x727))+((cj1*r20*x725))+(((-1.0)*sj1*x723))+((cj1*r21*x722))+((r01*sj1*x722))))+IKsqr(((((-1.0)*r00*x724*x725))+((cj1*x723))+(((-1.0)*r01*x722*x724))+((r21*sj1*x722))+((r20*x727))+(((-1.0)*sj1*x726))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*cj4*r22*x724))+((r00*x727))+((cj1*r20*x725))+(((-1.0)*sj1*x723))+((cj1*r21*x722))+((r01*sj1*x722))), ((((-1.0)*r00*x724*x725))+((cj1*x723))+(((-1.0)*r01*x722*x724))+((r21*sj1*x722))+((r20*x727))+(((-1.0)*sj1*x726))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x728=IKcos(j2);
IkReal x729=IKsin(j2);
IkReal x730=(cj3*sj4);
IkReal x731=((1.0)*cj4);
IkReal x732=(r00*sj5);
IkReal x733=(cj3*cj4);
IkReal x734=(cj5*sj4);
IkReal x735=((0.07155)*sj5);
IkReal x736=(cj5*r20);
IkReal x737=(cj5*r00);
IkReal x738=(r20*sj5);
IkReal x739=(cj1*x728);
IkReal x740=(sj1*x728);
IkReal x741=(cj1*x729);
IkReal x742=((1.0)*sj3*sj5);
IkReal x743=(sj1*x729);
IkReal x744=((1.0)*x743);
evalcond[0]=((((-1.0)*r02*x731))+((r01*x734))+x739+((sj4*x732))+(((-1.0)*x744)));
evalcond[1]=((((-1.0)*x740))+(((-1.0)*x741))+((sj4*x738))+((r21*x734))+(((-1.0)*r22*x731)));
evalcond[2]=((((-0.27155)*x741))+(((-0.27155)*x740))+(((-0.07155)*x736))+(((0.3571)*cj1))+(((-1.0)*pz))+((r21*x735)));
evalcond[3]=((((-0.27155)*x743))+(((-0.07155)*x737))+(((0.3571)*sj1))+((r01*x735))+(((-1.0)*px))+(((0.27155)*x739)));
evalcond[4]=(((sj3*x737))+(((-1.0)*r01*x742))+((cj5*r01*x733))+((r02*x730))+x740+x741+((x732*x733)));
evalcond[5]=((((-1.0)*r21*x742))+((sj3*x736))+((x733*x738))+x739+((r22*x730))+(((-1.0)*x744))+((cj5*r21*x733)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x745=((1.0)*cj4);
CheckValue<IkReal> x746=IKPowWithIntegerCheck(IKsign((((cj5*r21*sj4))+(((-1.0)*r22*x745))+((r20*sj4*sj5)))),-1);
if(!x746.valid){
continue;
}
CheckValue<IkReal> x747 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IkReal(((((-1.0)*r00*sj5*x745))+(((-1.0)*cj5*r01*x745))+(((-1.0)*r02*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x747.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x746.value)))+(x747.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x748=IKsin(j3);
IkReal x749=IKcos(j3);
IkReal x750=(cj4*r10);
IkReal x751=(cj4*r11);
IkReal x752=(cj5*x748);
IkReal x753=(sj5*x748);
IkReal x754=(sj4*x748);
IkReal x755=(sj5*x749);
IkReal x756=((1.0)*cj5*x749);
evalcond[0]=(((cj4*r21*x752))+((cj4*r20*x753))+((r22*x754))+((r21*x755))+(((-1.0)*r20*x756)));
evalcond[1]=(((cj4*r00*x753))+((r02*x754))+((cj4*r01*x752))+((r01*x755))+(((-1.0)*r00*x756)));
evalcond[2]=(((cj5*x749*x751))+(((-1.0)*r11*x753))+((r10*x752))+((x750*x755))+((r12*sj4*x749)));
evalcond[3]=((-1.0)+((x751*x752))+(((-1.0)*r10*x756))+((r12*x754))+((r11*x755))+((x750*x753)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x757=((0.76043125175021)*sj4);
IkReal x758=((0.76043125175021)*cj4);
IkReal x759=((0.200364043685242)*sj5);
IkReal x760=((0.200364043685242)*cj5);
if( IKabs((((cj5*r01*x757))+((r00*sj5*x757))+(((2.80033604032484)*px))+(((-1.0)*r02*x758))+(((-1.0)*r01*x759))+((r00*x760)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.80033604032484)*pz))+((r20*x760))+(((-1.0)*r22*x758))+((r20*sj5*x757))+(((-1.0)*r21*x759))+((cj5*r21*x757)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r01*x757))+((r00*sj5*x757))+(((2.80033604032484)*px))+(((-1.0)*r02*x758))+(((-1.0)*r01*x759))+((r00*x760))))+IKsqr(((((2.80033604032484)*pz))+((r20*x760))+(((-1.0)*r22*x758))+((r20*sj5*x757))+(((-1.0)*r21*x759))+((cj5*r21*x757))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((cj5*r01*x757))+((r00*sj5*x757))+(((2.80033604032484)*px))+(((-1.0)*r02*x758))+(((-1.0)*r01*x759))+((r00*x760))), ((((2.80033604032484)*pz))+((r20*x760))+(((-1.0)*r22*x758))+((r20*sj5*x757))+(((-1.0)*r21*x759))+((cj5*r21*x757))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x761=((1.0)*pz);
IkReal x762=((0.27155)*sj4);
IkReal x763=(r00*sj5);
IkReal x764=((0.07155)*sj5);
IkReal x765=((0.27155)*cj4);
IkReal x766=(cj5*r20);
IkReal x767=(cj3*cj5);
IkReal x768=((0.27155)*sj3);
IkReal x769=(r20*sj5);
IkReal x770=(cj5*r00);
IkReal x771=((0.07155)*x770);
IkReal x772=(r01*x764);
IkReal x773=((0.3571)*(IKsin(j1)));
IkReal x774=(r21*x764);
IkReal x775=((0.3571)*(IKcos(j1)));
IkReal x776=((0.07155)*x766);
IkReal x777=(sj5*x768);
IkReal x778=(x776+x761);
IkReal x779=(x773+x772);
IkReal x780=(x775+x774);
evalcond[0]=((((-1.0)*x762*x769))+((r22*x765))+x780+(((-1.0)*x778))+(((-1.0)*cj5*r21*x762)));
evalcond[1]=((((-1.0)*x762*x763))+(((-1.0)*px))+(((-1.0)*cj5*r01*x762))+((r02*x765))+x779+(((-1.0)*x771)));
evalcond[2]=(((cj3*r22*x762))+((r21*x765*x767))+px+((x766*x768))+x771+(((-1.0)*x779))+((cj3*x765*x769))+(((-1.0)*r21*x777)));
evalcond[3]=(((r01*x765*x767))+((cj3*r02*x762))+(((-1.0)*r01*x777))+((cj3*x763*x765))+x780+(((-1.0)*x778))+((x768*x770)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x781=(cj5*sj4);
IkReal x782=(cj4*r02);
IkReal x783=((1.0)*cj1);
IkReal x784=(sj4*sj5);
IkReal x785=((1.0)*cj4*r22);
IkReal x786=(sj1*x784);
if( IKabs((((r00*x786))+((cj1*r20*x784))+(((-1.0)*cj4*r22*x783))+((cj1*r21*x781))+((r01*sj1*x781))+(((-1.0)*sj1*x782)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r20*x786))+((cj1*x782))+(((-1.0)*r01*x781*x783))+(((-1.0)*r00*x783*x784))+((r21*sj1*x781))+(((-1.0)*sj1*x785)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x786))+((cj1*r20*x784))+(((-1.0)*cj4*r22*x783))+((cj1*r21*x781))+((r01*sj1*x781))+(((-1.0)*sj1*x782))))+IKsqr((((r20*x786))+((cj1*x782))+(((-1.0)*r01*x781*x783))+(((-1.0)*r00*x783*x784))+((r21*sj1*x781))+(((-1.0)*sj1*x785))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r00*x786))+((cj1*r20*x784))+(((-1.0)*cj4*r22*x783))+((cj1*r21*x781))+((r01*sj1*x781))+(((-1.0)*sj1*x782))), (((r20*x786))+((cj1*x782))+(((-1.0)*r01*x781*x783))+(((-1.0)*r00*x783*x784))+((r21*sj1*x781))+(((-1.0)*sj1*x785))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x787=IKcos(j2);
IkReal x788=IKsin(j2);
IkReal x789=(cj3*sj4);
IkReal x790=((1.0)*cj4);
IkReal x791=(r00*sj5);
IkReal x792=(cj3*cj4);
IkReal x793=(cj5*sj4);
IkReal x794=((0.07155)*sj5);
IkReal x795=(cj5*r20);
IkReal x796=(cj5*r00);
IkReal x797=(r20*sj5);
IkReal x798=(cj1*x787);
IkReal x799=(sj1*x787);
IkReal x800=(cj1*x788);
IkReal x801=((1.0)*sj3*sj5);
IkReal x802=(sj1*x788);
IkReal x803=((1.0)*x802);
evalcond[0]=(((r01*x793))+((sj4*x791))+x798+(((-1.0)*x803))+(((-1.0)*r02*x790)));
evalcond[1]=((((-1.0)*x800))+((sj4*x797))+((r21*x793))+(((-1.0)*r22*x790))+(((-1.0)*x799)));
evalcond[2]=((((-0.27155)*x799))+(((-0.27155)*x800))+(((0.3571)*cj1))+(((-0.07155)*x795))+((r21*x794))+(((-1.0)*pz)));
evalcond[3]=(((r01*x794))+(((0.3571)*sj1))+(((-0.27155)*x802))+(((-0.07155)*x796))+(((-1.0)*px))+(((0.27155)*x798)));
evalcond[4]=((((-1.0)*r01*x801))+((r02*x789))+x799+x800+((cj5*r01*x792))+((x791*x792))+((sj3*x796)));
evalcond[5]=((((-1.0)*r21*x801))+((r22*x789))+((x792*x797))+x798+(((-1.0)*x803))+((cj5*r21*x792))+((sj3*x795)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x804=((1.0)*r20);
IkReal x805=((1.0)*cj4);
IkReal x806=(((r00*sj4*sj5))+((cj5*r01*sj4))+(((-1.0)*r02*x805)));
j3eval[0]=x806;
j3eval[1]=IKsign(x806);
j3eval[2]=((IKabs(((((-1.0)*cj4*sj5*x804))+(((-1.0)*r22*sj4))+(((-1.0)*cj5*r21*x805)))))+(IKabs(((((-1.0)*cj5*x804))+((r21*sj5))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x807=((1.0)*sj4);
IkReal x808=((1.0)*r00);
IkReal x809=(((cj4*r22))+(((-1.0)*r20*sj5*x807))+(((-1.0)*cj5*r21*x807)));
j3eval[0]=x809;
j3eval[1]=IKsign(x809);
j3eval[2]=((IKabs(((((-1.0)*cj5*x808))+((r01*sj5)))))+(IKabs(((((-1.0)*r02*x807))+(((-1.0)*cj4*cj5*r01))+(((-1.0)*cj4*sj5*x808))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x810=cj4*cj4;
IkReal x811=cj5*cj5;
IkReal x812=r10*r10;
IkReal x813=r11*r11;
IkReal x814=r12*r12;
IkReal x815=(cj5*r10);
IkReal x816=((2.0)*sj5);
IkReal x817=(cj4*r10);
IkReal x818=(r12*sj4);
IkReal x819=((1.0)*x810);
IkReal x820=(cj4*cj5*r11);
IkReal x821=(x811*x813);
IkReal x822=(x811*x812);
IkReal x823=((((-1.0)*x812*x819))+((r11*x815*x816))+(((-1.0)*x819*x821))+((x810*x814))+(((-2.0)*x818*x820))+(((-1.0)*x813))+(((-1.0)*x814))+((x810*x822))+(((-1.0)*x822))+(((-1.0)*r11*x810*x815*x816))+(((-1.0)*x816*x817*x818))+x821);
j3eval[0]=x823;
j3eval[1]=((IKabs((((sj5*x817))+x818+x820)))+(IKabs((((r11*sj5))+(((-1.0)*x815))))));
j3eval[2]=IKsign(x823);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x824=cj4*cj4;
IkReal x825=cj5*cj5;
IkReal x826=r10*r10;
IkReal x827=r11*r11;
IkReal x828=r12*r12;
IkReal x829=(cj5*r10);
IkReal x830=((2.0)*sj5);
IkReal x831=(cj5*r11);
IkReal x832=((1.0)*x824);
IkReal x833=(cj4*r12*sj4);
IkReal x834=(x825*x827);
IkReal x835=(x825*x826);
CheckValue<IkReal> x836=IKPowWithIntegerCheck(IKsign((((x824*x835))+(((-1.0)*x832*x834))+(((-1.0)*r11*x824*x829*x830))+(((-1.0)*r10*x830*x833))+((x824*x828))+(((-1.0)*x826*x832))+(((-2.0)*x831*x833))+(((-1.0)*x827))+(((-1.0)*x828))+(((-1.0)*x835))+x834+((r11*x829*x830)))),-1);
if(!x836.valid){
continue;
}
CheckValue<IkReal> x837 = IKatan2WithCheck(IkReal((((cj4*x831))+((r12*sj4))+((cj4*r10*sj5)))),IkReal((((r11*sj5))+(((-1.0)*x829)))),IKFAST_ATAN2_MAGTHRESH);
if(!x837.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x836.value)))+(x837.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x838=IKsin(j3);
IkReal x839=IKcos(j3);
IkReal x840=(cj4*r10);
IkReal x841=(cj4*r11);
IkReal x842=(cj5*x838);
IkReal x843=(sj5*x838);
IkReal x844=(sj4*x838);
IkReal x845=(sj5*x839);
IkReal x846=((1.0)*cj5*x839);
evalcond[0]=(((r22*x844))+(((-1.0)*r20*x846))+((r21*x845))+((cj4*r21*x842))+((cj4*r20*x843)));
evalcond[1]=(((cj4*r01*x842))+((r02*x844))+((r01*x845))+(((-1.0)*r00*x846))+((cj4*r00*x843)));
evalcond[2]=(((x840*x845))+((cj5*x839*x841))+((r10*x842))+((r12*sj4*x839))+(((-1.0)*r11*x843)));
evalcond[3]=((1.0)+((x840*x843))+(((-1.0)*r10*x846))+((r12*x844))+((r11*x845))+((x841*x842)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x847=((0.76043125175021)*sj4);
IkReal x848=((0.76043125175021)*cj4);
IkReal x849=((0.200364043685242)*sj5);
IkReal x850=((0.200364043685242)*cj5);
if( IKabs(((((-1.0)*r00*sj5*x847))+(((-2.80033604032484)*px))+(((-1.0)*r00*x850))+((r02*x848))+((r01*x849))+(((-1.0)*cj5*r01*x847)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.80033604032484)*pz))+(((-1.0)*r21*x849))+(((-1.0)*r22*x848))+((r20*sj5*x847))+((cj5*r21*x847))+((r20*x850)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*sj5*x847))+(((-2.80033604032484)*px))+(((-1.0)*r00*x850))+((r02*x848))+((r01*x849))+(((-1.0)*cj5*r01*x847))))+IKsqr(((((2.80033604032484)*pz))+(((-1.0)*r21*x849))+(((-1.0)*r22*x848))+((r20*sj5*x847))+((cj5*r21*x847))+((r20*x850))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*r00*sj5*x847))+(((-2.80033604032484)*px))+(((-1.0)*r00*x850))+((r02*x848))+((r01*x849))+(((-1.0)*cj5*r01*x847))), ((((2.80033604032484)*pz))+(((-1.0)*r21*x849))+(((-1.0)*r22*x848))+((r20*sj5*x847))+((cj5*r21*x847))+((r20*x850))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x851=((0.27155)*sj4);
IkReal x852=(r00*sj5);
IkReal x853=((0.07155)*sj5);
IkReal x854=((0.27155)*cj4);
IkReal x855=(cj5*r20);
IkReal x856=(cj3*cj5);
IkReal x857=((0.27155)*sj3);
IkReal x858=(r20*sj5);
IkReal x859=(cj5*r00);
IkReal x860=((0.07155)*x859);
IkReal x861=((0.3571)*(IKsin(j1)));
IkReal x862=(r01*x853);
IkReal x863=((0.07155)*x855);
IkReal x864=(r21*x853);
IkReal x865=((0.3571)*(IKcos(j1)));
IkReal x866=(sj5*x857);
IkReal x867=(x865+x864);
IkReal x868=(px+x861+x860);
evalcond[0]=((((-1.0)*x862))+((cj5*r01*x851))+(((-1.0)*r02*x854))+((x851*x852))+x868);
evalcond[1]=((((-1.0)*x863))+(((-1.0)*cj5*r21*x851))+(((-1.0)*pz))+((r22*x854))+x867+(((-1.0)*x851*x858)));
evalcond[2]=((((-1.0)*x862))+((r21*x866))+(((-1.0)*cj3*x854*x858))+(((-1.0)*cj3*r22*x851))+(((-1.0)*r21*x854*x856))+(((-1.0)*x855*x857))+x868);
evalcond[3]=((((-1.0)*x867))+(((-1.0)*r01*x866))+((cj3*x852*x854))+pz+((x857*x859))+x863+((r01*x854*x856))+((cj3*r02*x851)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x869=(cj4*r02);
IkReal x870=(cj5*sj4);
IkReal x871=((1.0)*sj1);
IkReal x872=(sj4*sj5);
IkReal x873=((1.0)*cj4*r22);
if( IKabs((((cj1*r20*x872))+((sj1*x869))+((cj1*r21*x870))+(((-1.0)*r00*x871*x872))+(((-1.0)*cj1*x873))+(((-1.0)*r01*x870*x871)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*r00*x872))+(((-1.0)*cj4*r22*x871))+((cj1*r01*x870))+(((-1.0)*cj1*x869))+((r20*sj1*x872))+((r21*sj1*x870)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*r20*x872))+((sj1*x869))+((cj1*r21*x870))+(((-1.0)*r00*x871*x872))+(((-1.0)*cj1*x873))+(((-1.0)*r01*x870*x871))))+IKsqr((((cj1*r00*x872))+(((-1.0)*cj4*r22*x871))+((cj1*r01*x870))+(((-1.0)*cj1*x869))+((r20*sj1*x872))+((r21*sj1*x870))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*r20*x872))+((sj1*x869))+((cj1*r21*x870))+(((-1.0)*r00*x871*x872))+(((-1.0)*cj1*x873))+(((-1.0)*r01*x870*x871))), (((cj1*r00*x872))+(((-1.0)*cj4*r22*x871))+((cj1*r01*x870))+(((-1.0)*cj1*x869))+((r20*sj1*x872))+((r21*sj1*x870))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x874=IKcos(j2);
IkReal x875=IKsin(j2);
IkReal x876=(cj3*sj4);
IkReal x877=((1.0)*cj4);
IkReal x878=(cj5*sj4);
IkReal x879=((0.07155)*sj5);
IkReal x880=(cj5*r20);
IkReal x881=(sj4*sj5);
IkReal x882=(cj5*r00);
IkReal x883=(cj1*x874);
IkReal x884=(cj3*cj4*sj5);
IkReal x885=(sj1*x874);
IkReal x886=((0.27155)*x875);
IkReal x887=((1.0)*sj3*sj5);
IkReal x888=(sj1*x875);
IkReal x889=(cj3*cj4*cj5);
IkReal x890=((1.0)*x885);
IkReal x891=((1.0)*cj1*x875);
IkReal x892=(x890+x891);
evalcond[0]=(((r01*x878))+((r00*x881))+(((-1.0)*x883))+(((-1.0)*r02*x877))+x888);
evalcond[1]=(((r21*x878))+((r20*x881))+(((-1.0)*x892))+(((-1.0)*r22*x877)));
evalcond[2]=(((r21*x879))+(((0.3571)*cj1))+(((-1.0)*pz))+(((-0.27155)*x885))+(((-1.0)*cj1*x886))+(((-0.07155)*x880)));
evalcond[3]=(((sj1*x886))+((r01*x879))+(((-1.0)*px))+(((-0.3571)*sj1))+(((-0.27155)*x883))+(((-0.07155)*x882)));
evalcond[4]=(((r20*x884))+(((-1.0)*x888))+((r22*x876))+((sj3*x880))+x883+((r21*x889))+(((-1.0)*r21*x887)));
evalcond[5]=(((r00*x884))+((r01*x889))+(((-1.0)*x892))+((sj3*x882))+((r02*x876))+(((-1.0)*r01*x887)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x893=((1.0)*sj4);
IkReal x894=((1.0)*r00);
CheckValue<IkReal> x895 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*x894)))),IkReal(((((-1.0)*cj4*sj5*x894))+(((-1.0)*cj4*cj5*r01))+(((-1.0)*r02*x893)))),IKFAST_ATAN2_MAGTHRESH);
if(!x895.valid){
continue;
}
CheckValue<IkReal> x896=IKPowWithIntegerCheck(IKsign((((cj4*r22))+(((-1.0)*r20*sj5*x893))+(((-1.0)*cj5*r21*x893)))),-1);
if(!x896.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x895.value)+(((1.5707963267949)*(x896.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x897=IKsin(j3);
IkReal x898=IKcos(j3);
IkReal x899=(cj4*r10);
IkReal x900=(cj4*r11);
IkReal x901=(cj5*x897);
IkReal x902=(sj5*x897);
IkReal x903=(sj4*x897);
IkReal x904=(sj5*x898);
IkReal x905=((1.0)*cj5*x898);
evalcond[0]=(((r21*x904))+(((-1.0)*r20*x905))+((r22*x903))+((cj4*r20*x902))+((cj4*r21*x901)));
evalcond[1]=(((cj4*r00*x902))+((r01*x904))+((r02*x903))+(((-1.0)*r00*x905))+((cj4*r01*x901)));
evalcond[2]=((((-1.0)*r11*x902))+((r12*sj4*x898))+((x899*x904))+((r10*x901))+((cj5*x898*x900)));
evalcond[3]=((1.0)+((r11*x904))+((x900*x901))+((r12*x903))+((x899*x902))+(((-1.0)*r10*x905)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x906=((0.76043125175021)*sj4);
IkReal x907=((0.76043125175021)*cj4);
IkReal x908=((0.200364043685242)*sj5);
IkReal x909=((0.200364043685242)*cj5);
if( IKabs(((((-2.80033604032484)*px))+((r01*x908))+(((-1.0)*cj5*r01*x906))+((r02*x907))+(((-1.0)*r00*x909))+(((-1.0)*r00*sj5*x906)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r22*x907))+((cj5*r21*x906))+(((2.80033604032484)*pz))+((r20*x909))+((r20*sj5*x906))+(((-1.0)*r21*x908)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.80033604032484)*px))+((r01*x908))+(((-1.0)*cj5*r01*x906))+((r02*x907))+(((-1.0)*r00*x909))+(((-1.0)*r00*sj5*x906))))+IKsqr(((((-1.0)*r22*x907))+((cj5*r21*x906))+(((2.80033604032484)*pz))+((r20*x909))+((r20*sj5*x906))+(((-1.0)*r21*x908))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-2.80033604032484)*px))+((r01*x908))+(((-1.0)*cj5*r01*x906))+((r02*x907))+(((-1.0)*r00*x909))+(((-1.0)*r00*sj5*x906))), ((((-1.0)*r22*x907))+((cj5*r21*x906))+(((2.80033604032484)*pz))+((r20*x909))+((r20*sj5*x906))+(((-1.0)*r21*x908))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x910=((0.27155)*sj4);
IkReal x911=(r00*sj5);
IkReal x912=((0.07155)*sj5);
IkReal x913=((0.27155)*cj4);
IkReal x914=(cj5*r20);
IkReal x915=(cj3*cj5);
IkReal x916=((0.27155)*sj3);
IkReal x917=(r20*sj5);
IkReal x918=(cj5*r00);
IkReal x919=((0.07155)*x918);
IkReal x920=((0.3571)*(IKsin(j1)));
IkReal x921=(r01*x912);
IkReal x922=((0.07155)*x914);
IkReal x923=(r21*x912);
IkReal x924=((0.3571)*(IKcos(j1)));
IkReal x925=(sj5*x916);
IkReal x926=(x924+x923);
IkReal x927=(px+x920+x919);
evalcond[0]=((((-1.0)*x921))+((x910*x911))+(((-1.0)*r02*x913))+((cj5*r01*x910))+x927);
evalcond[1]=((((-1.0)*x922))+(((-1.0)*cj5*r21*x910))+(((-1.0)*pz))+(((-1.0)*x910*x917))+((r22*x913))+x926);
evalcond[2]=((((-1.0)*x921))+((r21*x925))+(((-1.0)*cj3*r22*x910))+(((-1.0)*r21*x913*x915))+(((-1.0)*x914*x916))+(((-1.0)*cj3*x913*x917))+x927);
evalcond[3]=((((-1.0)*x926))+((r01*x913*x915))+pz+((x916*x918))+(((-1.0)*r01*x925))+((cj3*r02*x910))+((cj3*x911*x913))+x922);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x928=(cj4*r02);
IkReal x929=(cj5*sj4);
IkReal x930=((1.0)*sj1);
IkReal x931=(sj4*sj5);
IkReal x932=((1.0)*cj4*r22);
if( IKabs((((sj1*x928))+(((-1.0)*r01*x929*x930))+(((-1.0)*r00*x930*x931))+((cj1*r20*x931))+((cj1*r21*x929))+(((-1.0)*cj1*x932)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj4*r22*x930))+(((-1.0)*cj1*x928))+((r20*sj1*x931))+((cj1*r00*x931))+((cj1*r01*x929))+((r21*sj1*x929)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj1*x928))+(((-1.0)*r01*x929*x930))+(((-1.0)*r00*x930*x931))+((cj1*r20*x931))+((cj1*r21*x929))+(((-1.0)*cj1*x932))))+IKsqr(((((-1.0)*cj4*r22*x930))+(((-1.0)*cj1*x928))+((r20*sj1*x931))+((cj1*r00*x931))+((cj1*r01*x929))+((r21*sj1*x929))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((sj1*x928))+(((-1.0)*r01*x929*x930))+(((-1.0)*r00*x930*x931))+((cj1*r20*x931))+((cj1*r21*x929))+(((-1.0)*cj1*x932))), ((((-1.0)*cj4*r22*x930))+(((-1.0)*cj1*x928))+((r20*sj1*x931))+((cj1*r00*x931))+((cj1*r01*x929))+((r21*sj1*x929))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x933=IKcos(j2);
IkReal x934=IKsin(j2);
IkReal x935=(cj3*sj4);
IkReal x936=((1.0)*cj4);
IkReal x937=(cj5*sj4);
IkReal x938=((0.07155)*sj5);
IkReal x939=(cj5*r20);
IkReal x940=(sj4*sj5);
IkReal x941=(cj5*r00);
IkReal x942=(cj1*x933);
IkReal x943=(cj3*cj4*sj5);
IkReal x944=(sj1*x933);
IkReal x945=((0.27155)*x934);
IkReal x946=((1.0)*sj3*sj5);
IkReal x947=(sj1*x934);
IkReal x948=(cj3*cj4*cj5);
IkReal x949=((1.0)*x944);
IkReal x950=((1.0)*cj1*x934);
IkReal x951=(x950+x949);
evalcond[0]=((((-1.0)*r02*x936))+(((-1.0)*x942))+((r00*x940))+((r01*x937))+x947);
evalcond[1]=((((-1.0)*r22*x936))+((r21*x937))+(((-1.0)*x951))+((r20*x940)));
evalcond[2]=((((-1.0)*cj1*x945))+((r21*x938))+(((0.3571)*cj1))+(((-1.0)*pz))+(((-0.07155)*x939))+(((-0.27155)*x944)));
evalcond[3]=(((sj1*x945))+(((-1.0)*px))+(((-0.3571)*sj1))+(((-0.07155)*x941))+((r01*x938))+(((-0.27155)*x942)));
evalcond[4]=(((r21*x948))+((r22*x935))+(((-1.0)*r21*x946))+(((-1.0)*x947))+x942+((sj3*x939))+((r20*x943)));
evalcond[5]=((((-1.0)*r01*x946))+((sj3*x941))+((r01*x948))+((r00*x943))+(((-1.0)*x951))+((r02*x935)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x952=((1.0)*r20);
IkReal x953=((1.0)*cj4);
CheckValue<IkReal> x954=IKPowWithIntegerCheck(IKsign((((r00*sj4*sj5))+((cj5*r01*sj4))+(((-1.0)*r02*x953)))),-1);
if(!x954.valid){
continue;
}
CheckValue<IkReal> x955 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*x952)))),IkReal(((((-1.0)*cj4*sj5*x952))+(((-1.0)*r22*sj4))+(((-1.0)*cj5*r21*x953)))),IKFAST_ATAN2_MAGTHRESH);
if(!x955.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x954.value)))+(x955.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x956=IKsin(j3);
IkReal x957=IKcos(j3);
IkReal x958=(cj4*r10);
IkReal x959=(cj4*r11);
IkReal x960=(cj5*x956);
IkReal x961=(sj5*x956);
IkReal x962=(sj4*x956);
IkReal x963=(sj5*x957);
IkReal x964=((1.0)*cj5*x957);
evalcond[0]=((((-1.0)*r20*x964))+((r21*x963))+((cj4*r20*x961))+((cj4*r21*x960))+((r22*x962)));
evalcond[1]=((((-1.0)*r00*x964))+((r01*x963))+((cj4*r01*x960))+((r02*x962))+((cj4*r00*x961)));
evalcond[2]=((((-1.0)*r11*x961))+((cj5*x957*x959))+((x958*x963))+((r12*sj4*x957))+((r10*x960)));
evalcond[3]=((1.0)+(((-1.0)*r10*x964))+((r11*x963))+((x959*x960))+((x958*x961))+((r12*x962)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x965=((0.76043125175021)*sj4);
IkReal x966=((0.76043125175021)*cj4);
IkReal x967=((0.200364043685242)*sj5);
IkReal x968=((0.200364043685242)*cj5);
if( IKabs(((((-2.80033604032484)*px))+(((-1.0)*r00*sj5*x965))+(((-1.0)*cj5*r01*x965))+(((-1.0)*r00*x968))+((r01*x967))+((r02*x966)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.80033604032484)*pz))+(((-1.0)*r21*x967))+((cj5*r21*x965))+((r20*sj5*x965))+((r20*x968))+(((-1.0)*r22*x966)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.80033604032484)*px))+(((-1.0)*r00*sj5*x965))+(((-1.0)*cj5*r01*x965))+(((-1.0)*r00*x968))+((r01*x967))+((r02*x966))))+IKsqr(((((2.80033604032484)*pz))+(((-1.0)*r21*x967))+((cj5*r21*x965))+((r20*sj5*x965))+((r20*x968))+(((-1.0)*r22*x966))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-2.80033604032484)*px))+(((-1.0)*r00*sj5*x965))+(((-1.0)*cj5*r01*x965))+(((-1.0)*r00*x968))+((r01*x967))+((r02*x966))), ((((2.80033604032484)*pz))+(((-1.0)*r21*x967))+((cj5*r21*x965))+((r20*sj5*x965))+((r20*x968))+(((-1.0)*r22*x966))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x969=((0.27155)*sj4);
IkReal x970=(r00*sj5);
IkReal x971=((0.07155)*sj5);
IkReal x972=((0.27155)*cj4);
IkReal x973=(cj5*r20);
IkReal x974=(cj3*cj5);
IkReal x975=((0.27155)*sj3);
IkReal x976=(r20*sj5);
IkReal x977=(cj5*r00);
IkReal x978=((0.07155)*x977);
IkReal x979=((0.3571)*(IKsin(j1)));
IkReal x980=(r01*x971);
IkReal x981=((0.07155)*x973);
IkReal x982=(r21*x971);
IkReal x983=((0.3571)*(IKcos(j1)));
IkReal x984=(sj5*x975);
IkReal x985=(x982+x983);
IkReal x986=(px+x979+x978);
evalcond[0]=((((-1.0)*x980))+((x969*x970))+((cj5*r01*x969))+(((-1.0)*r02*x972))+x986);
evalcond[1]=((((-1.0)*x981))+(((-1.0)*x969*x976))+((r22*x972))+(((-1.0)*pz))+(((-1.0)*cj5*r21*x969))+x985);
evalcond[2]=((((-1.0)*x980))+(((-1.0)*cj3*r22*x969))+((r21*x984))+(((-1.0)*cj3*x972*x976))+(((-1.0)*r21*x972*x974))+x986+(((-1.0)*x973*x975)));
evalcond[3]=((((-1.0)*x985))+((x975*x977))+((cj3*r02*x969))+(((-1.0)*r01*x984))+((r01*x972*x974))+pz+((cj3*x970*x972))+x981);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x987=(cj4*r02);
IkReal x988=(cj5*sj4);
IkReal x989=((1.0)*sj1);
IkReal x990=(sj4*sj5);
IkReal x991=((1.0)*cj4*r22);
if( IKabs((((cj1*r21*x988))+(((-1.0)*r00*x989*x990))+((cj1*r20*x990))+((sj1*x987))+(((-1.0)*r01*x988*x989))+(((-1.0)*cj1*x991)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*r01*x988))+((r21*sj1*x988))+((cj1*r00*x990))+(((-1.0)*cj1*x987))+((r20*sj1*x990))+(((-1.0)*cj4*r22*x989)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*r21*x988))+(((-1.0)*r00*x989*x990))+((cj1*r20*x990))+((sj1*x987))+(((-1.0)*r01*x988*x989))+(((-1.0)*cj1*x991))))+IKsqr((((cj1*r01*x988))+((r21*sj1*x988))+((cj1*r00*x990))+(((-1.0)*cj1*x987))+((r20*sj1*x990))+(((-1.0)*cj4*r22*x989))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*r21*x988))+(((-1.0)*r00*x989*x990))+((cj1*r20*x990))+((sj1*x987))+(((-1.0)*r01*x988*x989))+(((-1.0)*cj1*x991))), (((cj1*r01*x988))+((r21*sj1*x988))+((cj1*r00*x990))+(((-1.0)*cj1*x987))+((r20*sj1*x990))+(((-1.0)*cj4*r22*x989))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x992=IKcos(j2);
IkReal x993=IKsin(j2);
IkReal x994=(cj3*sj4);
IkReal x995=((1.0)*cj4);
IkReal x996=(cj5*sj4);
IkReal x997=((0.07155)*sj5);
IkReal x998=(cj5*r20);
IkReal x999=(sj4*sj5);
IkReal x1000=(cj5*r00);
IkReal x1001=(cj1*x992);
IkReal x1002=(cj3*cj4*sj5);
IkReal x1003=(sj1*x992);
IkReal x1004=((0.27155)*x993);
IkReal x1005=((1.0)*sj3*sj5);
IkReal x1006=(sj1*x993);
IkReal x1007=(cj3*cj4*cj5);
IkReal x1008=((1.0)*x1003);
IkReal x1009=((1.0)*cj1*x993);
IkReal x1010=(x1009+x1008);
evalcond[0]=((((-1.0)*x1001))+x1006+((r01*x996))+((r00*x999))+(((-1.0)*r02*x995)));
evalcond[1]=((((-1.0)*r22*x995))+(((-1.0)*x1010))+((r20*x999))+((r21*x996)));
evalcond[2]=((((-0.27155)*x1003))+(((-0.07155)*x998))+(((0.3571)*cj1))+(((-1.0)*pz))+(((-1.0)*cj1*x1004))+((r21*x997)));
evalcond[3]=((((-0.27155)*x1001))+((r01*x997))+(((-0.07155)*x1000))+((sj1*x1004))+(((-1.0)*px))+(((-0.3571)*sj1)));
evalcond[4]=((((-1.0)*x1006))+x1001+(((-1.0)*r21*x1005))+((sj3*x998))+((r21*x1007))+((r20*x1002))+((r22*x994)));
evalcond[5]=(((r01*x1007))+(((-1.0)*x1010))+((r02*x994))+((sj3*x1000))+(((-1.0)*r01*x1005))+((r00*x1002)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1, j2, j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1011=((1.0)*sj0);
IkReal x1012=(cj0*sj5);
IkReal x1013=((1.0)*cj4);
IkReal x1014=((1.0)*cj0*cj5);
CheckValue<IkReal> x1015=IKPowWithIntegerCheck(IKsign(((((-1.0)*r22*x1013))+((cj5*r21*sj4))+((r20*sj4*sj5)))),-1);
if(!x1015.valid){
continue;
}
CheckValue<IkReal> x1016 = IKatan2WithCheck(IkReal((((r11*sj0*sj5))+(((-1.0)*r00*x1014))+((r01*x1012))+(((-1.0)*cj5*r10*x1011)))),IkReal(((((-1.0)*r00*x1012*x1013))+(((-1.0)*cj4*cj5*r11*x1011))+(((-1.0)*r12*sj4*x1011))+(((-1.0)*cj4*r10*sj5*x1011))+(((-1.0)*cj0*r02*sj4))+(((-1.0)*cj0*cj5*r01*x1013)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1016.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1015.value)))+(x1016.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x1017=IKsin(j3);
IkReal x1018=IKcos(j3);
IkReal x1019=(sj4*x1017);
IkReal x1020=(sj5*x1018);
IkReal x1021=(cj4*cj5*x1017);
IkReal x1022=(cj4*sj5*x1017);
IkReal x1023=((1.0)*cj5*x1018);
evalcond[0]=(((r20*x1022))+((r21*x1020))+((r21*x1021))+((r22*x1019))+(((-1.0)*r20*x1023)));
evalcond[1]=(((r01*x1021))+((r01*x1020))+sj0+((r02*x1019))+(((-1.0)*r00*x1023))+((r00*x1022)));
evalcond[2]=(((r11*x1021))+((r11*x1020))+(((-1.0)*r10*x1023))+((r12*x1019))+(((-1.0)*cj0))+((r10*x1022)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
j1eval[0]=sj0;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
j1eval[0]=cj0;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1024=((0.76043125175021)*sj4);
IkReal x1025=((0.200364043685242)*sj5);
IkReal x1026=((0.200364043685242)*cj5);
IkReal x1027=((0.76043125175021)*cj4);
if( IKabs(((((-1.0)*r12*x1027))+(((-1.0)*r11*x1025))+(((2.80033604032484)*py))+((r10*sj5*x1024))+((cj5*r11*x1024))+((r10*x1026)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r22*x1027))+((r20*x1026))+(((2.80033604032484)*pz))+((r20*sj5*x1024))+(((-1.0)*r21*x1025))+((cj5*r21*x1024)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r12*x1027))+(((-1.0)*r11*x1025))+(((2.80033604032484)*py))+((r10*sj5*x1024))+((cj5*r11*x1024))+((r10*x1026))))+IKsqr(((((-1.0)*r22*x1027))+((r20*x1026))+(((2.80033604032484)*pz))+((r20*sj5*x1024))+(((-1.0)*r21*x1025))+((cj5*r21*x1024))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*r12*x1027))+(((-1.0)*r11*x1025))+(((2.80033604032484)*py))+((r10*sj5*x1024))+((cj5*r11*x1024))+((r10*x1026))), ((((-1.0)*r22*x1027))+((r20*x1026))+(((2.80033604032484)*pz))+((r20*sj5*x1024))+(((-1.0)*r21*x1025))+((cj5*r21*x1024))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1028=((1.0)*pz);
IkReal x1029=((0.27155)*sj5);
IkReal x1030=((0.07155)*cj5);
IkReal x1031=(cj3*cj4);
IkReal x1032=((0.27155)*sj4);
IkReal x1033=((0.27155)*cj4);
IkReal x1034=((0.07155)*sj5);
IkReal x1035=(cj5*r21);
IkReal x1036=(r10*x1030);
IkReal x1037=(r11*x1034);
IkReal x1038=((0.3571)*(IKsin(j1)));
IkReal x1039=(r21*x1034);
IkReal x1040=((0.3571)*(IKcos(j1)));
IkReal x1041=(r20*x1030);
IkReal x1042=((0.27155)*cj5*r11);
IkReal x1043=((0.27155)*cj5*sj3);
IkReal x1044=(x1041+x1028);
IkReal x1045=(x1038+x1037);
IkReal x1046=(x1040+x1039);
evalcond[0]=(((r22*x1033))+x1046+(((-1.0)*x1032*x1035))+(((-1.0)*r20*sj4*x1029))+(((-1.0)*x1044)));
evalcond[1]=((((-1.0)*x1036))+x1045+(((-1.0)*cj5*r11*x1032))+(((-1.0)*py))+((r12*x1033))+(((-1.0)*r10*sj4*x1029)));
evalcond[2]=((((-1.0)*r21*sj3*x1029))+x1036+(((0.27155)*x1031*x1035))+((cj3*r22*x1032))+((r20*x1043))+py+((r20*x1029*x1031))+(((-1.0)*x1045)));
evalcond[3]=(x1046+(((-1.0)*r11*sj3*x1029))+((cj3*r12*x1032))+((x1031*x1042))+((r10*x1043))+((r10*x1029*x1031))+(((-1.0)*x1044)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1047=(cj1*cj4);
IkReal x1048=((1.0)*r22);
IkReal x1049=(cj4*sj1);
IkReal x1050=(sj4*sj5);
IkReal x1051=(cj1*cj5*sj4);
IkReal x1052=(cj5*sj1*sj4);
if( IKabs(((((-1.0)*r12*x1049))+((r11*x1052))+((cj1*r20*x1050))+((r10*sj1*x1050))+((r21*x1051))+(((-1.0)*x1047*x1048)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1051))+(((-1.0)*cj1*r10*x1050))+(((-1.0)*x1048*x1049))+((r20*sj1*x1050))+((r21*x1052))+((r12*x1047)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r12*x1049))+((r11*x1052))+((cj1*r20*x1050))+((r10*sj1*x1050))+((r21*x1051))+(((-1.0)*x1047*x1048))))+IKsqr(((((-1.0)*r11*x1051))+(((-1.0)*cj1*r10*x1050))+(((-1.0)*x1048*x1049))+((r20*sj1*x1050))+((r21*x1052))+((r12*x1047))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r12*x1049))+((r11*x1052))+((cj1*r20*x1050))+((r10*sj1*x1050))+((r21*x1051))+(((-1.0)*x1047*x1048))), ((((-1.0)*r11*x1051))+(((-1.0)*cj1*r10*x1050))+(((-1.0)*x1048*x1049))+((r20*sj1*x1050))+((r21*x1052))+((r12*x1047))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1053=IKcos(j2);
IkReal x1054=IKsin(j2);
IkReal x1055=((1.0)*cj4);
IkReal x1056=((0.07155)*cj5);
IkReal x1057=(cj5*sj4);
IkReal x1058=(cj3*cj4);
IkReal x1059=(r20*sj5);
IkReal x1060=(r10*sj5);
IkReal x1061=((0.07155)*sj5);
IkReal x1062=(cj5*sj3);
IkReal x1063=(cj3*sj4);
IkReal x1064=(cj1*x1053);
IkReal x1065=((1.0)*sj3*sj5);
IkReal x1066=(cj1*x1054);
IkReal x1067=(sj1*x1053);
IkReal x1068=(sj1*x1054);
IkReal x1069=((1.0)*x1068);
evalcond[0]=(((r11*x1057))+x1064+(((-1.0)*r12*x1055))+((sj4*x1060))+(((-1.0)*x1069)));
evalcond[1]=((((-1.0)*r22*x1055))+((r21*x1057))+(((-1.0)*x1067))+(((-1.0)*x1066))+((sj4*x1059)));
evalcond[2]=((((0.3571)*cj1))+(((-1.0)*pz))+(((-0.27155)*x1067))+(((-0.27155)*x1066))+((r21*x1061))+(((-1.0)*r20*x1056)));
evalcond[3]=((((0.27155)*x1064))+(((0.3571)*sj1))+(((-1.0)*r10*x1056))+(((-1.0)*py))+(((-0.27155)*x1068))+((r11*x1061)));
evalcond[4]=(((r12*x1063))+x1067+x1066+((cj5*r11*x1058))+(((-1.0)*r11*x1065))+((r10*x1062))+((x1058*x1060)));
evalcond[5]=((((-1.0)*r21*x1065))+x1064+((cj5*r21*x1058))+((r20*x1062))+((r22*x1063))+(((-1.0)*x1069))+((x1058*x1059)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1070=((0.76043125175021)*sj4);
IkReal x1071=((0.200364043685242)*sj5);
IkReal x1072=((0.200364043685242)*cj5);
IkReal x1073=((0.76043125175021)*cj4);
if( IKabs(((((-2.80033604032484)*py))+((r12*x1073))+(((-1.0)*r10*x1072))+(((-1.0)*cj5*r11*x1070))+(((-1.0)*r10*sj5*x1070))+((r11*x1071)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj5*r21*x1070))+(((-1.0)*r21*x1071))+(((2.80033604032484)*pz))+(((-1.0)*r22*x1073))+((r20*x1072))+((r20*sj5*x1070)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.80033604032484)*py))+((r12*x1073))+(((-1.0)*r10*x1072))+(((-1.0)*cj5*r11*x1070))+(((-1.0)*r10*sj5*x1070))+((r11*x1071))))+IKsqr((((cj5*r21*x1070))+(((-1.0)*r21*x1071))+(((2.80033604032484)*pz))+(((-1.0)*r22*x1073))+((r20*x1072))+((r20*sj5*x1070))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-2.80033604032484)*py))+((r12*x1073))+(((-1.0)*r10*x1072))+(((-1.0)*cj5*r11*x1070))+(((-1.0)*r10*sj5*x1070))+((r11*x1071))), (((cj5*r21*x1070))+(((-1.0)*r21*x1071))+(((2.80033604032484)*pz))+(((-1.0)*r22*x1073))+((r20*x1072))+((r20*sj5*x1070))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1074=((0.27155)*sj5);
IkReal x1075=((0.07155)*cj5);
IkReal x1076=(cj3*cj4);
IkReal x1077=((0.27155)*sj4);
IkReal x1078=((0.27155)*cj4);
IkReal x1079=((0.07155)*sj5);
IkReal x1080=(cj5*r21);
IkReal x1081=(r10*x1075);
IkReal x1082=((0.3571)*(IKsin(j1)));
IkReal x1083=(r11*x1079);
IkReal x1084=(r20*x1075);
IkReal x1085=(r21*x1079);
IkReal x1086=((0.3571)*(IKcos(j1)));
IkReal x1087=((0.27155)*cj5*r11);
IkReal x1088=((0.27155)*cj5*sj3);
IkReal x1089=(x1086+x1085);
IkReal x1090=(x1082+x1081+py);
evalcond[0]=(x1090+(((-1.0)*r12*x1078))+((r10*sj4*x1074))+((cj5*r11*x1077))+(((-1.0)*x1083)));
evalcond[1]=(x1089+(((-1.0)*pz))+((r22*x1078))+(((-1.0)*x1077*x1080))+(((-1.0)*x1084))+(((-1.0)*r20*sj4*x1074)));
evalcond[2]=(x1090+(((-1.0)*cj3*r22*x1077))+(((-0.27155)*x1076*x1080))+(((-1.0)*x1083))+((r21*sj3*x1074))+(((-1.0)*r20*x1074*x1076))+(((-1.0)*r20*x1088)));
evalcond[3]=(((x1076*x1087))+x1084+((r10*x1074*x1076))+((r10*x1088))+pz+(((-1.0)*r11*sj3*x1074))+((cj3*r12*x1077))+(((-1.0)*x1089)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1091=(cj4*sj1);
IkReal x1092=(cj5*sj4);
IkReal x1093=((1.0)*sj1);
IkReal x1094=(sj4*sj5);
IkReal x1095=((1.0)*cj1*cj4);
if( IKabs(((((-1.0)*r10*x1093*x1094))+((cj1*r21*x1092))+(((-1.0)*r11*x1092*x1093))+((r12*x1091))+((cj1*r20*x1094))+(((-1.0)*r22*x1095)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*r11*x1092))+((r21*sj1*x1092))+(((-1.0)*r12*x1095))+((cj1*r10*x1094))+((r20*sj1*x1094))+(((-1.0)*r22*x1091)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x1093*x1094))+((cj1*r21*x1092))+(((-1.0)*r11*x1092*x1093))+((r12*x1091))+((cj1*r20*x1094))+(((-1.0)*r22*x1095))))+IKsqr((((cj1*r11*x1092))+((r21*sj1*x1092))+(((-1.0)*r12*x1095))+((cj1*r10*x1094))+((r20*sj1*x1094))+(((-1.0)*r22*x1091))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r10*x1093*x1094))+((cj1*r21*x1092))+(((-1.0)*r11*x1092*x1093))+((r12*x1091))+((cj1*r20*x1094))+(((-1.0)*r22*x1095))), (((cj1*r11*x1092))+((r21*sj1*x1092))+(((-1.0)*r12*x1095))+((cj1*r10*x1094))+((r20*sj1*x1094))+(((-1.0)*r22*x1091))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1096=IKcos(j2);
IkReal x1097=IKsin(j2);
IkReal x1098=((1.0)*cj4);
IkReal x1099=((0.07155)*cj5);
IkReal x1100=(cj5*sj4);
IkReal x1101=(cj3*cj4);
IkReal x1102=(r20*sj5);
IkReal x1103=(r10*sj5);
IkReal x1104=((0.07155)*sj5);
IkReal x1105=(cj5*sj3);
IkReal x1106=(cj3*sj4);
IkReal x1107=(cj1*x1096);
IkReal x1108=((1.0)*sj3*sj5);
IkReal x1109=(sj1*x1096);
IkReal x1110=((0.27155)*x1097);
IkReal x1111=(sj1*x1097);
IkReal x1112=((1.0)*x1109);
IkReal x1113=((1.0)*cj1*x1097);
IkReal x1114=(x1113+x1112);
evalcond[0]=(x1111+(((-1.0)*x1107))+((sj4*x1103))+(((-1.0)*r12*x1098))+((r11*x1100)));
evalcond[1]=(((sj4*x1102))+((r21*x1100))+(((-1.0)*x1114))+(((-1.0)*r22*x1098)));
evalcond[2]=((((0.3571)*cj1))+(((-0.27155)*x1109))+(((-1.0)*cj1*x1110))+(((-1.0)*pz))+((r21*x1104))+(((-1.0)*r20*x1099)));
evalcond[3]=((((-0.27155)*x1107))+(((-1.0)*py))+(((-0.3571)*sj1))+(((-1.0)*r10*x1099))+((sj1*x1110))+((r11*x1104)));
evalcond[4]=(x1107+((r20*x1105))+((cj5*r21*x1101))+(((-1.0)*r21*x1108))+((x1101*x1102))+(((-1.0)*x1111))+((r22*x1106)));
evalcond[5]=((((-1.0)*r11*x1108))+((cj5*r11*x1101))+((x1101*x1103))+((r12*x1106))+(((-1.0)*x1114))+((r10*x1105)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1115=((0.76043125175021)*sj4);
IkReal x1116=((0.76043125175021)*cj4);
IkReal x1117=((0.200364043685242)*sj5);
IkReal x1118=((0.200364043685242)*cj5);
if( IKabs(((((-1.0)*r01*x1117))+((r00*sj5*x1115))+(((2.80033604032484)*px))+((cj5*r01*x1115))+((r00*x1118))+(((-1.0)*r02*x1116)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r20*x1118))+((cj5*r21*x1115))+(((2.80033604032484)*pz))+(((-1.0)*r22*x1116))+(((-1.0)*r21*x1117))+((r20*sj5*x1115)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*x1117))+((r00*sj5*x1115))+(((2.80033604032484)*px))+((cj5*r01*x1115))+((r00*x1118))+(((-1.0)*r02*x1116))))+IKsqr((((r20*x1118))+((cj5*r21*x1115))+(((2.80033604032484)*pz))+(((-1.0)*r22*x1116))+(((-1.0)*r21*x1117))+((r20*sj5*x1115))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*r01*x1117))+((r00*sj5*x1115))+(((2.80033604032484)*px))+((cj5*r01*x1115))+((r00*x1118))+(((-1.0)*r02*x1116))), (((r20*x1118))+((cj5*r21*x1115))+(((2.80033604032484)*pz))+(((-1.0)*r22*x1116))+(((-1.0)*r21*x1117))+((r20*sj5*x1115))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1119=((1.0)*pz);
IkReal x1120=((0.27155)*sj4);
IkReal x1121=(r00*sj5);
IkReal x1122=((0.07155)*sj5);
IkReal x1123=((0.27155)*cj4);
IkReal x1124=(cj5*r20);
IkReal x1125=(cj3*cj5);
IkReal x1126=((0.27155)*sj3);
IkReal x1127=(r20*sj5);
IkReal x1128=(cj5*r00);
IkReal x1129=((0.07155)*x1128);
IkReal x1130=(r01*x1122);
IkReal x1131=((0.3571)*(IKsin(j1)));
IkReal x1132=(r21*x1122);
IkReal x1133=((0.3571)*(IKcos(j1)));
IkReal x1134=((0.07155)*x1124);
IkReal x1135=(sj5*x1126);
IkReal x1136=(x1119+x1134);
IkReal x1137=(x1131+x1130);
IkReal x1138=(x1133+x1132);
evalcond[0]=((((-1.0)*cj5*r21*x1120))+x1138+((r22*x1123))+(((-1.0)*x1136))+(((-1.0)*x1120*x1127)));
evalcond[1]=(x1137+(((-1.0)*px))+(((-1.0)*cj5*r01*x1120))+(((-1.0)*x1129))+(((-1.0)*x1120*x1121))+((r02*x1123)));
evalcond[2]=(((r21*x1123*x1125))+x1129+((x1124*x1126))+(((-1.0)*x1137))+px+(((-1.0)*r21*x1135))+((cj3*x1123*x1127))+((cj3*r22*x1120)));
evalcond[3]=(x1138+((cj3*r02*x1120))+(((-1.0)*x1136))+((r01*x1123*x1125))+(((-1.0)*r01*x1135))+((cj3*x1121*x1123))+((x1126*x1128)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1139=(cj5*sj4);
IkReal x1140=(cj4*r02);
IkReal x1141=((1.0)*cj1);
IkReal x1142=(sj4*sj5);
IkReal x1143=((1.0)*cj4*r22);
IkReal x1144=(sj1*x1142);
if( IKabs((((cj1*r20*x1142))+((r01*sj1*x1139))+(((-1.0)*cj4*r22*x1141))+((cj1*r21*x1139))+(((-1.0)*sj1*x1140))+((r00*x1144)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r21*sj1*x1139))+(((-1.0)*r00*x1141*x1142))+((cj1*x1140))+((r20*x1144))+(((-1.0)*sj1*x1143))+(((-1.0)*r01*x1139*x1141)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*r20*x1142))+((r01*sj1*x1139))+(((-1.0)*cj4*r22*x1141))+((cj1*r21*x1139))+(((-1.0)*sj1*x1140))+((r00*x1144))))+IKsqr((((r21*sj1*x1139))+(((-1.0)*r00*x1141*x1142))+((cj1*x1140))+((r20*x1144))+(((-1.0)*sj1*x1143))+(((-1.0)*r01*x1139*x1141))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*r20*x1142))+((r01*sj1*x1139))+(((-1.0)*cj4*r22*x1141))+((cj1*r21*x1139))+(((-1.0)*sj1*x1140))+((r00*x1144))), (((r21*sj1*x1139))+(((-1.0)*r00*x1141*x1142))+((cj1*x1140))+((r20*x1144))+(((-1.0)*sj1*x1143))+(((-1.0)*r01*x1139*x1141))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1145=IKcos(j2);
IkReal x1146=IKsin(j2);
IkReal x1147=(cj3*sj4);
IkReal x1148=((1.0)*cj4);
IkReal x1149=(r00*sj5);
IkReal x1150=(cj3*cj4);
IkReal x1151=(cj5*sj4);
IkReal x1152=((0.07155)*sj5);
IkReal x1153=(cj5*r20);
IkReal x1154=(cj5*r00);
IkReal x1155=(r20*sj5);
IkReal x1156=(cj1*x1145);
IkReal x1157=(sj1*x1145);
IkReal x1158=(cj1*x1146);
IkReal x1159=((1.0)*sj3*sj5);
IkReal x1160=(sj1*x1146);
IkReal x1161=((1.0)*x1160);
evalcond[0]=(((sj4*x1149))+x1156+(((-1.0)*r02*x1148))+(((-1.0)*x1161))+((r01*x1151)));
evalcond[1]=((((-1.0)*x1157))+(((-1.0)*x1158))+((r21*x1151))+(((-1.0)*r22*x1148))+((sj4*x1155)));
evalcond[2]=((((-0.27155)*x1157))+(((-0.27155)*x1158))+(((0.3571)*cj1))+(((-1.0)*pz))+((r21*x1152))+(((-0.07155)*x1153)));
evalcond[3]=((((-0.27155)*x1160))+(((0.3571)*sj1))+(((-1.0)*px))+(((0.27155)*x1156))+(((-0.07155)*x1154))+((r01*x1152)));
evalcond[4]=(x1158+x1157+((x1149*x1150))+(((-1.0)*r01*x1159))+((cj5*r01*x1150))+((sj3*x1154))+((r02*x1147)));
evalcond[5]=(x1156+((r22*x1147))+((sj3*x1153))+((x1150*x1155))+(((-1.0)*r21*x1159))+((cj5*r21*x1150))+(((-1.0)*x1161)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1162=((0.76043125175021)*sj4);
IkReal x1163=((0.76043125175021)*cj4);
IkReal x1164=((0.200364043685242)*sj5);
IkReal x1165=((0.200364043685242)*cj5);
if( IKabs(((((-2.80033604032484)*px))+((r02*x1163))+((r01*x1164))+(((-1.0)*cj5*r01*x1162))+(((-1.0)*r00*x1165))+(((-1.0)*r00*sj5*x1162)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r21*x1164))+((r20*x1165))+(((2.80033604032484)*pz))+((r20*sj5*x1162))+((cj5*r21*x1162))+(((-1.0)*r22*x1163)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.80033604032484)*px))+((r02*x1163))+((r01*x1164))+(((-1.0)*cj5*r01*x1162))+(((-1.0)*r00*x1165))+(((-1.0)*r00*sj5*x1162))))+IKsqr(((((-1.0)*r21*x1164))+((r20*x1165))+(((2.80033604032484)*pz))+((r20*sj5*x1162))+((cj5*r21*x1162))+(((-1.0)*r22*x1163))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-2.80033604032484)*px))+((r02*x1163))+((r01*x1164))+(((-1.0)*cj5*r01*x1162))+(((-1.0)*r00*x1165))+(((-1.0)*r00*sj5*x1162))), ((((-1.0)*r21*x1164))+((r20*x1165))+(((2.80033604032484)*pz))+((r20*sj5*x1162))+((cj5*r21*x1162))+(((-1.0)*r22*x1163))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1166=((0.27155)*sj4);
IkReal x1167=(r00*sj5);
IkReal x1168=((0.07155)*sj5);
IkReal x1169=((0.27155)*cj4);
IkReal x1170=(cj5*r20);
IkReal x1171=(cj3*cj5);
IkReal x1172=((0.27155)*sj3);
IkReal x1173=(r20*sj5);
IkReal x1174=(cj5*r00);
IkReal x1175=((0.07155)*x1174);
IkReal x1176=((0.3571)*(IKsin(j1)));
IkReal x1177=(r01*x1168);
IkReal x1178=((0.07155)*x1170);
IkReal x1179=(r21*x1168);
IkReal x1180=((0.3571)*(IKcos(j1)));
IkReal x1181=(sj5*x1172);
IkReal x1182=(x1180+x1179);
IkReal x1183=(x1176+x1175+px);
evalcond[0]=(x1183+(((-1.0)*r02*x1169))+((x1166*x1167))+(((-1.0)*x1177))+((cj5*r01*x1166)));
evalcond[1]=((((-1.0)*cj5*r21*x1166))+x1182+(((-1.0)*pz))+((r22*x1169))+(((-1.0)*x1178))+(((-1.0)*x1166*x1173)));
evalcond[2]=(x1183+((r21*x1181))+(((-1.0)*cj3*r22*x1166))+(((-1.0)*x1170*x1172))+(((-1.0)*cj3*x1169*x1173))+(((-1.0)*x1177))+(((-1.0)*r21*x1169*x1171)));
evalcond[3]=(((cj3*x1167*x1169))+(((-1.0)*r01*x1181))+x1178+((cj3*r02*x1166))+((r01*x1169*x1171))+(((-1.0)*x1182))+((x1172*x1174))+pz);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1184=(cj4*r02);
IkReal x1185=(cj5*sj4);
IkReal x1186=((1.0)*sj1);
IkReal x1187=(sj4*sj5);
IkReal x1188=((1.0)*cj4*r22);
if( IKabs(((((-1.0)*r01*x1185*x1186))+(((-1.0)*r00*x1186*x1187))+((sj1*x1184))+(((-1.0)*cj1*x1188))+((cj1*r20*x1187))+((cj1*r21*x1185)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r21*sj1*x1185))+(((-1.0)*cj4*r22*x1186))+(((-1.0)*cj1*x1184))+((r20*sj1*x1187))+((cj1*r00*x1187))+((cj1*r01*x1185)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*x1185*x1186))+(((-1.0)*r00*x1186*x1187))+((sj1*x1184))+(((-1.0)*cj1*x1188))+((cj1*r20*x1187))+((cj1*r21*x1185))))+IKsqr((((r21*sj1*x1185))+(((-1.0)*cj4*r22*x1186))+(((-1.0)*cj1*x1184))+((r20*sj1*x1187))+((cj1*r00*x1187))+((cj1*r01*x1185))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r01*x1185*x1186))+(((-1.0)*r00*x1186*x1187))+((sj1*x1184))+(((-1.0)*cj1*x1188))+((cj1*r20*x1187))+((cj1*r21*x1185))), (((r21*sj1*x1185))+(((-1.0)*cj4*r22*x1186))+(((-1.0)*cj1*x1184))+((r20*sj1*x1187))+((cj1*r00*x1187))+((cj1*r01*x1185))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1189=IKcos(j2);
IkReal x1190=IKsin(j2);
IkReal x1191=(cj3*sj4);
IkReal x1192=((1.0)*cj4);
IkReal x1193=(cj5*sj4);
IkReal x1194=((0.07155)*sj5);
IkReal x1195=(cj5*r20);
IkReal x1196=(sj4*sj5);
IkReal x1197=(cj5*r00);
IkReal x1198=(cj1*x1189);
IkReal x1199=(cj3*cj4*sj5);
IkReal x1200=(sj1*x1189);
IkReal x1201=((0.27155)*x1190);
IkReal x1202=((1.0)*sj3*sj5);
IkReal x1203=(sj1*x1190);
IkReal x1204=(cj3*cj4*cj5);
IkReal x1205=((1.0)*x1200);
IkReal x1206=((1.0)*cj1*x1190);
IkReal x1207=(x1205+x1206);
evalcond[0]=(x1203+((r01*x1193))+((r00*x1196))+(((-1.0)*x1198))+(((-1.0)*r02*x1192)));
evalcond[1]=((((-1.0)*r22*x1192))+((r21*x1193))+(((-1.0)*x1207))+((r20*x1196)));
evalcond[2]=((((-0.07155)*x1195))+(((0.3571)*cj1))+(((-1.0)*cj1*x1201))+(((-1.0)*pz))+((r21*x1194))+(((-0.27155)*x1200)));
evalcond[3]=(((r01*x1194))+(((-0.07155)*x1197))+(((-1.0)*px))+(((-0.3571)*sj1))+(((-0.27155)*x1198))+((sj1*x1201)));
evalcond[4]=(x1198+((r22*x1191))+((r21*x1204))+(((-1.0)*x1203))+((sj3*x1195))+(((-1.0)*r21*x1202))+((r20*x1199)));
evalcond[5]=(((r00*x1199))+(((-1.0)*r01*x1202))+((r02*x1191))+((sj3*x1197))+((r01*x1204))+(((-1.0)*x1207)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1, j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1208=((0.27155)*cj0);
IkReal x1209=(sj4*sj5);
IkReal x1210=((0.07155)*cj0);
IkReal x1211=(cj5*sj4);
CheckValue<IkReal> x1212=IKPowWithIntegerCheck(cj0,-2);
if(!x1212.valid){
continue;
}
if( IKabs(((-2.80033604032484)*(x1212.value)*(((((-1.0)*cj5*r00*x1210))+(((-1.0)*r01*x1208*x1211))+((r01*sj5*x1210))+((cj4*r02*x1208))+(((-1.0)*r00*x1208*x1209))+(((-1.0)*cj0*px)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.200364043685242)*r21*sj5))+(((2.80033604032484)*pz))+(((0.200364043685242)*cj5*r20))+(((0.76043125175021)*r20*x1209))+(((0.76043125175021)*r21*x1211))+(((-0.76043125175021)*cj4*r22)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-2.80033604032484)*(x1212.value)*(((((-1.0)*cj5*r00*x1210))+(((-1.0)*r01*x1208*x1211))+((r01*sj5*x1210))+((cj4*r02*x1208))+(((-1.0)*r00*x1208*x1209))+(((-1.0)*cj0*px))))))+IKsqr(((((-0.200364043685242)*r21*sj5))+(((2.80033604032484)*pz))+(((0.200364043685242)*cj5*r20))+(((0.76043125175021)*r20*x1209))+(((0.76043125175021)*r21*x1211))+(((-0.76043125175021)*cj4*r22))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-2.80033604032484)*(x1212.value)*(((((-1.0)*cj5*r00*x1210))+(((-1.0)*r01*x1208*x1211))+((r01*sj5*x1210))+((cj4*r02*x1208))+(((-1.0)*r00*x1208*x1209))+(((-1.0)*cj0*px))))), ((((-0.200364043685242)*r21*sj5))+(((2.80033604032484)*pz))+(((0.200364043685242)*cj5*r20))+(((0.76043125175021)*r20*x1209))+(((0.76043125175021)*r21*x1211))+(((-0.76043125175021)*cj4*r22))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[9];
IkReal x1213=IKsin(j1);
IkReal x1214=IKcos(j1);
IkReal x1215=((0.07155)*cj5);
IkReal x1216=(r00*sj0);
IkReal x1217=(cj3*cj4);
IkReal x1218=(cj0*sj5);
IkReal x1219=((0.07155)*r11);
IkReal x1220=(cj5*sj3);
IkReal x1221=((0.27155)*sj4);
IkReal x1222=(cj3*r22);
IkReal x1223=(cj5*r11);
IkReal x1224=((0.27155)*r20);
IkReal x1225=((1.0)*sj0);
IkReal x1226=(sj0*sj5);
IkReal x1227=((0.27155)*sj5);
IkReal x1228=((1.0)*pz);
IkReal x1229=((0.07155)*r21);
IkReal x1230=(cj5*r01);
IkReal x1231=((0.27155)*cj4);
IkReal x1232=(cj5*r21);
IkReal x1233=((1.0)*cj0);
IkReal x1234=(sj0*x1224);
IkReal x1235=((0.3571)*x1214);
IkReal x1236=((0.07155)*r01*sj5);
IkReal x1237=((0.3571)*x1213);
IkReal x1238=((0.27155)*r21*sj3);
IkReal x1239=(cj0*x1237);
IkReal x1240=(sj0*x1239);
evalcond[0]=(x1235+(((-1.0)*x1228))+(((-1.0)*r20*sj5*x1221))+((sj5*x1229))+(((-1.0)*x1221*x1232))+((r22*x1231))+(((-1.0)*r20*x1215)));
evalcond[1]=((((-1.0)*r10*sj0*x1215))+((x1237*(sj0*sj0)))+((x1219*x1226))+(((-1.0)*r10*x1221*x1226))+(((-1.0)*py*x1225))+(((-1.0)*sj0*x1221*x1223))+((r12*sj0*x1231)));
evalcond[2]=((((-1.0)*cj0*x1221*x1230))+((cj0*r02*x1231))+(((-1.0)*px*x1233))+(((0.07155)*r01*x1218))+(((-1.0)*cj0*r00*x1215))+((cj0*x1239))+(((-1.0)*r00*x1218*x1221)));
evalcond[3]=(((x1217*x1224*x1226))+(((-1.0)*x1226*x1238))+((r10*x1215))+(((0.27155)*sj0*x1217*x1232))+((x1220*x1234))+(((-1.0)*sj0*x1237))+py+(((-1.0)*sj5*x1219))+((sj0*x1221*x1222)));
evalcond[4]=(((x1217*x1218*x1224))+(((-1.0)*x1218*x1238))+((cj0*x1221*x1222))+(((-1.0)*x1236))+(((-1.0)*x1239))+((cj0*x1220*x1224))+((r00*x1215))+px+(((0.27155)*cj0*x1217*x1232)));
evalcond[5]=((((-1.0)*r20*sj0*x1215))+((sj0*x1235))+(((0.27155)*r10*x1220))+((cj3*r12*x1221))+((r10*x1217*x1227))+(((0.27155)*x1217*x1223))+(((-1.0)*pz*x1225))+(((-1.0)*r11*sj3*x1227))+((x1226*x1229)));
evalcond[6]=((((0.27155)*r00*x1220))+((cj3*r02*x1221))+(((-1.0)*cj0*r20*x1215))+(((-1.0)*cj0*x1228))+(((0.27155)*x1217*x1230))+(((-1.0)*r01*sj3*x1227))+((r00*x1217*x1227))+((cj0*x1235))+((x1218*x1229)));
evalcond[7]=(x1240+(((-1.0)*x1215*x1216))+(((-1.0)*px*x1225))+(((-1.0)*r10*x1218*x1221))+(((0.07155)*r01*x1226))+((cj0*r12*x1231))+(((-1.0)*cj0*x1221*x1223)));
evalcond[8]=(((r02*sj0*x1231))+x1240+((x1218*x1219))+(((-1.0)*py*x1233))+(((-1.0)*sj5*x1216*x1221))+(((-1.0)*sj0*x1221*x1230))+(((-1.0)*cj0*r10*x1215)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=cj0;
j2eval[1]=IKsign(cj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=sj0;
j2eval[1]=IKsign(sj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1241=(cj5*sj4);
IkReal x1242=(cj4*r02);
IkReal x1243=((1.0)*cj1);
IkReal x1244=(sj4*sj5);
IkReal x1245=((1.0)*cj4*r22);
IkReal x1246=(sj1*x1244);
if( IKabs((((r00*x1246))+((r01*sj1*x1241))+((cj1*r20*x1244))+(((-1.0)*cj4*r22*x1243))+((cj1*r21*x1241))+(((-1.0)*sj1*x1242)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj1*x1245))+(((-1.0)*r00*x1243*x1244))+((cj1*x1242))+((r20*x1246))+(((-1.0)*r01*x1241*x1243))+((r21*sj1*x1241)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x1246))+((r01*sj1*x1241))+((cj1*r20*x1244))+(((-1.0)*cj4*r22*x1243))+((cj1*r21*x1241))+(((-1.0)*sj1*x1242))))+IKsqr(((((-1.0)*sj1*x1245))+(((-1.0)*r00*x1243*x1244))+((cj1*x1242))+((r20*x1246))+(((-1.0)*r01*x1241*x1243))+((r21*sj1*x1241))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r00*x1246))+((r01*sj1*x1241))+((cj1*r20*x1244))+(((-1.0)*cj4*r22*x1243))+((cj1*r21*x1241))+(((-1.0)*sj1*x1242))), ((((-1.0)*sj1*x1245))+(((-1.0)*r00*x1243*x1244))+((cj1*x1242))+((r20*x1246))+(((-1.0)*r01*x1241*x1243))+((r21*sj1*x1241))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1247=IKcos(j2);
IkReal x1248=IKsin(j2);
IkReal x1249=(cj3*sj4);
IkReal x1250=((1.0)*cj4);
IkReal x1251=(r00*sj5);
IkReal x1252=(cj3*cj4);
IkReal x1253=(cj5*sj4);
IkReal x1254=((0.07155)*sj5);
IkReal x1255=(cj5*r20);
IkReal x1256=(cj5*r00);
IkReal x1257=(r20*sj5);
IkReal x1258=(cj1*x1247);
IkReal x1259=(sj1*x1247);
IkReal x1260=(cj1*x1248);
IkReal x1261=((1.0)*sj3*sj5);
IkReal x1262=(sj1*x1248);
IkReal x1263=((1.0)*x1262);
evalcond[0]=(x1258+((sj4*x1251))+(((-1.0)*r02*x1250))+((r01*x1253))+(((-1.0)*x1263)));
evalcond[1]=((((-1.0)*r22*x1250))+((r21*x1253))+((sj4*x1257))+(((-1.0)*x1260))+(((-1.0)*x1259)));
evalcond[2]=((((-0.27155)*x1259))+(((-0.27155)*x1260))+((r21*x1254))+(((0.3571)*cj1))+(((-1.0)*pz))+(((-0.07155)*x1255)));
evalcond[3]=((((-0.27155)*x1262))+(((0.3571)*sj1))+(((0.27155)*x1258))+(((-1.0)*px))+(((-0.07155)*x1256))+((r01*x1254)));
evalcond[4]=(x1260+x1259+(((-1.0)*r01*x1261))+((cj5*r01*x1252))+((r02*x1249))+((x1251*x1252))+((sj3*x1256)));
evalcond[5]=(x1258+(((-1.0)*r21*x1261))+((cj5*r21*x1252))+((x1252*x1257))+((r22*x1249))+((sj3*x1255))+(((-1.0)*x1263)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1264=(cj4*r02);
IkReal x1265=(cj5*sj4);
IkReal x1266=((1.0)*sj1);
IkReal x1267=(sj4*sj5);
IkReal x1268=((1.0)*cj4*r22);
if( IKabs((((sj1*x1264))+((cj1*r20*x1267))+(((-1.0)*cj1*x1268))+((cj1*r21*x1265))+(((-1.0)*r01*x1265*x1266))+(((-1.0)*r00*x1266*x1267)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r21*sj1*x1265))+(((-1.0)*cj4*r22*x1266))+(((-1.0)*cj1*x1264))+((cj1*r00*x1267))+((r20*sj1*x1267))+((cj1*r01*x1265)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj1*x1264))+((cj1*r20*x1267))+(((-1.0)*cj1*x1268))+((cj1*r21*x1265))+(((-1.0)*r01*x1265*x1266))+(((-1.0)*r00*x1266*x1267))))+IKsqr((((r21*sj1*x1265))+(((-1.0)*cj4*r22*x1266))+(((-1.0)*cj1*x1264))+((cj1*r00*x1267))+((r20*sj1*x1267))+((cj1*r01*x1265))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((sj1*x1264))+((cj1*r20*x1267))+(((-1.0)*cj1*x1268))+((cj1*r21*x1265))+(((-1.0)*r01*x1265*x1266))+(((-1.0)*r00*x1266*x1267))), (((r21*sj1*x1265))+(((-1.0)*cj4*r22*x1266))+(((-1.0)*cj1*x1264))+((cj1*r00*x1267))+((r20*sj1*x1267))+((cj1*r01*x1265))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1269=IKcos(j2);
IkReal x1270=IKsin(j2);
IkReal x1271=(cj3*sj4);
IkReal x1272=((1.0)*cj4);
IkReal x1273=(cj5*sj4);
IkReal x1274=((0.07155)*sj5);
IkReal x1275=(cj5*r20);
IkReal x1276=(sj4*sj5);
IkReal x1277=(cj5*r00);
IkReal x1278=(cj1*x1269);
IkReal x1279=(cj3*cj4*sj5);
IkReal x1280=(sj1*x1269);
IkReal x1281=((0.27155)*x1270);
IkReal x1282=((1.0)*sj3*sj5);
IkReal x1283=(sj1*x1270);
IkReal x1284=(cj3*cj4*cj5);
IkReal x1285=((1.0)*x1280);
IkReal x1286=((1.0)*cj1*x1270);
IkReal x1287=(x1285+x1286);
evalcond[0]=(x1283+(((-1.0)*r02*x1272))+(((-1.0)*x1278))+((r00*x1276))+((r01*x1273)));
evalcond[1]=(((r21*x1273))+(((-1.0)*r22*x1272))+(((-1.0)*x1287))+((r20*x1276)));
evalcond[2]=(((r21*x1274))+(((0.3571)*cj1))+(((-1.0)*cj1*x1281))+(((-0.27155)*x1280))+(((-1.0)*pz))+(((-0.07155)*x1275)));
evalcond[3]=((((-0.27155)*x1278))+(((-1.0)*px))+(((-0.3571)*sj1))+(((-0.07155)*x1277))+((sj1*x1281))+((r01*x1274)));
evalcond[4]=(((sj3*x1275))+(((-1.0)*x1283))+x1278+((r22*x1271))+((r21*x1284))+(((-1.0)*r21*x1282))+((r20*x1279)));
evalcond[5]=(((sj3*x1277))+((r02*x1271))+((r01*x1284))+(((-1.0)*r01*x1282))+(((-1.0)*x1287))+((r00*x1279)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1288=(cj1*cj4);
IkReal x1289=((1.0)*r22);
IkReal x1290=(cj4*sj1);
IkReal x1291=(sj4*sj5);
IkReal x1292=(cj1*cj5*sj4);
IkReal x1293=(cj5*sj1*sj4);
if( IKabs((((r21*x1292))+((cj1*r20*x1291))+((r10*sj1*x1291))+((r11*x1293))+(((-1.0)*x1288*x1289))+(((-1.0)*r12*x1290)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r21*x1293))+(((-1.0)*cj1*r10*x1291))+(((-1.0)*x1289*x1290))+((r20*sj1*x1291))+((r12*x1288))+(((-1.0)*r11*x1292)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r21*x1292))+((cj1*r20*x1291))+((r10*sj1*x1291))+((r11*x1293))+(((-1.0)*x1288*x1289))+(((-1.0)*r12*x1290))))+IKsqr((((r21*x1293))+(((-1.0)*cj1*r10*x1291))+(((-1.0)*x1289*x1290))+((r20*sj1*x1291))+((r12*x1288))+(((-1.0)*r11*x1292))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r21*x1292))+((cj1*r20*x1291))+((r10*sj1*x1291))+((r11*x1293))+(((-1.0)*x1288*x1289))+(((-1.0)*r12*x1290))), (((r21*x1293))+(((-1.0)*cj1*r10*x1291))+(((-1.0)*x1289*x1290))+((r20*sj1*x1291))+((r12*x1288))+(((-1.0)*r11*x1292))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1294=IKcos(j2);
IkReal x1295=IKsin(j2);
IkReal x1296=((1.0)*cj4);
IkReal x1297=((0.07155)*cj5);
IkReal x1298=(cj5*sj4);
IkReal x1299=(cj3*cj4);
IkReal x1300=(r20*sj5);
IkReal x1301=(r10*sj5);
IkReal x1302=((0.07155)*sj5);
IkReal x1303=(cj5*sj3);
IkReal x1304=(cj3*sj4);
IkReal x1305=(cj1*x1294);
IkReal x1306=((1.0)*sj3*sj5);
IkReal x1307=(cj1*x1295);
IkReal x1308=(sj1*x1294);
IkReal x1309=(sj1*x1295);
IkReal x1310=((1.0)*x1309);
evalcond[0]=(x1305+(((-1.0)*x1310))+(((-1.0)*r12*x1296))+((r11*x1298))+((sj4*x1301)));
evalcond[1]=(((r21*x1298))+(((-1.0)*x1308))+(((-1.0)*x1307))+((sj4*x1300))+(((-1.0)*r22*x1296)));
evalcond[2]=((((-0.27155)*x1307))+(((-0.27155)*x1308))+(((0.3571)*cj1))+(((-1.0)*r20*x1297))+((r21*x1302))+(((-1.0)*pz)));
evalcond[3]=((((0.3571)*sj1))+(((0.27155)*x1305))+(((-0.27155)*x1309))+(((-1.0)*py))+((r11*x1302))+(((-1.0)*r10*x1297)));
evalcond[4]=(x1307+x1308+((x1299*x1301))+((r10*x1303))+((r12*x1304))+(((-1.0)*r11*x1306))+((cj5*r11*x1299)));
evalcond[5]=(x1305+((x1299*x1300))+((cj5*r21*x1299))+(((-1.0)*x1310))+(((-1.0)*r21*x1306))+((r22*x1304))+((r20*x1303)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1311=(cj4*sj1);
IkReal x1312=(cj5*sj4);
IkReal x1313=((1.0)*sj1);
IkReal x1314=(sj4*sj5);
IkReal x1315=((1.0)*cj1*cj4);
if( IKabs(((((-1.0)*r22*x1315))+(((-1.0)*r10*x1313*x1314))+((r12*x1311))+(((-1.0)*r11*x1312*x1313))+((cj1*r20*x1314))+((cj1*r21*x1312)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r20*sj1*x1314))+((r21*sj1*x1312))+(((-1.0)*r22*x1311))+(((-1.0)*r12*x1315))+((cj1*r10*x1314))+((cj1*r11*x1312)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r22*x1315))+(((-1.0)*r10*x1313*x1314))+((r12*x1311))+(((-1.0)*r11*x1312*x1313))+((cj1*r20*x1314))+((cj1*r21*x1312))))+IKsqr((((r20*sj1*x1314))+((r21*sj1*x1312))+(((-1.0)*r22*x1311))+(((-1.0)*r12*x1315))+((cj1*r10*x1314))+((cj1*r11*x1312))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r22*x1315))+(((-1.0)*r10*x1313*x1314))+((r12*x1311))+(((-1.0)*r11*x1312*x1313))+((cj1*r20*x1314))+((cj1*r21*x1312))), (((r20*sj1*x1314))+((r21*sj1*x1312))+(((-1.0)*r22*x1311))+(((-1.0)*r12*x1315))+((cj1*r10*x1314))+((cj1*r11*x1312))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1316=IKcos(j2);
IkReal x1317=IKsin(j2);
IkReal x1318=((1.0)*cj4);
IkReal x1319=((0.07155)*cj5);
IkReal x1320=(cj5*sj4);
IkReal x1321=(cj3*cj4);
IkReal x1322=(r20*sj5);
IkReal x1323=(r10*sj5);
IkReal x1324=((0.07155)*sj5);
IkReal x1325=(cj5*sj3);
IkReal x1326=(cj3*sj4);
IkReal x1327=(cj1*x1316);
IkReal x1328=((1.0)*sj3*sj5);
IkReal x1329=(sj1*x1316);
IkReal x1330=((0.27155)*x1317);
IkReal x1331=(sj1*x1317);
IkReal x1332=((1.0)*x1329);
IkReal x1333=((1.0)*cj1*x1317);
IkReal x1334=(x1333+x1332);
evalcond[0]=(x1331+(((-1.0)*r12*x1318))+((r11*x1320))+(((-1.0)*x1327))+((sj4*x1323)));
evalcond[1]=((((-1.0)*r22*x1318))+((sj4*x1322))+((r21*x1320))+(((-1.0)*x1334)));
evalcond[2]=((((-0.27155)*x1329))+(((-1.0)*cj1*x1330))+(((0.3571)*cj1))+(((-1.0)*pz))+(((-1.0)*r20*x1319))+((r21*x1324)));
evalcond[3]=((((-0.27155)*x1327))+((r11*x1324))+(((-1.0)*py))+(((-0.3571)*sj1))+((sj1*x1330))+(((-1.0)*r10*x1319)));
evalcond[4]=(x1327+(((-1.0)*x1331))+((cj5*r21*x1321))+((r22*x1326))+(((-1.0)*r21*x1328))+((r20*x1325))+((x1321*x1322)));
evalcond[5]=(((cj5*r11*x1321))+((r10*x1325))+(((-1.0)*r11*x1328))+((r12*x1326))+((x1321*x1323))+(((-1.0)*x1334)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1335=(cj4*r12);
IkReal x1336=(cj5*sj4);
IkReal x1337=(r21*sj0);
IkReal x1338=((1.0)*cj1);
IkReal x1339=(r10*sj4*sj5);
IkReal x1340=(r20*sj0*sj4*sj5);
IkReal x1341=((1.0)*cj4*r22*sj0);
CheckValue<IkReal> x1342 = IKatan2WithCheck(IkReal((((cj1*x1340))+((r11*sj1*x1336))+(((-1.0)*sj1*x1335))+(((-1.0)*cj4*r22*sj0*x1338))+((sj1*x1339))+((cj1*x1336*x1337)))),IkReal((((sj1*x1340))+((sj1*x1336*x1337))+(((-1.0)*sj1*x1341))+((cj1*x1335))+(((-1.0)*x1338*x1339))+(((-1.0)*r11*x1336*x1338)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1342.valid){
continue;
}
CheckValue<IkReal> x1343=IKPowWithIntegerCheck(IKsign(sj0),-1);
if(!x1343.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x1342.value)+(((1.5707963267949)*(x1343.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x1344=IKcos(j2);
IkReal x1345=IKsin(j2);
IkReal x1346=(cj5*r21);
IkReal x1347=(cj3*cj4);
IkReal x1348=(r11*sj5);
IkReal x1349=((1.0)*sj3);
IkReal x1350=((1.0)*cj4);
IkReal x1351=((0.27155)*cj0);
IkReal x1352=((0.07155)*cj5);
IkReal x1353=(cj5*sj4);
IkReal x1354=((0.07155)*sj5);
IkReal x1355=((0.27155)*sj0);
IkReal x1356=((1.0)*sj1);
IkReal x1357=(r20*sj5);
IkReal x1358=(r10*sj5);
IkReal x1359=(cj3*sj4);
IkReal x1360=(cj5*sj3);
IkReal x1361=(r00*sj5);
IkReal x1362=((0.3571)*sj1);
IkReal x1363=(cj1*x1344);
IkReal x1364=(sj0*x1345);
IkReal x1365=(sj1*x1344);
IkReal x1366=(cj0*x1345);
IkReal x1367=(cj1*x1345);
IkReal x1368=(sj1*x1345);
evalcond[0]=((((-1.0)*x1367))+((sj4*x1357))+((sj4*x1346))+(((-1.0)*r22*x1350))+(((-1.0)*x1344*x1356)));
evalcond[1]=((((-1.0)*r02*x1350))+((sj4*x1361))+((cj0*x1363))+(((-1.0)*x1356*x1366))+((r01*x1353)));
evalcond[2]=((((-1.0)*r12*x1350))+((sj0*x1363))+((sj4*x1358))+((r11*x1353))+(((-1.0)*x1356*x1364)));
evalcond[3]=((((-1.0)*r20*x1352))+(((0.3571)*cj1))+(((-1.0)*pz))+(((-0.27155)*x1365))+(((-0.27155)*x1367))+((r21*x1354)));
evalcond[4]=((((-1.0)*px))+(((-1.0)*r00*x1352))+((cj0*x1362))+((x1351*x1363))+((r01*x1354))+(((-1.0)*x1351*x1368)));
evalcond[5]=(((x1355*x1363))+(((-1.0)*r10*x1352))+((sj0*x1362))+(((-1.0)*x1355*x1368))+(((-1.0)*py))+(((0.07155)*x1348)));
evalcond[6]=(x1363+(((-1.0)*x1345*x1356))+((r22*x1359))+((x1346*x1347))+((r20*x1360))+(((-1.0)*r21*sj5*x1349))+((x1347*x1357)));
evalcond[7]=(((r02*x1359))+((cj1*x1366))+((cj5*r01*x1347))+((x1347*x1361))+((cj0*x1365))+(((-1.0)*r01*sj5*x1349))+((r00*x1360)));
evalcond[8]=(((r10*x1360))+((sj0*x1365))+((cj1*x1364))+(((-1.0)*x1348*x1349))+((x1347*x1358))+((r12*x1359))+((cj5*r11*x1347)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1369=((1.0)*cj4);
IkReal x1370=(cj0*cj1);
IkReal x1371=(sj4*sj5);
IkReal x1372=(cj5*sj4);
IkReal x1373=((1.0)*cj1);
IkReal x1374=(cj0*sj1);
IkReal x1375=(sj1*x1372);
CheckValue<IkReal> x1376=IKPowWithIntegerCheck(IKsign(cj0),-1);
if(!x1376.valid){
continue;
}
CheckValue<IkReal> x1377 = IKatan2WithCheck(IkReal((((r21*x1370*x1372))+((r00*sj1*x1371))+(((-1.0)*r22*x1369*x1370))+((r20*x1370*x1371))+(((-1.0)*r02*sj1*x1369))+((r01*x1375)))),IkReal(((((-1.0)*r00*x1371*x1373))+((cj1*cj4*r02))+((r21*x1372*x1374))+(((-1.0)*r22*x1369*x1374))+(((-1.0)*r01*x1372*x1373))+((r20*x1371*x1374)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1377.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1376.value)))+(x1377.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x1378=IKcos(j2);
IkReal x1379=IKsin(j2);
IkReal x1380=(cj5*r21);
IkReal x1381=(cj3*cj4);
IkReal x1382=(r11*sj5);
IkReal x1383=((1.0)*sj3);
IkReal x1384=((1.0)*cj4);
IkReal x1385=((0.27155)*cj0);
IkReal x1386=((0.07155)*cj5);
IkReal x1387=(cj5*sj4);
IkReal x1388=((0.07155)*sj5);
IkReal x1389=((0.27155)*sj0);
IkReal x1390=((1.0)*sj1);
IkReal x1391=(r20*sj5);
IkReal x1392=(r10*sj5);
IkReal x1393=(cj3*sj4);
IkReal x1394=(cj5*sj3);
IkReal x1395=(r00*sj5);
IkReal x1396=((0.3571)*sj1);
IkReal x1397=(cj1*x1378);
IkReal x1398=(sj0*x1379);
IkReal x1399=(sj1*x1378);
IkReal x1400=(cj0*x1379);
IkReal x1401=(cj1*x1379);
IkReal x1402=(sj1*x1379);
evalcond[0]=((((-1.0)*x1401))+((sj4*x1380))+((sj4*x1391))+(((-1.0)*x1378*x1390))+(((-1.0)*r22*x1384)));
evalcond[1]=((((-1.0)*r02*x1384))+((sj4*x1395))+(((-1.0)*x1390*x1400))+((cj0*x1397))+((r01*x1387)));
evalcond[2]=((((-1.0)*r12*x1384))+((sj4*x1392))+((sj0*x1397))+(((-1.0)*x1390*x1398))+((r11*x1387)));
evalcond[3]=((((-1.0)*r20*x1386))+(((0.3571)*cj1))+((r21*x1388))+(((-0.27155)*x1399))+(((-1.0)*pz))+(((-0.27155)*x1401)));
evalcond[4]=((((-1.0)*r00*x1386))+(((-1.0)*px))+((cj0*x1396))+((r01*x1388))+((x1385*x1397))+(((-1.0)*x1385*x1402)));
evalcond[5]=((((-1.0)*x1389*x1402))+((sj0*x1396))+(((-1.0)*r10*x1386))+(((-1.0)*py))+((x1389*x1397))+(((0.07155)*x1382)));
evalcond[6]=(x1397+((x1380*x1381))+((r20*x1394))+(((-1.0)*r21*sj5*x1383))+((r22*x1393))+((x1381*x1391))+(((-1.0)*x1379*x1390)));
evalcond[7]=(((cj5*r01*x1381))+((cj0*x1399))+((r00*x1394))+((cj1*x1400))+((r02*x1393))+(((-1.0)*r01*sj5*x1383))+((x1381*x1395)));
evalcond[8]=(((r10*x1394))+(((-1.0)*x1382*x1383))+((sj0*x1399))+((cj5*r11*x1381))+((r12*x1393))+((x1381*x1392))+((cj1*x1398)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1403=((0.07155)*sj0);
IkReal x1404=((0.27155)*sj0);
IkReal x1405=(sj4*sj5);
IkReal x1406=(cj5*sj4);
CheckValue<IkReal> x1407=IKPowWithIntegerCheck(sj0,-2);
if(!x1407.valid){
continue;
}
if( IKabs(((-2.80033604032484)*(x1407.value)*(((((-1.0)*r11*x1404*x1406))+(((-1.0)*cj5*r10*x1403))+((r11*sj5*x1403))+(((-1.0)*py*sj0))+(((-1.0)*r10*x1404*x1405))+((cj4*r12*x1404)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.200364043685242)*r21*sj5))+(((2.80033604032484)*pz))+(((0.200364043685242)*cj5*r20))+(((0.76043125175021)*r21*x1406))+(((0.76043125175021)*r20*x1405))+(((-0.76043125175021)*cj4*r22)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-2.80033604032484)*(x1407.value)*(((((-1.0)*r11*x1404*x1406))+(((-1.0)*cj5*r10*x1403))+((r11*sj5*x1403))+(((-1.0)*py*sj0))+(((-1.0)*r10*x1404*x1405))+((cj4*r12*x1404))))))+IKsqr(((((-0.200364043685242)*r21*sj5))+(((2.80033604032484)*pz))+(((0.200364043685242)*cj5*r20))+(((0.76043125175021)*r21*x1406))+(((0.76043125175021)*r20*x1405))+(((-0.76043125175021)*cj4*r22))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-2.80033604032484)*(x1407.value)*(((((-1.0)*r11*x1404*x1406))+(((-1.0)*cj5*r10*x1403))+((r11*sj5*x1403))+(((-1.0)*py*sj0))+(((-1.0)*r10*x1404*x1405))+((cj4*r12*x1404))))), ((((-0.200364043685242)*r21*sj5))+(((2.80033604032484)*pz))+(((0.200364043685242)*cj5*r20))+(((0.76043125175021)*r21*x1406))+(((0.76043125175021)*r20*x1405))+(((-0.76043125175021)*cj4*r22))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[9];
IkReal x1408=IKsin(j1);
IkReal x1409=IKcos(j1);
IkReal x1410=((0.07155)*cj5);
IkReal x1411=(r00*sj0);
IkReal x1412=(cj3*cj4);
IkReal x1413=(cj0*sj5);
IkReal x1414=((0.07155)*r11);
IkReal x1415=(cj5*sj3);
IkReal x1416=((0.27155)*sj4);
IkReal x1417=(cj3*r22);
IkReal x1418=(cj5*r11);
IkReal x1419=((0.27155)*r20);
IkReal x1420=((1.0)*sj0);
IkReal x1421=(sj0*sj5);
IkReal x1422=((0.27155)*sj5);
IkReal x1423=((1.0)*pz);
IkReal x1424=((0.07155)*r21);
IkReal x1425=(cj5*r01);
IkReal x1426=((0.27155)*cj4);
IkReal x1427=(cj5*r21);
IkReal x1428=((1.0)*cj0);
IkReal x1429=(sj0*x1419);
IkReal x1430=((0.3571)*x1409);
IkReal x1431=((0.07155)*r01*sj5);
IkReal x1432=((0.3571)*x1408);
IkReal x1433=((0.27155)*r21*sj3);
IkReal x1434=(cj0*x1432);
IkReal x1435=(sj0*x1434);
evalcond[0]=((((-1.0)*r20*sj5*x1416))+(((-1.0)*x1416*x1427))+((r22*x1426))+x1430+(((-1.0)*r20*x1410))+((sj5*x1424))+(((-1.0)*x1423)));
evalcond[1]=(((x1414*x1421))+(((-1.0)*py*x1420))+((x1432*(sj0*sj0)))+(((-1.0)*r10*x1416*x1421))+(((-1.0)*sj0*x1416*x1418))+(((-1.0)*r10*sj0*x1410))+((r12*sj0*x1426)));
evalcond[2]=((((-1.0)*cj0*x1416*x1425))+(((-1.0)*px*x1428))+(((-1.0)*cj0*r00*x1410))+((cj0*r02*x1426))+((cj0*x1434))+(((-1.0)*r00*x1413*x1416))+(((0.07155)*r01*x1413)));
evalcond[3]=((((-1.0)*sj0*x1432))+((sj0*x1416*x1417))+((x1415*x1429))+(((0.27155)*sj0*x1412*x1427))+py+((x1412*x1419*x1421))+(((-1.0)*x1421*x1433))+((r10*x1410))+(((-1.0)*sj5*x1414)));
evalcond[4]=(((cj0*x1416*x1417))+(((-1.0)*x1434))+(((-1.0)*x1431))+(((-1.0)*x1413*x1433))+((cj0*x1415*x1419))+((r00*x1410))+px+(((0.27155)*cj0*x1412*x1427))+((x1412*x1413*x1419)));
evalcond[5]=((((-1.0)*r20*sj0*x1410))+(((0.27155)*x1412*x1418))+((cj3*r12*x1416))+(((-1.0)*pz*x1420))+((sj0*x1430))+((r10*x1412*x1422))+(((0.27155)*r10*x1415))+((x1421*x1424))+(((-1.0)*r11*sj3*x1422)));
evalcond[6]=(((r00*x1412*x1422))+(((-1.0)*cj0*x1423))+(((0.27155)*r00*x1415))+((cj0*x1430))+((cj3*r02*x1416))+(((-1.0)*r01*sj3*x1422))+(((0.27155)*x1412*x1425))+(((-1.0)*cj0*r20*x1410))+((x1413*x1424)));
evalcond[7]=((((-1.0)*px*x1420))+((cj0*r12*x1426))+(((-1.0)*x1410*x1411))+(((-1.0)*r10*x1413*x1416))+x1435+(((0.07155)*r01*x1421))+(((-1.0)*cj0*x1416*x1418)));
evalcond[8]=(((x1413*x1414))+(((-1.0)*py*x1428))+(((-1.0)*sj5*x1411*x1416))+(((-1.0)*cj0*r10*x1410))+((r02*sj0*x1426))+x1435+(((-1.0)*sj0*x1416*x1425)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=cj0;
j2eval[1]=IKsign(cj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=sj0;
j2eval[1]=IKsign(sj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1436=(cj5*sj4);
IkReal x1437=(cj4*r02);
IkReal x1438=((1.0)*cj1);
IkReal x1439=(sj4*sj5);
IkReal x1440=((1.0)*cj4*r22);
IkReal x1441=(sj1*x1439);
if( IKabs((((cj1*r21*x1436))+(((-1.0)*cj4*r22*x1438))+((cj1*r20*x1439))+((r01*sj1*x1436))+((r00*x1441))+(((-1.0)*sj1*x1437)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj1*x1440))+((r21*sj1*x1436))+(((-1.0)*r01*x1436*x1438))+((r20*x1441))+(((-1.0)*r00*x1438*x1439))+((cj1*x1437)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*r21*x1436))+(((-1.0)*cj4*r22*x1438))+((cj1*r20*x1439))+((r01*sj1*x1436))+((r00*x1441))+(((-1.0)*sj1*x1437))))+IKsqr(((((-1.0)*sj1*x1440))+((r21*sj1*x1436))+(((-1.0)*r01*x1436*x1438))+((r20*x1441))+(((-1.0)*r00*x1438*x1439))+((cj1*x1437))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*r21*x1436))+(((-1.0)*cj4*r22*x1438))+((cj1*r20*x1439))+((r01*sj1*x1436))+((r00*x1441))+(((-1.0)*sj1*x1437))), ((((-1.0)*sj1*x1440))+((r21*sj1*x1436))+(((-1.0)*r01*x1436*x1438))+((r20*x1441))+(((-1.0)*r00*x1438*x1439))+((cj1*x1437))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1442=IKcos(j2);
IkReal x1443=IKsin(j2);
IkReal x1444=(cj3*sj4);
IkReal x1445=((1.0)*cj4);
IkReal x1446=(r00*sj5);
IkReal x1447=(cj3*cj4);
IkReal x1448=(cj5*sj4);
IkReal x1449=((0.07155)*sj5);
IkReal x1450=(cj5*r20);
IkReal x1451=(cj5*r00);
IkReal x1452=(r20*sj5);
IkReal x1453=(cj1*x1442);
IkReal x1454=(sj1*x1442);
IkReal x1455=(cj1*x1443);
IkReal x1456=((1.0)*sj3*sj5);
IkReal x1457=(sj1*x1443);
IkReal x1458=((1.0)*x1457);
evalcond[0]=(((sj4*x1446))+(((-1.0)*x1458))+x1453+(((-1.0)*r02*x1445))+((r01*x1448)));
evalcond[1]=((((-1.0)*r22*x1445))+(((-1.0)*x1454))+(((-1.0)*x1455))+((r21*x1448))+((sj4*x1452)));
evalcond[2]=(((r21*x1449))+(((0.3571)*cj1))+(((-0.27155)*x1454))+(((-0.27155)*x1455))+(((-1.0)*pz))+(((-0.07155)*x1450)));
evalcond[3]=((((0.3571)*sj1))+(((-0.27155)*x1457))+(((-1.0)*px))+(((0.27155)*x1453))+((r01*x1449))+(((-0.07155)*x1451)));
evalcond[4]=(((sj3*x1451))+((r02*x1444))+(((-1.0)*r01*x1456))+x1454+x1455+((cj5*r01*x1447))+((x1446*x1447)));
evalcond[5]=(((r22*x1444))+((x1447*x1452))+(((-1.0)*x1458))+((sj3*x1450))+((cj5*r21*x1447))+x1453+(((-1.0)*r21*x1456)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1459=(cj4*r02);
IkReal x1460=(cj5*sj4);
IkReal x1461=((1.0)*sj1);
IkReal x1462=(sj4*sj5);
IkReal x1463=((1.0)*cj4*r22);
if( IKabs(((((-1.0)*r01*x1460*x1461))+(((-1.0)*cj1*x1463))+((cj1*r21*x1460))+((cj1*r20*x1462))+(((-1.0)*r00*x1461*x1462))+((sj1*x1459)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj1*x1459))+(((-1.0)*cj4*r22*x1461))+((r21*sj1*x1460))+((cj1*r01*x1460))+((cj1*r00*x1462))+((r20*sj1*x1462)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*x1460*x1461))+(((-1.0)*cj1*x1463))+((cj1*r21*x1460))+((cj1*r20*x1462))+(((-1.0)*r00*x1461*x1462))+((sj1*x1459))))+IKsqr(((((-1.0)*cj1*x1459))+(((-1.0)*cj4*r22*x1461))+((r21*sj1*x1460))+((cj1*r01*x1460))+((cj1*r00*x1462))+((r20*sj1*x1462))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r01*x1460*x1461))+(((-1.0)*cj1*x1463))+((cj1*r21*x1460))+((cj1*r20*x1462))+(((-1.0)*r00*x1461*x1462))+((sj1*x1459))), ((((-1.0)*cj1*x1459))+(((-1.0)*cj4*r22*x1461))+((r21*sj1*x1460))+((cj1*r01*x1460))+((cj1*r00*x1462))+((r20*sj1*x1462))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1464=IKcos(j2);
IkReal x1465=IKsin(j2);
IkReal x1466=(cj3*sj4);
IkReal x1467=((1.0)*cj4);
IkReal x1468=(cj5*sj4);
IkReal x1469=((0.07155)*sj5);
IkReal x1470=(cj5*r20);
IkReal x1471=(sj4*sj5);
IkReal x1472=(cj5*r00);
IkReal x1473=(cj1*x1464);
IkReal x1474=(cj3*cj4*sj5);
IkReal x1475=(sj1*x1464);
IkReal x1476=((0.27155)*x1465);
IkReal x1477=((1.0)*sj3*sj5);
IkReal x1478=(sj1*x1465);
IkReal x1479=(cj3*cj4*cj5);
IkReal x1480=((1.0)*x1475);
IkReal x1481=((1.0)*cj1*x1465);
IkReal x1482=(x1481+x1480);
evalcond[0]=((((-1.0)*r02*x1467))+((r01*x1468))+(((-1.0)*x1473))+x1478+((r00*x1471)));
evalcond[1]=((((-1.0)*x1482))+(((-1.0)*r22*x1467))+((r20*x1471))+((r21*x1468)));
evalcond[2]=((((-0.07155)*x1470))+(((0.3571)*cj1))+(((-1.0)*pz))+(((-1.0)*cj1*x1476))+((r21*x1469))+(((-0.27155)*x1475)));
evalcond[3]=((((-0.07155)*x1472))+((sj1*x1476))+((r01*x1469))+(((-1.0)*px))+(((-0.3571)*sj1))+(((-0.27155)*x1473)));
evalcond[4]=((((-1.0)*r21*x1477))+((r21*x1479))+(((-1.0)*x1478))+((r22*x1466))+x1473+((r20*x1474))+((sj3*x1470)));
evalcond[5]=((((-1.0)*r01*x1477))+(((-1.0)*x1482))+((sj3*x1472))+((r01*x1479))+((r02*x1466))+((r00*x1474)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1483=(cj1*cj4);
IkReal x1484=((1.0)*r22);
IkReal x1485=(cj4*sj1);
IkReal x1486=(sj4*sj5);
IkReal x1487=(cj1*cj5*sj4);
IkReal x1488=(cj5*sj1*sj4);
if( IKabs((((cj1*r20*x1486))+((r21*x1487))+((r11*x1488))+(((-1.0)*x1483*x1484))+((r10*sj1*x1486))+(((-1.0)*r12*x1485)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1487))+(((-1.0)*x1484*x1485))+((r12*x1483))+((r21*x1488))+(((-1.0)*cj1*r10*x1486))+((r20*sj1*x1486)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*r20*x1486))+((r21*x1487))+((r11*x1488))+(((-1.0)*x1483*x1484))+((r10*sj1*x1486))+(((-1.0)*r12*x1485))))+IKsqr(((((-1.0)*r11*x1487))+(((-1.0)*x1484*x1485))+((r12*x1483))+((r21*x1488))+(((-1.0)*cj1*r10*x1486))+((r20*sj1*x1486))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*r20*x1486))+((r21*x1487))+((r11*x1488))+(((-1.0)*x1483*x1484))+((r10*sj1*x1486))+(((-1.0)*r12*x1485))), ((((-1.0)*r11*x1487))+(((-1.0)*x1484*x1485))+((r12*x1483))+((r21*x1488))+(((-1.0)*cj1*r10*x1486))+((r20*sj1*x1486))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1489=IKcos(j2);
IkReal x1490=IKsin(j2);
IkReal x1491=((1.0)*cj4);
IkReal x1492=((0.07155)*cj5);
IkReal x1493=(cj5*sj4);
IkReal x1494=(cj3*cj4);
IkReal x1495=(r20*sj5);
IkReal x1496=(r10*sj5);
IkReal x1497=((0.07155)*sj5);
IkReal x1498=(cj5*sj3);
IkReal x1499=(cj3*sj4);
IkReal x1500=(cj1*x1489);
IkReal x1501=((1.0)*sj3*sj5);
IkReal x1502=(cj1*x1490);
IkReal x1503=(sj1*x1489);
IkReal x1504=(sj1*x1490);
IkReal x1505=((1.0)*x1504);
evalcond[0]=((((-1.0)*x1505))+(((-1.0)*r12*x1491))+((r11*x1493))+x1500+((sj4*x1496)));
evalcond[1]=((((-1.0)*x1502))+(((-1.0)*x1503))+((r21*x1493))+((sj4*x1495))+(((-1.0)*r22*x1491)));
evalcond[2]=((((-1.0)*r20*x1492))+(((0.3571)*cj1))+((r21*x1497))+(((-0.27155)*x1503))+(((-0.27155)*x1502))+(((-1.0)*pz)));
evalcond[3]=((((0.3571)*sj1))+((r11*x1497))+(((-0.27155)*x1504))+(((-1.0)*py))+(((0.27155)*x1500))+(((-1.0)*r10*x1492)));
evalcond[4]=(((r10*x1498))+((cj5*r11*x1494))+((x1494*x1496))+((r12*x1499))+x1502+x1503+(((-1.0)*r11*x1501)));
evalcond[5]=((((-1.0)*x1505))+((cj5*r21*x1494))+((r20*x1498))+((x1494*x1495))+x1500+((r22*x1499))+(((-1.0)*r21*x1501)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1506=(cj4*sj1);
IkReal x1507=(cj5*sj4);
IkReal x1508=((1.0)*sj1);
IkReal x1509=(sj4*sj5);
IkReal x1510=((1.0)*cj1*cj4);
if( IKabs(((((-1.0)*r22*x1510))+((r12*x1506))+((cj1*r20*x1509))+(((-1.0)*r10*x1508*x1509))+((cj1*r21*x1507))+(((-1.0)*r11*x1507*x1508)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*r11*x1507))+(((-1.0)*r22*x1506))+((r20*sj1*x1509))+((r21*sj1*x1507))+((cj1*r10*x1509))+(((-1.0)*r12*x1510)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r22*x1510))+((r12*x1506))+((cj1*r20*x1509))+(((-1.0)*r10*x1508*x1509))+((cj1*r21*x1507))+(((-1.0)*r11*x1507*x1508))))+IKsqr((((cj1*r11*x1507))+(((-1.0)*r22*x1506))+((r20*sj1*x1509))+((r21*sj1*x1507))+((cj1*r10*x1509))+(((-1.0)*r12*x1510))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r22*x1510))+((r12*x1506))+((cj1*r20*x1509))+(((-1.0)*r10*x1508*x1509))+((cj1*r21*x1507))+(((-1.0)*r11*x1507*x1508))), (((cj1*r11*x1507))+(((-1.0)*r22*x1506))+((r20*sj1*x1509))+((r21*sj1*x1507))+((cj1*r10*x1509))+(((-1.0)*r12*x1510))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1511=IKcos(j2);
IkReal x1512=IKsin(j2);
IkReal x1513=((1.0)*cj4);
IkReal x1514=((0.07155)*cj5);
IkReal x1515=(cj5*sj4);
IkReal x1516=(cj3*cj4);
IkReal x1517=(r20*sj5);
IkReal x1518=(r10*sj5);
IkReal x1519=((0.07155)*sj5);
IkReal x1520=(cj5*sj3);
IkReal x1521=(cj3*sj4);
IkReal x1522=(cj1*x1511);
IkReal x1523=((1.0)*sj3*sj5);
IkReal x1524=(sj1*x1511);
IkReal x1525=((0.27155)*x1512);
IkReal x1526=(sj1*x1512);
IkReal x1527=((1.0)*x1524);
IkReal x1528=((1.0)*cj1*x1512);
IkReal x1529=(x1527+x1528);
evalcond[0]=(((r11*x1515))+x1526+((sj4*x1518))+(((-1.0)*x1522))+(((-1.0)*r12*x1513)));
evalcond[1]=((((-1.0)*r22*x1513))+(((-1.0)*x1529))+((sj4*x1517))+((r21*x1515)));
evalcond[2]=((((-1.0)*r20*x1514))+(((0.3571)*cj1))+(((-1.0)*pz))+((r21*x1519))+(((-0.27155)*x1524))+(((-1.0)*cj1*x1525)));
evalcond[3]=(((r11*x1519))+((sj1*x1525))+(((-1.0)*py))+(((-0.3571)*sj1))+(((-0.27155)*x1522))+(((-1.0)*r10*x1514)));
evalcond[4]=(((cj5*r21*x1516))+((x1516*x1517))+((r20*x1520))+x1522+((r22*x1521))+(((-1.0)*r21*x1523))+(((-1.0)*x1526)));
evalcond[5]=(((r10*x1520))+(((-1.0)*r11*x1523))+((r12*x1521))+(((-1.0)*x1529))+((x1516*x1518))+((cj5*r11*x1516)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1530=(cj4*r12);
IkReal x1531=(cj5*sj4);
IkReal x1532=(r21*sj0);
IkReal x1533=((1.0)*cj1);
IkReal x1534=(r10*sj4*sj5);
IkReal x1535=(r20*sj0*sj4*sj5);
IkReal x1536=((1.0)*cj4*r22*sj0);
CheckValue<IkReal> x1537=IKPowWithIntegerCheck(IKsign(sj0),-1);
if(!x1537.valid){
continue;
}
CheckValue<IkReal> x1538 = IKatan2WithCheck(IkReal(((((-1.0)*sj1*x1530))+((cj1*x1535))+((sj1*x1534))+((cj1*x1531*x1532))+((r11*sj1*x1531))+(((-1.0)*cj4*r22*sj0*x1533)))),IkReal(((((-1.0)*sj1*x1536))+((sj1*x1531*x1532))+(((-1.0)*r11*x1531*x1533))+((cj1*x1530))+((sj1*x1535))+(((-1.0)*x1533*x1534)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1538.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1537.value)))+(x1538.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x1539=IKcos(j2);
IkReal x1540=IKsin(j2);
IkReal x1541=(cj5*r21);
IkReal x1542=(cj3*cj4);
IkReal x1543=(r11*sj5);
IkReal x1544=((1.0)*sj3);
IkReal x1545=((1.0)*cj4);
IkReal x1546=((0.27155)*cj0);
IkReal x1547=((0.07155)*cj5);
IkReal x1548=(cj5*sj4);
IkReal x1549=((0.07155)*sj5);
IkReal x1550=((0.27155)*sj0);
IkReal x1551=((1.0)*sj1);
IkReal x1552=(r20*sj5);
IkReal x1553=(r10*sj5);
IkReal x1554=(cj3*sj4);
IkReal x1555=(cj5*sj3);
IkReal x1556=(r00*sj5);
IkReal x1557=((0.3571)*sj1);
IkReal x1558=(cj1*x1539);
IkReal x1559=(sj0*x1540);
IkReal x1560=(sj1*x1539);
IkReal x1561=(cj0*x1540);
IkReal x1562=(cj1*x1540);
IkReal x1563=(sj1*x1540);
evalcond[0]=(((sj4*x1552))+(((-1.0)*r22*x1545))+((sj4*x1541))+(((-1.0)*x1562))+(((-1.0)*x1539*x1551)));
evalcond[1]=((((-1.0)*r02*x1545))+((sj4*x1556))+(((-1.0)*x1551*x1561))+((cj0*x1558))+((r01*x1548)));
evalcond[2]=(((sj4*x1553))+((r11*x1548))+((sj0*x1558))+(((-1.0)*x1551*x1559))+(((-1.0)*r12*x1545)));
evalcond[3]=((((0.3571)*cj1))+(((-1.0)*pz))+((r21*x1549))+(((-1.0)*r20*x1547))+(((-0.27155)*x1562))+(((-0.27155)*x1560)));
evalcond[4]=((((-1.0)*x1546*x1563))+(((-1.0)*px))+(((-1.0)*r00*x1547))+((cj0*x1557))+((x1546*x1558))+((r01*x1549)));
evalcond[5]=(((x1550*x1558))+(((-1.0)*py))+(((-1.0)*x1550*x1563))+(((-1.0)*r10*x1547))+((sj0*x1557))+(((0.07155)*x1543)));
evalcond[6]=((((-1.0)*x1540*x1551))+((x1541*x1542))+((r22*x1554))+x1558+((r20*x1555))+((x1542*x1552))+(((-1.0)*r21*sj5*x1544)));
evalcond[7]=(((r00*x1555))+(((-1.0)*r01*sj5*x1544))+((cj1*x1561))+((r02*x1554))+((cj0*x1560))+((cj5*r01*x1542))+((x1542*x1556)));
evalcond[8]=((((-1.0)*x1543*x1544))+((cj1*x1559))+((cj5*r11*x1542))+((sj0*x1560))+((r12*x1554))+((r10*x1555))+((x1542*x1553)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1564=((1.0)*cj4);
IkReal x1565=(cj0*cj1);
IkReal x1566=(sj4*sj5);
IkReal x1567=(cj5*sj4);
IkReal x1568=((1.0)*cj1);
IkReal x1569=(cj0*sj1);
IkReal x1570=(sj1*x1567);
CheckValue<IkReal> x1571 = IKatan2WithCheck(IkReal((((r00*sj1*x1566))+(((-1.0)*r02*sj1*x1564))+((r21*x1565*x1567))+(((-1.0)*r22*x1564*x1565))+((r20*x1565*x1566))+((r01*x1570)))),IkReal((((r21*x1567*x1569))+(((-1.0)*r00*x1566*x1568))+((cj1*cj4*r02))+(((-1.0)*r22*x1564*x1569))+((r20*x1566*x1569))+(((-1.0)*r01*x1567*x1568)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1571.valid){
continue;
}
CheckValue<IkReal> x1572=IKPowWithIntegerCheck(IKsign(cj0),-1);
if(!x1572.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x1571.value)+(((1.5707963267949)*(x1572.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x1573=IKcos(j2);
IkReal x1574=IKsin(j2);
IkReal x1575=(cj5*r21);
IkReal x1576=(cj3*cj4);
IkReal x1577=(r11*sj5);
IkReal x1578=((1.0)*sj3);
IkReal x1579=((1.0)*cj4);
IkReal x1580=((0.27155)*cj0);
IkReal x1581=((0.07155)*cj5);
IkReal x1582=(cj5*sj4);
IkReal x1583=((0.07155)*sj5);
IkReal x1584=((0.27155)*sj0);
IkReal x1585=((1.0)*sj1);
IkReal x1586=(r20*sj5);
IkReal x1587=(r10*sj5);
IkReal x1588=(cj3*sj4);
IkReal x1589=(cj5*sj3);
IkReal x1590=(r00*sj5);
IkReal x1591=((0.3571)*sj1);
IkReal x1592=(cj1*x1573);
IkReal x1593=(sj0*x1574);
IkReal x1594=(sj1*x1573);
IkReal x1595=(cj0*x1574);
IkReal x1596=(cj1*x1574);
IkReal x1597=(sj1*x1574);
evalcond[0]=((((-1.0)*x1573*x1585))+(((-1.0)*r22*x1579))+((sj4*x1575))+((sj4*x1586))+(((-1.0)*x1596)));
evalcond[1]=((((-1.0)*r02*x1579))+(((-1.0)*x1585*x1595))+((r01*x1582))+((sj4*x1590))+((cj0*x1592)));
evalcond[2]=((((-1.0)*x1585*x1593))+((r11*x1582))+((sj4*x1587))+((sj0*x1592))+(((-1.0)*r12*x1579)));
evalcond[3]=((((0.3571)*cj1))+(((-0.27155)*x1596))+(((-0.27155)*x1594))+(((-1.0)*pz))+(((-1.0)*r20*x1581))+((r21*x1583)));
evalcond[4]=((((-1.0)*x1580*x1597))+((r01*x1583))+(((-1.0)*r00*x1581))+(((-1.0)*px))+((x1580*x1592))+((cj0*x1591)));
evalcond[5]=(((x1584*x1592))+(((-1.0)*x1584*x1597))+(((-1.0)*py))+((sj0*x1591))+(((0.07155)*x1577))+(((-1.0)*r10*x1581)));
evalcond[6]=(((r20*x1589))+((x1576*x1586))+((x1575*x1576))+x1592+((r22*x1588))+(((-1.0)*x1574*x1585))+(((-1.0)*r21*sj5*x1578)));
evalcond[7]=((((-1.0)*r01*sj5*x1578))+((cj1*x1595))+((x1576*x1590))+((r02*x1588))+((cj0*x1594))+((cj5*r01*x1576))+((r00*x1589)));
evalcond[8]=(((cj1*x1593))+((x1576*x1587))+((r12*x1588))+((cj5*r11*x1576))+(((-1.0)*x1577*x1578))+((sj0*x1594))+((r10*x1589)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1598=(cj0*r21);
IkReal x1599=((1.0)*cj5);
IkReal x1600=((1.0)*sj4);
IkReal x1601=(cj0*r20);
CheckValue<IkReal> x1602=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*sj4*x1599))+(((-1.0)*r00*sj5*x1600))+((cj4*r02)))),-1);
if(!x1602.valid){
continue;
}
CheckValue<IkReal> x1603 = IKatan2WithCheck(IkReal(((((-1.0)*x1599*x1601))+((sj5*x1598)))),IkReal(((((-1.0)*cj4*x1598*x1599))+(((-1.0)*cj0*r22*x1600))+(((-1.0)*cj4*sj5*x1601)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1603.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1602.value)))+(x1603.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x1604=IKsin(j3);
IkReal x1605=IKcos(j3);
IkReal x1606=(sj4*x1604);
IkReal x1607=(sj5*x1605);
IkReal x1608=(cj4*cj5*x1604);
IkReal x1609=(cj4*sj5*x1604);
IkReal x1610=((1.0)*cj5*x1605);
evalcond[0]=((((-1.0)*r20*x1610))+((r21*x1608))+((r21*x1607))+((r22*x1606))+((r20*x1609)));
evalcond[1]=(sj0+((r00*x1609))+((r01*x1607))+((r01*x1608))+(((-1.0)*r00*x1610))+((r02*x1606)));
evalcond[2]=(((r11*x1607))+((r11*x1608))+((r12*x1606))+(((-1.0)*r10*x1610))+((r10*x1609))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
j1eval[0]=sj0;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
j1eval[0]=cj0;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1611=((0.76043125175021)*sj4);
IkReal x1612=((0.200364043685242)*sj5);
IkReal x1613=((0.200364043685242)*cj5);
IkReal x1614=((0.76043125175021)*cj4);
if( IKabs(((((-1.0)*r11*x1612))+(((-1.0)*r12*x1614))+(((2.80033604032484)*py))+((cj5*r11*x1611))+((r10*sj5*x1611))+((r10*x1613)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r20*x1613))+(((-1.0)*r21*x1612))+((r20*sj5*x1611))+(((2.80033604032484)*pz))+(((-1.0)*r22*x1614))+((cj5*r21*x1611)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x1612))+(((-1.0)*r12*x1614))+(((2.80033604032484)*py))+((cj5*r11*x1611))+((r10*sj5*x1611))+((r10*x1613))))+IKsqr((((r20*x1613))+(((-1.0)*r21*x1612))+((r20*sj5*x1611))+(((2.80033604032484)*pz))+(((-1.0)*r22*x1614))+((cj5*r21*x1611))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*r11*x1612))+(((-1.0)*r12*x1614))+(((2.80033604032484)*py))+((cj5*r11*x1611))+((r10*sj5*x1611))+((r10*x1613))), (((r20*x1613))+(((-1.0)*r21*x1612))+((r20*sj5*x1611))+(((2.80033604032484)*pz))+(((-1.0)*r22*x1614))+((cj5*r21*x1611))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1615=((1.0)*pz);
IkReal x1616=((0.27155)*sj5);
IkReal x1617=((0.07155)*cj5);
IkReal x1618=(cj3*cj4);
IkReal x1619=((0.27155)*sj4);
IkReal x1620=((0.27155)*cj4);
IkReal x1621=((0.07155)*sj5);
IkReal x1622=(cj5*r21);
IkReal x1623=(r10*x1617);
IkReal x1624=(r11*x1621);
IkReal x1625=((0.3571)*(IKsin(j1)));
IkReal x1626=(r21*x1621);
IkReal x1627=((0.3571)*(IKcos(j1)));
IkReal x1628=(r20*x1617);
IkReal x1629=((0.27155)*cj5*r11);
IkReal x1630=((0.27155)*cj5*sj3);
IkReal x1631=(x1628+x1615);
IkReal x1632=(x1625+x1624);
IkReal x1633=(x1627+x1626);
evalcond[0]=((((-1.0)*x1619*x1622))+(((-1.0)*r20*sj4*x1616))+x1633+(((-1.0)*x1631))+((r22*x1620)));
evalcond[1]=((((-1.0)*r10*sj4*x1616))+x1632+(((-1.0)*x1623))+((r12*x1620))+(((-1.0)*py))+(((-1.0)*cj5*r11*x1619)));
evalcond[2]=(((r20*x1616*x1618))+((r20*x1630))+(((0.27155)*x1618*x1622))+x1623+(((-1.0)*x1632))+(((-1.0)*r21*sj3*x1616))+py+((cj3*r22*x1619)));
evalcond[3]=(x1633+(((-1.0)*r11*sj3*x1616))+((r10*x1630))+((cj3*r12*x1619))+(((-1.0)*x1631))+((r10*x1616*x1618))+((x1618*x1629)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1634=(cj1*cj4);
IkReal x1635=((1.0)*r22);
IkReal x1636=(cj4*sj1);
IkReal x1637=(sj4*sj5);
IkReal x1638=(cj1*cj5*sj4);
IkReal x1639=(cj5*sj1*sj4);
if( IKabs((((cj1*r20*x1637))+((r21*x1638))+(((-1.0)*x1634*x1635))+((r11*x1639))+((r10*sj1*x1637))+(((-1.0)*r12*x1636)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r21*x1639))+(((-1.0)*x1635*x1636))+((r12*x1634))+(((-1.0)*r11*x1638))+(((-1.0)*cj1*r10*x1637))+((r20*sj1*x1637)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*r20*x1637))+((r21*x1638))+(((-1.0)*x1634*x1635))+((r11*x1639))+((r10*sj1*x1637))+(((-1.0)*r12*x1636))))+IKsqr((((r21*x1639))+(((-1.0)*x1635*x1636))+((r12*x1634))+(((-1.0)*r11*x1638))+(((-1.0)*cj1*r10*x1637))+((r20*sj1*x1637))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*r20*x1637))+((r21*x1638))+(((-1.0)*x1634*x1635))+((r11*x1639))+((r10*sj1*x1637))+(((-1.0)*r12*x1636))), (((r21*x1639))+(((-1.0)*x1635*x1636))+((r12*x1634))+(((-1.0)*r11*x1638))+(((-1.0)*cj1*r10*x1637))+((r20*sj1*x1637))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1640=IKcos(j2);
IkReal x1641=IKsin(j2);
IkReal x1642=((1.0)*cj4);
IkReal x1643=((0.07155)*cj5);
IkReal x1644=(cj5*sj4);
IkReal x1645=(cj3*cj4);
IkReal x1646=(r20*sj5);
IkReal x1647=(r10*sj5);
IkReal x1648=((0.07155)*sj5);
IkReal x1649=(cj5*sj3);
IkReal x1650=(cj3*sj4);
IkReal x1651=(cj1*x1640);
IkReal x1652=((1.0)*sj3*sj5);
IkReal x1653=(cj1*x1641);
IkReal x1654=(sj1*x1640);
IkReal x1655=(sj1*x1641);
IkReal x1656=((1.0)*x1655);
evalcond[0]=(((r11*x1644))+(((-1.0)*r12*x1642))+x1651+(((-1.0)*x1656))+((sj4*x1647)));
evalcond[1]=(((r21*x1644))+(((-1.0)*r22*x1642))+(((-1.0)*x1653))+(((-1.0)*x1654))+((sj4*x1646)));
evalcond[2]=(((r21*x1648))+(((-0.27155)*x1654))+(((-0.27155)*x1653))+(((0.3571)*cj1))+(((-1.0)*pz))+(((-1.0)*r20*x1643)));
evalcond[3]=(((r11*x1648))+(((0.3571)*sj1))+(((-0.27155)*x1655))+(((-1.0)*py))+(((0.27155)*x1651))+(((-1.0)*r10*x1643)));
evalcond[4]=(((r12*x1650))+((r10*x1649))+x1653+x1654+((x1645*x1647))+(((-1.0)*r11*x1652))+((cj5*r11*x1645)));
evalcond[5]=(((r22*x1650))+((cj5*r21*x1645))+x1651+((r20*x1649))+((x1645*x1646))+(((-1.0)*r21*x1652))+(((-1.0)*x1656)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1657=((0.76043125175021)*sj4);
IkReal x1658=((0.200364043685242)*sj5);
IkReal x1659=((0.200364043685242)*cj5);
IkReal x1660=((0.76043125175021)*cj4);
if( IKabs(((((-2.80033604032484)*py))+((r12*x1660))+(((-1.0)*r10*x1659))+((r11*x1658))+(((-1.0)*cj5*r11*x1657))+(((-1.0)*r10*sj5*x1657)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.80033604032484)*pz))+((r20*x1659))+(((-1.0)*r22*x1660))+(((-1.0)*r21*x1658))+((cj5*r21*x1657))+((r20*sj5*x1657)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.80033604032484)*py))+((r12*x1660))+(((-1.0)*r10*x1659))+((r11*x1658))+(((-1.0)*cj5*r11*x1657))+(((-1.0)*r10*sj5*x1657))))+IKsqr(((((2.80033604032484)*pz))+((r20*x1659))+(((-1.0)*r22*x1660))+(((-1.0)*r21*x1658))+((cj5*r21*x1657))+((r20*sj5*x1657))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-2.80033604032484)*py))+((r12*x1660))+(((-1.0)*r10*x1659))+((r11*x1658))+(((-1.0)*cj5*r11*x1657))+(((-1.0)*r10*sj5*x1657))), ((((2.80033604032484)*pz))+((r20*x1659))+(((-1.0)*r22*x1660))+(((-1.0)*r21*x1658))+((cj5*r21*x1657))+((r20*sj5*x1657))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1661=((0.27155)*sj5);
IkReal x1662=((0.07155)*cj5);
IkReal x1663=(cj3*cj4);
IkReal x1664=((0.27155)*sj4);
IkReal x1665=((0.27155)*cj4);
IkReal x1666=((0.07155)*sj5);
IkReal x1667=(cj5*r21);
IkReal x1668=(r10*x1662);
IkReal x1669=((0.3571)*(IKsin(j1)));
IkReal x1670=(r11*x1666);
IkReal x1671=(r20*x1662);
IkReal x1672=(r21*x1666);
IkReal x1673=((0.3571)*(IKcos(j1)));
IkReal x1674=((0.27155)*cj5*r11);
IkReal x1675=((0.27155)*cj5*sj3);
IkReal x1676=(x1672+x1673);
IkReal x1677=(x1669+x1668+py);
evalcond[0]=(x1677+(((-1.0)*r12*x1665))+((cj5*r11*x1664))+((r10*sj4*x1661))+(((-1.0)*x1670)));
evalcond[1]=(x1676+(((-1.0)*pz))+(((-1.0)*x1671))+(((-1.0)*x1664*x1667))+(((-1.0)*r20*sj4*x1661))+((r22*x1665)));
evalcond[2]=(x1677+(((-0.27155)*x1663*x1667))+(((-1.0)*cj3*r22*x1664))+((r21*sj3*x1661))+(((-1.0)*x1670))+(((-1.0)*r20*x1675))+(((-1.0)*r20*x1661*x1663)));
evalcond[3]=(((r10*x1661*x1663))+((cj3*r12*x1664))+x1671+pz+((r10*x1675))+(((-1.0)*x1676))+(((-1.0)*r11*sj3*x1661))+((x1663*x1674)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1678=(cj4*sj1);
IkReal x1679=(cj5*sj4);
IkReal x1680=((1.0)*sj1);
IkReal x1681=(sj4*sj5);
IkReal x1682=((1.0)*cj1*cj4);
if( IKabs(((((-1.0)*r10*x1680*x1681))+(((-1.0)*r11*x1679*x1680))+(((-1.0)*r22*x1682))+((cj1*r21*x1679))+((cj1*r20*x1681))+((r12*x1678)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r12*x1682))+((r21*sj1*x1679))+((cj1*r10*x1681))+((r20*sj1*x1681))+(((-1.0)*r22*x1678))+((cj1*r11*x1679)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x1680*x1681))+(((-1.0)*r11*x1679*x1680))+(((-1.0)*r22*x1682))+((cj1*r21*x1679))+((cj1*r20*x1681))+((r12*x1678))))+IKsqr(((((-1.0)*r12*x1682))+((r21*sj1*x1679))+((cj1*r10*x1681))+((r20*sj1*x1681))+(((-1.0)*r22*x1678))+((cj1*r11*x1679))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r10*x1680*x1681))+(((-1.0)*r11*x1679*x1680))+(((-1.0)*r22*x1682))+((cj1*r21*x1679))+((cj1*r20*x1681))+((r12*x1678))), ((((-1.0)*r12*x1682))+((r21*sj1*x1679))+((cj1*r10*x1681))+((r20*sj1*x1681))+(((-1.0)*r22*x1678))+((cj1*r11*x1679))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1683=IKcos(j2);
IkReal x1684=IKsin(j2);
IkReal x1685=((1.0)*cj4);
IkReal x1686=((0.07155)*cj5);
IkReal x1687=(cj5*sj4);
IkReal x1688=(cj3*cj4);
IkReal x1689=(r20*sj5);
IkReal x1690=(r10*sj5);
IkReal x1691=((0.07155)*sj5);
IkReal x1692=(cj5*sj3);
IkReal x1693=(cj3*sj4);
IkReal x1694=(cj1*x1683);
IkReal x1695=((1.0)*sj3*sj5);
IkReal x1696=(sj1*x1683);
IkReal x1697=((0.27155)*x1684);
IkReal x1698=(sj1*x1684);
IkReal x1699=((1.0)*x1696);
IkReal x1700=((1.0)*cj1*x1684);
IkReal x1701=(x1700+x1699);
evalcond[0]=((((-1.0)*r12*x1685))+((r11*x1687))+x1698+(((-1.0)*x1694))+((sj4*x1690)));
evalcond[1]=(((r21*x1687))+(((-1.0)*x1701))+((sj4*x1689))+(((-1.0)*r22*x1685)));
evalcond[2]=((((-0.27155)*x1696))+(((-1.0)*cj1*x1697))+((r21*x1691))+(((-1.0)*r20*x1686))+(((0.3571)*cj1))+(((-1.0)*pz)));
evalcond[3]=((((-0.27155)*x1694))+(((-1.0)*r10*x1686))+((sj1*x1697))+((r11*x1691))+(((-1.0)*py))+(((-0.3571)*sj1)));
evalcond[4]=(((r20*x1692))+(((-1.0)*r21*x1695))+((cj5*r21*x1688))+x1694+(((-1.0)*x1698))+((r22*x1693))+((x1688*x1689)));
evalcond[5]=(((r12*x1693))+((r10*x1692))+(((-1.0)*r11*x1695))+(((-1.0)*x1701))+((x1688*x1690))+((cj5*r11*x1688)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1702=((0.76043125175021)*sj4);
IkReal x1703=((0.76043125175021)*cj4);
IkReal x1704=((0.200364043685242)*sj5);
IkReal x1705=((0.200364043685242)*cj5);
if( IKabs(((((2.80033604032484)*px))+((r00*x1705))+(((-1.0)*r02*x1703))+((cj5*r01*x1702))+((r00*sj5*x1702))+(((-1.0)*r01*x1704)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.80033604032484)*pz))+((r20*sj5*x1702))+(((-1.0)*r21*x1704))+((r20*x1705))+((cj5*r21*x1702))+(((-1.0)*r22*x1703)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.80033604032484)*px))+((r00*x1705))+(((-1.0)*r02*x1703))+((cj5*r01*x1702))+((r00*sj5*x1702))+(((-1.0)*r01*x1704))))+IKsqr(((((2.80033604032484)*pz))+((r20*sj5*x1702))+(((-1.0)*r21*x1704))+((r20*x1705))+((cj5*r21*x1702))+(((-1.0)*r22*x1703))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((2.80033604032484)*px))+((r00*x1705))+(((-1.0)*r02*x1703))+((cj5*r01*x1702))+((r00*sj5*x1702))+(((-1.0)*r01*x1704))), ((((2.80033604032484)*pz))+((r20*sj5*x1702))+(((-1.0)*r21*x1704))+((r20*x1705))+((cj5*r21*x1702))+(((-1.0)*r22*x1703))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1706=((1.0)*pz);
IkReal x1707=((0.27155)*sj4);
IkReal x1708=(r00*sj5);
IkReal x1709=((0.07155)*sj5);
IkReal x1710=((0.27155)*cj4);
IkReal x1711=(cj5*r20);
IkReal x1712=(cj3*cj5);
IkReal x1713=((0.27155)*sj3);
IkReal x1714=(r20*sj5);
IkReal x1715=(cj5*r00);
IkReal x1716=((0.07155)*x1715);
IkReal x1717=(r01*x1709);
IkReal x1718=((0.3571)*(IKsin(j1)));
IkReal x1719=(r21*x1709);
IkReal x1720=((0.3571)*(IKcos(j1)));
IkReal x1721=((0.07155)*x1711);
IkReal x1722=(sj5*x1713);
IkReal x1723=(x1721+x1706);
IkReal x1724=(x1717+x1718);
IkReal x1725=(x1720+x1719);
evalcond[0]=(((r22*x1710))+x1725+(((-1.0)*x1707*x1714))+(((-1.0)*x1723))+(((-1.0)*cj5*r21*x1707)));
evalcond[1]=(((r02*x1710))+x1724+(((-1.0)*x1716))+(((-1.0)*x1707*x1708))+(((-1.0)*px))+(((-1.0)*cj5*r01*x1707)));
evalcond[2]=(((cj3*x1710*x1714))+x1716+((r21*x1710*x1712))+((x1711*x1713))+px+(((-1.0)*x1724))+(((-1.0)*r21*x1722))+((cj3*r22*x1707)));
evalcond[3]=(((cj3*x1708*x1710))+((cj3*r02*x1707))+((r01*x1710*x1712))+x1725+((x1713*x1715))+(((-1.0)*r01*x1722))+(((-1.0)*x1723)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1726=(cj5*sj4);
IkReal x1727=(cj4*r02);
IkReal x1728=((1.0)*cj1);
IkReal x1729=(sj4*sj5);
IkReal x1730=((1.0)*cj4*r22);
IkReal x1731=(sj1*x1729);
if( IKabs((((r00*x1731))+(((-1.0)*cj4*r22*x1728))+((cj1*r20*x1729))+((r01*sj1*x1726))+(((-1.0)*sj1*x1727))+((cj1*r21*x1726)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x1728*x1729))+((cj1*x1727))+(((-1.0)*r01*x1726*x1728))+(((-1.0)*sj1*x1730))+((r20*x1731))+((r21*sj1*x1726)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x1731))+(((-1.0)*cj4*r22*x1728))+((cj1*r20*x1729))+((r01*sj1*x1726))+(((-1.0)*sj1*x1727))+((cj1*r21*x1726))))+IKsqr(((((-1.0)*r00*x1728*x1729))+((cj1*x1727))+(((-1.0)*r01*x1726*x1728))+(((-1.0)*sj1*x1730))+((r20*x1731))+((r21*sj1*x1726))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r00*x1731))+(((-1.0)*cj4*r22*x1728))+((cj1*r20*x1729))+((r01*sj1*x1726))+(((-1.0)*sj1*x1727))+((cj1*r21*x1726))), ((((-1.0)*r00*x1728*x1729))+((cj1*x1727))+(((-1.0)*r01*x1726*x1728))+(((-1.0)*sj1*x1730))+((r20*x1731))+((r21*sj1*x1726))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1732=IKcos(j2);
IkReal x1733=IKsin(j2);
IkReal x1734=(cj3*sj4);
IkReal x1735=((1.0)*cj4);
IkReal x1736=(r00*sj5);
IkReal x1737=(cj3*cj4);
IkReal x1738=(cj5*sj4);
IkReal x1739=((0.07155)*sj5);
IkReal x1740=(cj5*r20);
IkReal x1741=(cj5*r00);
IkReal x1742=(r20*sj5);
IkReal x1743=(cj1*x1732);
IkReal x1744=(sj1*x1732);
IkReal x1745=(cj1*x1733);
IkReal x1746=((1.0)*sj3*sj5);
IkReal x1747=(sj1*x1733);
IkReal x1748=((1.0)*x1747);
evalcond[0]=(((r01*x1738))+x1743+((sj4*x1736))+(((-1.0)*x1748))+(((-1.0)*r02*x1735)));
evalcond[1]=(((sj4*x1742))+((r21*x1738))+(((-1.0)*x1744))+(((-1.0)*x1745))+(((-1.0)*r22*x1735)));
evalcond[2]=((((-0.07155)*x1740))+((r21*x1739))+(((0.3571)*cj1))+(((-1.0)*pz))+(((-0.27155)*x1744))+(((-0.27155)*x1745)));
evalcond[3]=(((r01*x1739))+(((-0.07155)*x1741))+(((0.3571)*sj1))+(((0.27155)*x1743))+(((-1.0)*px))+(((-0.27155)*x1747)));
evalcond[4]=(((cj5*r01*x1737))+x1744+x1745+((x1736*x1737))+((r02*x1734))+(((-1.0)*r01*x1746))+((sj3*x1741)));
evalcond[5]=(x1743+((r22*x1734))+(((-1.0)*x1748))+((cj5*r21*x1737))+((sj3*x1740))+(((-1.0)*r21*x1746))+((x1737*x1742)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1749=((0.76043125175021)*sj4);
IkReal x1750=((0.76043125175021)*cj4);
IkReal x1751=((0.200364043685242)*sj5);
IkReal x1752=((0.200364043685242)*cj5);
if( IKabs(((((-2.80033604032484)*px))+(((-1.0)*r00*sj5*x1749))+((r02*x1750))+(((-1.0)*cj5*r01*x1749))+(((-1.0)*r00*x1752))+((r01*x1751)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj5*r21*x1749))+(((2.80033604032484)*pz))+(((-1.0)*r22*x1750))+((r20*x1752))+(((-1.0)*r21*x1751))+((r20*sj5*x1749)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.80033604032484)*px))+(((-1.0)*r00*sj5*x1749))+((r02*x1750))+(((-1.0)*cj5*r01*x1749))+(((-1.0)*r00*x1752))+((r01*x1751))))+IKsqr((((cj5*r21*x1749))+(((2.80033604032484)*pz))+(((-1.0)*r22*x1750))+((r20*x1752))+(((-1.0)*r21*x1751))+((r20*sj5*x1749))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-2.80033604032484)*px))+(((-1.0)*r00*sj5*x1749))+((r02*x1750))+(((-1.0)*cj5*r01*x1749))+(((-1.0)*r00*x1752))+((r01*x1751))), (((cj5*r21*x1749))+(((2.80033604032484)*pz))+(((-1.0)*r22*x1750))+((r20*x1752))+(((-1.0)*r21*x1751))+((r20*sj5*x1749))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1753=((0.27155)*sj4);
IkReal x1754=(r00*sj5);
IkReal x1755=((0.07155)*sj5);
IkReal x1756=((0.27155)*cj4);
IkReal x1757=(cj5*r20);
IkReal x1758=(cj3*cj5);
IkReal x1759=((0.27155)*sj3);
IkReal x1760=(r20*sj5);
IkReal x1761=(cj5*r00);
IkReal x1762=((0.07155)*x1761);
IkReal x1763=((0.3571)*(IKsin(j1)));
IkReal x1764=(r01*x1755);
IkReal x1765=((0.07155)*x1757);
IkReal x1766=(r21*x1755);
IkReal x1767=((0.3571)*(IKcos(j1)));
IkReal x1768=(sj5*x1759);
IkReal x1769=(x1766+x1767);
IkReal x1770=(x1762+x1763+px);
evalcond[0]=(((x1753*x1754))+(((-1.0)*x1764))+x1770+((cj5*r01*x1753))+(((-1.0)*r02*x1756)));
evalcond[1]=((((-1.0)*x1753*x1760))+(((-1.0)*x1765))+x1769+((r22*x1756))+(((-1.0)*cj5*r21*x1753))+(((-1.0)*pz)));
evalcond[2]=(((r21*x1768))+(((-1.0)*cj3*r22*x1753))+(((-1.0)*x1757*x1759))+(((-1.0)*x1764))+x1770+(((-1.0)*r21*x1756*x1758))+(((-1.0)*cj3*x1756*x1760)));
evalcond[3]=((((-1.0)*r01*x1768))+(((-1.0)*x1769))+x1765+((x1759*x1761))+((r01*x1756*x1758))+pz+((cj3*x1754*x1756))+((cj3*r02*x1753)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1771=(cj4*r02);
IkReal x1772=(cj5*sj4);
IkReal x1773=((1.0)*sj1);
IkReal x1774=(sj4*sj5);
IkReal x1775=((1.0)*cj4*r22);
if( IKabs(((((-1.0)*cj1*x1775))+(((-1.0)*r01*x1772*x1773))+(((-1.0)*r00*x1773*x1774))+((cj1*r21*x1772))+((cj1*r20*x1774))+((sj1*x1771)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r20*sj1*x1774))+(((-1.0)*cj1*x1771))+(((-1.0)*cj4*r22*x1773))+((r21*sj1*x1772))+((cj1*r01*x1772))+((cj1*r00*x1774)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj1*x1775))+(((-1.0)*r01*x1772*x1773))+(((-1.0)*r00*x1773*x1774))+((cj1*r21*x1772))+((cj1*r20*x1774))+((sj1*x1771))))+IKsqr((((r20*sj1*x1774))+(((-1.0)*cj1*x1771))+(((-1.0)*cj4*r22*x1773))+((r21*sj1*x1772))+((cj1*r01*x1772))+((cj1*r00*x1774))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*cj1*x1775))+(((-1.0)*r01*x1772*x1773))+(((-1.0)*r00*x1773*x1774))+((cj1*r21*x1772))+((cj1*r20*x1774))+((sj1*x1771))), (((r20*sj1*x1774))+(((-1.0)*cj1*x1771))+(((-1.0)*cj4*r22*x1773))+((r21*sj1*x1772))+((cj1*r01*x1772))+((cj1*r00*x1774))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1776=IKcos(j2);
IkReal x1777=IKsin(j2);
IkReal x1778=(cj3*sj4);
IkReal x1779=((1.0)*cj4);
IkReal x1780=(cj5*sj4);
IkReal x1781=((0.07155)*sj5);
IkReal x1782=(cj5*r20);
IkReal x1783=(sj4*sj5);
IkReal x1784=(cj5*r00);
IkReal x1785=(cj1*x1776);
IkReal x1786=(cj3*cj4*sj5);
IkReal x1787=(sj1*x1776);
IkReal x1788=((0.27155)*x1777);
IkReal x1789=((1.0)*sj3*sj5);
IkReal x1790=(sj1*x1777);
IkReal x1791=(cj3*cj4*cj5);
IkReal x1792=((1.0)*x1787);
IkReal x1793=((1.0)*cj1*x1777);
IkReal x1794=(x1793+x1792);
evalcond[0]=(x1790+(((-1.0)*r02*x1779))+(((-1.0)*x1785))+((r00*x1783))+((r01*x1780)));
evalcond[1]=((((-1.0)*x1794))+((r20*x1783))+((r21*x1780))+(((-1.0)*r22*x1779)));
evalcond[2]=(((r21*x1781))+(((-0.07155)*x1782))+(((0.3571)*cj1))+(((-1.0)*pz))+(((-1.0)*cj1*x1788))+(((-0.27155)*x1787)));
evalcond[3]=(((sj1*x1788))+(((-0.07155)*x1784))+(((-1.0)*px))+(((-0.3571)*sj1))+(((-0.27155)*x1785))+((r01*x1781)));
evalcond[4]=(((r20*x1786))+((sj3*x1782))+((r22*x1778))+((r21*x1791))+x1785+(((-1.0)*x1790))+(((-1.0)*r21*x1789)));
evalcond[5]=((((-1.0)*x1794))+((sj3*x1784))+((r02*x1778))+(((-1.0)*r01*x1789))+((r01*x1791))+((r00*x1786)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1, j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1795=((0.27155)*cj0);
IkReal x1796=(sj4*sj5);
IkReal x1797=((0.07155)*cj0);
IkReal x1798=(cj5*sj4);
CheckValue<IkReal> x1799=IKPowWithIntegerCheck(cj0,-2);
if(!x1799.valid){
continue;
}
if( IKabs(((-2.80033604032484)*(x1799.value)*(((((-1.0)*r01*x1795*x1798))+(((-1.0)*cj5*r00*x1797))+(((-1.0)*r00*x1795*x1796))+((cj4*r02*x1795))+((r01*sj5*x1797))+(((-1.0)*cj0*px)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.76043125175021)*r21*x1798))+(((0.76043125175021)*r20*x1796))+(((-0.200364043685242)*r21*sj5))+(((2.80033604032484)*pz))+(((0.200364043685242)*cj5*r20))+(((-0.76043125175021)*cj4*r22)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-2.80033604032484)*(x1799.value)*(((((-1.0)*r01*x1795*x1798))+(((-1.0)*cj5*r00*x1797))+(((-1.0)*r00*x1795*x1796))+((cj4*r02*x1795))+((r01*sj5*x1797))+(((-1.0)*cj0*px))))))+IKsqr(((((0.76043125175021)*r21*x1798))+(((0.76043125175021)*r20*x1796))+(((-0.200364043685242)*r21*sj5))+(((2.80033604032484)*pz))+(((0.200364043685242)*cj5*r20))+(((-0.76043125175021)*cj4*r22))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-2.80033604032484)*(x1799.value)*(((((-1.0)*r01*x1795*x1798))+(((-1.0)*cj5*r00*x1797))+(((-1.0)*r00*x1795*x1796))+((cj4*r02*x1795))+((r01*sj5*x1797))+(((-1.0)*cj0*px))))), ((((0.76043125175021)*r21*x1798))+(((0.76043125175021)*r20*x1796))+(((-0.200364043685242)*r21*sj5))+(((2.80033604032484)*pz))+(((0.200364043685242)*cj5*r20))+(((-0.76043125175021)*cj4*r22))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[9];
IkReal x1800=IKsin(j1);
IkReal x1801=IKcos(j1);
IkReal x1802=((0.07155)*cj5);
IkReal x1803=(r00*sj0);
IkReal x1804=(cj3*cj4);
IkReal x1805=(cj0*sj5);
IkReal x1806=((0.07155)*r11);
IkReal x1807=(cj5*sj3);
IkReal x1808=((0.27155)*sj4);
IkReal x1809=(cj3*r22);
IkReal x1810=(cj5*r11);
IkReal x1811=((0.27155)*r20);
IkReal x1812=((1.0)*sj0);
IkReal x1813=(sj0*sj5);
IkReal x1814=((0.27155)*sj5);
IkReal x1815=((1.0)*pz);
IkReal x1816=((0.07155)*r21);
IkReal x1817=(cj5*r01);
IkReal x1818=((0.27155)*cj4);
IkReal x1819=(cj5*r21);
IkReal x1820=((1.0)*cj0);
IkReal x1821=(sj0*x1811);
IkReal x1822=((0.3571)*x1801);
IkReal x1823=((0.07155)*r01*sj5);
IkReal x1824=((0.3571)*x1800);
IkReal x1825=((0.27155)*r21*sj3);
IkReal x1826=(cj0*x1824);
IkReal x1827=(sj0*x1826);
evalcond[0]=((((-1.0)*x1815))+((r22*x1818))+(((-1.0)*r20*x1802))+((sj5*x1816))+(((-1.0)*x1808*x1819))+x1822+(((-1.0)*r20*sj5*x1808)));
evalcond[1]=((((-1.0)*r10*x1808*x1813))+((x1824*(sj0*sj0)))+(((-1.0)*py*x1812))+((x1806*x1813))+(((-1.0)*sj0*x1808*x1810))+((r12*sj0*x1818))+(((-1.0)*r10*sj0*x1802)));
evalcond[2]=((((-1.0)*cj0*x1808*x1817))+((cj0*x1826))+((cj0*r02*x1818))+(((-1.0)*cj0*r00*x1802))+(((0.07155)*r01*x1805))+(((-1.0)*px*x1820))+(((-1.0)*r00*x1805*x1808)));
evalcond[3]=((((0.27155)*sj0*x1804*x1819))+((sj0*x1808*x1809))+(((-1.0)*x1813*x1825))+((x1804*x1811*x1813))+((x1807*x1821))+(((-1.0)*sj5*x1806))+py+(((-1.0)*sj0*x1824))+((r10*x1802)));
evalcond[4]=((((-1.0)*x1823))+(((-1.0)*x1826))+((cj0*x1808*x1809))+(((0.27155)*cj0*x1804*x1819))+((x1804*x1805*x1811))+px+(((-1.0)*x1805*x1825))+((r00*x1802))+((cj0*x1807*x1811)));
evalcond[5]=((((-1.0)*r11*sj3*x1814))+((x1813*x1816))+(((-1.0)*pz*x1812))+((r10*x1804*x1814))+((sj0*x1822))+(((0.27155)*x1804*x1810))+(((-1.0)*r20*sj0*x1802))+((cj3*r12*x1808))+(((0.27155)*r10*x1807)));
evalcond[6]=(((cj0*x1822))+(((-1.0)*cj0*x1815))+((cj3*r02*x1808))+((x1805*x1816))+((r00*x1804*x1814))+(((-1.0)*cj0*r20*x1802))+(((0.27155)*r00*x1807))+(((0.27155)*x1804*x1817))+(((-1.0)*r01*sj3*x1814)));
evalcond[7]=((((-1.0)*cj0*x1808*x1810))+((cj0*r12*x1818))+(((-1.0)*x1802*x1803))+(((-1.0)*r10*x1805*x1808))+(((0.07155)*r01*x1813))+x1827+(((-1.0)*px*x1812)));
evalcond[8]=((((-1.0)*py*x1820))+x1827+(((-1.0)*cj0*r10*x1802))+((x1805*x1806))+(((-1.0)*sj5*x1803*x1808))+((r02*sj0*x1818))+(((-1.0)*sj0*x1808*x1817)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=cj0;
j2eval[1]=IKsign(cj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=sj0;
j2eval[1]=IKsign(sj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1828=(cj5*sj4);
IkReal x1829=(cj4*r02);
IkReal x1830=((1.0)*cj1);
IkReal x1831=(sj4*sj5);
IkReal x1832=((1.0)*cj4*r22);
IkReal x1833=(sj1*x1831);
if( IKabs((((cj1*r20*x1831))+(((-1.0)*sj1*x1829))+((r01*sj1*x1828))+(((-1.0)*cj4*r22*x1830))+((cj1*r21*x1828))+((r00*x1833)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x1828*x1830))+((cj1*x1829))+(((-1.0)*r00*x1830*x1831))+(((-1.0)*sj1*x1832))+((r21*sj1*x1828))+((r20*x1833)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*r20*x1831))+(((-1.0)*sj1*x1829))+((r01*sj1*x1828))+(((-1.0)*cj4*r22*x1830))+((cj1*r21*x1828))+((r00*x1833))))+IKsqr(((((-1.0)*r01*x1828*x1830))+((cj1*x1829))+(((-1.0)*r00*x1830*x1831))+(((-1.0)*sj1*x1832))+((r21*sj1*x1828))+((r20*x1833))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*r20*x1831))+(((-1.0)*sj1*x1829))+((r01*sj1*x1828))+(((-1.0)*cj4*r22*x1830))+((cj1*r21*x1828))+((r00*x1833))), ((((-1.0)*r01*x1828*x1830))+((cj1*x1829))+(((-1.0)*r00*x1830*x1831))+(((-1.0)*sj1*x1832))+((r21*sj1*x1828))+((r20*x1833))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1834=IKcos(j2);
IkReal x1835=IKsin(j2);
IkReal x1836=(cj3*sj4);
IkReal x1837=((1.0)*cj4);
IkReal x1838=(r00*sj5);
IkReal x1839=(cj3*cj4);
IkReal x1840=(cj5*sj4);
IkReal x1841=((0.07155)*sj5);
IkReal x1842=(cj5*r20);
IkReal x1843=(cj5*r00);
IkReal x1844=(r20*sj5);
IkReal x1845=(cj1*x1834);
IkReal x1846=(sj1*x1834);
IkReal x1847=(cj1*x1835);
IkReal x1848=((1.0)*sj3*sj5);
IkReal x1849=(sj1*x1835);
IkReal x1850=((1.0)*x1849);
evalcond[0]=(((r01*x1840))+x1845+(((-1.0)*r02*x1837))+(((-1.0)*x1850))+((sj4*x1838)));
evalcond[1]=((((-1.0)*x1847))+(((-1.0)*x1846))+((r21*x1840))+(((-1.0)*r22*x1837))+((sj4*x1844)));
evalcond[2]=((((-0.07155)*x1842))+(((0.3571)*cj1))+(((-1.0)*pz))+(((-0.27155)*x1846))+(((-0.27155)*x1847))+((r21*x1841)));
evalcond[3]=((((0.3571)*sj1))+(((0.27155)*x1845))+(((-0.07155)*x1843))+(((-1.0)*px))+((r01*x1841))+(((-0.27155)*x1849)));
evalcond[4]=(((x1838*x1839))+((sj3*x1843))+(((-1.0)*r01*x1848))+((r02*x1836))+x1847+x1846+((cj5*r01*x1839)));
evalcond[5]=(((r22*x1836))+((sj3*x1842))+((cj5*r21*x1839))+((x1839*x1844))+x1845+(((-1.0)*r21*x1848))+(((-1.0)*x1850)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1851=(cj4*r02);
IkReal x1852=(cj5*sj4);
IkReal x1853=((1.0)*sj1);
IkReal x1854=(sj4*sj5);
IkReal x1855=((1.0)*cj4*r22);
if( IKabs(((((-1.0)*r01*x1852*x1853))+((cj1*r20*x1854))+((sj1*x1851))+((cj1*r21*x1852))+(((-1.0)*r00*x1853*x1854))+(((-1.0)*cj1*x1855)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj4*r22*x1853))+((cj1*r00*x1854))+(((-1.0)*cj1*x1851))+((cj1*r01*x1852))+((r21*sj1*x1852))+((r20*sj1*x1854)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*x1852*x1853))+((cj1*r20*x1854))+((sj1*x1851))+((cj1*r21*x1852))+(((-1.0)*r00*x1853*x1854))+(((-1.0)*cj1*x1855))))+IKsqr(((((-1.0)*cj4*r22*x1853))+((cj1*r00*x1854))+(((-1.0)*cj1*x1851))+((cj1*r01*x1852))+((r21*sj1*x1852))+((r20*sj1*x1854))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r01*x1852*x1853))+((cj1*r20*x1854))+((sj1*x1851))+((cj1*r21*x1852))+(((-1.0)*r00*x1853*x1854))+(((-1.0)*cj1*x1855))), ((((-1.0)*cj4*r22*x1853))+((cj1*r00*x1854))+(((-1.0)*cj1*x1851))+((cj1*r01*x1852))+((r21*sj1*x1852))+((r20*sj1*x1854))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1856=IKcos(j2);
IkReal x1857=IKsin(j2);
IkReal x1858=(cj3*sj4);
IkReal x1859=((1.0)*cj4);
IkReal x1860=(cj5*sj4);
IkReal x1861=((0.07155)*sj5);
IkReal x1862=(cj5*r20);
IkReal x1863=(sj4*sj5);
IkReal x1864=(cj5*r00);
IkReal x1865=(cj1*x1856);
IkReal x1866=(cj3*cj4*sj5);
IkReal x1867=(sj1*x1856);
IkReal x1868=((0.27155)*x1857);
IkReal x1869=((1.0)*sj3*sj5);
IkReal x1870=(sj1*x1857);
IkReal x1871=(cj3*cj4*cj5);
IkReal x1872=((1.0)*x1867);
IkReal x1873=((1.0)*cj1*x1857);
IkReal x1874=(x1872+x1873);
evalcond[0]=((((-1.0)*r02*x1859))+x1870+((r01*x1860))+(((-1.0)*x1865))+((r00*x1863)));
evalcond[1]=((((-1.0)*x1874))+(((-1.0)*r22*x1859))+((r20*x1863))+((r21*x1860)));
evalcond[2]=((((-0.07155)*x1862))+(((0.3571)*cj1))+(((-1.0)*pz))+(((-1.0)*cj1*x1868))+(((-0.27155)*x1867))+((r21*x1861)));
evalcond[3]=((((-0.07155)*x1864))+(((-1.0)*px))+(((-0.3571)*sj1))+(((-0.27155)*x1865))+((sj1*x1868))+((r01*x1861)));
evalcond[4]=(((r22*x1858))+(((-1.0)*r21*x1869))+x1865+((sj3*x1862))+((r21*x1871))+((r20*x1866))+(((-1.0)*x1870)));
evalcond[5]=((((-1.0)*x1874))+((r01*x1871))+((r02*x1858))+(((-1.0)*r01*x1869))+((sj3*x1864))+((r00*x1866)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1875=(cj1*cj4);
IkReal x1876=((1.0)*r22);
IkReal x1877=(cj4*sj1);
IkReal x1878=(sj4*sj5);
IkReal x1879=(cj1*cj5*sj4);
IkReal x1880=(cj5*sj1*sj4);
if( IKabs(((((-1.0)*r12*x1877))+((r21*x1879))+((cj1*r20*x1878))+((r10*sj1*x1878))+((r11*x1880))+(((-1.0)*x1875*x1876)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r21*x1880))+(((-1.0)*x1876*x1877))+((r20*sj1*x1878))+(((-1.0)*cj1*r10*x1878))+(((-1.0)*r11*x1879))+((r12*x1875)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r12*x1877))+((r21*x1879))+((cj1*r20*x1878))+((r10*sj1*x1878))+((r11*x1880))+(((-1.0)*x1875*x1876))))+IKsqr((((r21*x1880))+(((-1.0)*x1876*x1877))+((r20*sj1*x1878))+(((-1.0)*cj1*r10*x1878))+(((-1.0)*r11*x1879))+((r12*x1875))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r12*x1877))+((r21*x1879))+((cj1*r20*x1878))+((r10*sj1*x1878))+((r11*x1880))+(((-1.0)*x1875*x1876))), (((r21*x1880))+(((-1.0)*x1876*x1877))+((r20*sj1*x1878))+(((-1.0)*cj1*r10*x1878))+(((-1.0)*r11*x1879))+((r12*x1875))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1881=IKcos(j2);
IkReal x1882=IKsin(j2);
IkReal x1883=((1.0)*cj4);
IkReal x1884=((0.07155)*cj5);
IkReal x1885=(cj5*sj4);
IkReal x1886=(cj3*cj4);
IkReal x1887=(r20*sj5);
IkReal x1888=(r10*sj5);
IkReal x1889=((0.07155)*sj5);
IkReal x1890=(cj5*sj3);
IkReal x1891=(cj3*sj4);
IkReal x1892=(cj1*x1881);
IkReal x1893=((1.0)*sj3*sj5);
IkReal x1894=(cj1*x1882);
IkReal x1895=(sj1*x1881);
IkReal x1896=(sj1*x1882);
IkReal x1897=((1.0)*x1896);
evalcond[0]=((((-1.0)*r12*x1883))+((sj4*x1888))+x1892+(((-1.0)*x1897))+((r11*x1885)));
evalcond[1]=(((r21*x1885))+(((-1.0)*r22*x1883))+((sj4*x1887))+(((-1.0)*x1894))+(((-1.0)*x1895)));
evalcond[2]=(((r21*x1889))+(((0.3571)*cj1))+(((-1.0)*pz))+(((-0.27155)*x1894))+(((-0.27155)*x1895))+(((-1.0)*r20*x1884)));
evalcond[3]=((((0.3571)*sj1))+(((0.27155)*x1892))+(((-1.0)*py))+(((-0.27155)*x1896))+(((-1.0)*r10*x1884))+((r11*x1889)));
evalcond[4]=(((r10*x1890))+(((-1.0)*r11*x1893))+x1894+x1895+((x1886*x1888))+((cj5*r11*x1886))+((r12*x1891)));
evalcond[5]=(((r22*x1891))+((r20*x1890))+(((-1.0)*r21*x1893))+x1892+(((-1.0)*x1897))+((x1886*x1887))+((cj5*r21*x1886)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1898=(cj4*sj1);
IkReal x1899=(cj5*sj4);
IkReal x1900=((1.0)*sj1);
IkReal x1901=(sj4*sj5);
IkReal x1902=((1.0)*cj1*cj4);
if( IKabs(((((-1.0)*r11*x1899*x1900))+(((-1.0)*r22*x1902))+((cj1*r20*x1901))+(((-1.0)*r10*x1900*x1901))+((cj1*r21*x1899))+((r12*x1898)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r21*sj1*x1899))+(((-1.0)*r12*x1902))+(((-1.0)*r22*x1898))+((cj1*r11*x1899))+((cj1*r10*x1901))+((r20*sj1*x1901)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x1899*x1900))+(((-1.0)*r22*x1902))+((cj1*r20*x1901))+(((-1.0)*r10*x1900*x1901))+((cj1*r21*x1899))+((r12*x1898))))+IKsqr((((r21*sj1*x1899))+(((-1.0)*r12*x1902))+(((-1.0)*r22*x1898))+((cj1*r11*x1899))+((cj1*r10*x1901))+((r20*sj1*x1901))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r11*x1899*x1900))+(((-1.0)*r22*x1902))+((cj1*r20*x1901))+(((-1.0)*r10*x1900*x1901))+((cj1*r21*x1899))+((r12*x1898))), (((r21*sj1*x1899))+(((-1.0)*r12*x1902))+(((-1.0)*r22*x1898))+((cj1*r11*x1899))+((cj1*r10*x1901))+((r20*sj1*x1901))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1903=IKcos(j2);
IkReal x1904=IKsin(j2);
IkReal x1905=((1.0)*cj4);
IkReal x1906=((0.07155)*cj5);
IkReal x1907=(cj5*sj4);
IkReal x1908=(cj3*cj4);
IkReal x1909=(r20*sj5);
IkReal x1910=(r10*sj5);
IkReal x1911=((0.07155)*sj5);
IkReal x1912=(cj5*sj3);
IkReal x1913=(cj3*sj4);
IkReal x1914=(cj1*x1903);
IkReal x1915=((1.0)*sj3*sj5);
IkReal x1916=(sj1*x1903);
IkReal x1917=((0.27155)*x1904);
IkReal x1918=(sj1*x1904);
IkReal x1919=((1.0)*x1916);
IkReal x1920=((1.0)*cj1*x1904);
IkReal x1921=(x1920+x1919);
evalcond[0]=(((sj4*x1910))+(((-1.0)*x1914))+x1918+(((-1.0)*r12*x1905))+((r11*x1907)));
evalcond[1]=((((-1.0)*r22*x1905))+((sj4*x1909))+((r21*x1907))+(((-1.0)*x1921)));
evalcond[2]=((((0.3571)*cj1))+(((-1.0)*cj1*x1917))+(((-1.0)*pz))+(((-1.0)*r20*x1906))+((r21*x1911))+(((-0.27155)*x1916)));
evalcond[3]=((((-1.0)*r10*x1906))+((r11*x1911))+(((-1.0)*py))+(((-0.3571)*sj1))+((sj1*x1917))+(((-0.27155)*x1914)));
evalcond[4]=(((r22*x1913))+(((-1.0)*x1918))+x1914+(((-1.0)*r21*x1915))+((r20*x1912))+((x1908*x1909))+((cj5*r21*x1908)));
evalcond[5]=(((r10*x1912))+((cj5*r11*x1908))+(((-1.0)*r11*x1915))+(((-1.0)*x1921))+((x1908*x1910))+((r12*x1913)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1922=(cj4*r12);
IkReal x1923=(cj5*sj4);
IkReal x1924=(r21*sj0);
IkReal x1925=((1.0)*cj1);
IkReal x1926=(r10*sj4*sj5);
IkReal x1927=(r20*sj0*sj4*sj5);
IkReal x1928=((1.0)*cj4*r22*sj0);
CheckValue<IkReal> x1929=IKPowWithIntegerCheck(IKsign(sj0),-1);
if(!x1929.valid){
continue;
}
CheckValue<IkReal> x1930 = IKatan2WithCheck(IkReal((((r11*sj1*x1923))+((cj1*x1927))+(((-1.0)*cj4*r22*sj0*x1925))+(((-1.0)*sj1*x1922))+((cj1*x1923*x1924))+((sj1*x1926)))),IkReal((((cj1*x1922))+(((-1.0)*r11*x1923*x1925))+((sj1*x1923*x1924))+(((-1.0)*x1925*x1926))+(((-1.0)*sj1*x1928))+((sj1*x1927)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1930.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1929.value)))+(x1930.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x1931=IKcos(j2);
IkReal x1932=IKsin(j2);
IkReal x1933=(cj5*r21);
IkReal x1934=(cj3*cj4);
IkReal x1935=(r11*sj5);
IkReal x1936=((1.0)*sj3);
IkReal x1937=((1.0)*cj4);
IkReal x1938=((0.27155)*cj0);
IkReal x1939=((0.07155)*cj5);
IkReal x1940=(cj5*sj4);
IkReal x1941=((0.07155)*sj5);
IkReal x1942=((0.27155)*sj0);
IkReal x1943=((1.0)*sj1);
IkReal x1944=(r20*sj5);
IkReal x1945=(r10*sj5);
IkReal x1946=(cj3*sj4);
IkReal x1947=(cj5*sj3);
IkReal x1948=(r00*sj5);
IkReal x1949=((0.3571)*sj1);
IkReal x1950=(cj1*x1931);
IkReal x1951=(sj0*x1932);
IkReal x1952=(sj1*x1931);
IkReal x1953=(cj0*x1932);
IkReal x1954=(cj1*x1932);
IkReal x1955=(sj1*x1932);
evalcond[0]=(((sj4*x1933))+(((-1.0)*r22*x1937))+(((-1.0)*x1954))+((sj4*x1944))+(((-1.0)*x1931*x1943)));
evalcond[1]=(((cj0*x1950))+(((-1.0)*x1943*x1953))+((sj4*x1948))+((r01*x1940))+(((-1.0)*r02*x1937)));
evalcond[2]=(((r11*x1940))+(((-1.0)*x1943*x1951))+(((-1.0)*r12*x1937))+((sj0*x1950))+((sj4*x1945)));
evalcond[3]=((((0.3571)*cj1))+(((-1.0)*r20*x1939))+(((-1.0)*pz))+((r21*x1941))+(((-0.27155)*x1954))+(((-0.27155)*x1952)));
evalcond[4]=(((cj0*x1949))+((x1938*x1950))+(((-1.0)*px))+(((-1.0)*x1938*x1955))+((r01*x1941))+(((-1.0)*r00*x1939)));
evalcond[5]=((((-1.0)*x1942*x1955))+(((0.07155)*x1935))+(((-1.0)*py))+(((-1.0)*r10*x1939))+((sj0*x1949))+((x1942*x1950)));
evalcond[6]=(((r20*x1947))+((r22*x1946))+x1950+(((-1.0)*x1932*x1943))+((x1933*x1934))+((x1934*x1944))+(((-1.0)*r21*sj5*x1936)));
evalcond[7]=(((cj0*x1952))+((cj5*r01*x1934))+((cj1*x1953))+((r00*x1947))+(((-1.0)*r01*sj5*x1936))+((x1934*x1948))+((r02*x1946)));
evalcond[8]=(((cj5*r11*x1934))+((r10*x1947))+((r12*x1946))+((cj1*x1951))+((sj0*x1952))+((x1934*x1945))+(((-1.0)*x1935*x1936)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1956=((1.0)*cj4);
IkReal x1957=(cj0*cj1);
IkReal x1958=(sj4*sj5);
IkReal x1959=(cj5*sj4);
IkReal x1960=((1.0)*cj1);
IkReal x1961=(cj0*sj1);
IkReal x1962=(sj1*x1959);
CheckValue<IkReal> x1963 = IKatan2WithCheck(IkReal(((((-1.0)*r02*sj1*x1956))+((r00*sj1*x1958))+((r21*x1957*x1959))+((r01*x1962))+(((-1.0)*r22*x1956*x1957))+((r20*x1957*x1958)))),IkReal((((r20*x1958*x1961))+((cj1*cj4*r02))+(((-1.0)*r00*x1958*x1960))+(((-1.0)*r01*x1959*x1960))+((r21*x1959*x1961))+(((-1.0)*r22*x1956*x1961)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1963.valid){
continue;
}
CheckValue<IkReal> x1964=IKPowWithIntegerCheck(IKsign(cj0),-1);
if(!x1964.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x1963.value)+(((1.5707963267949)*(x1964.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x1965=IKcos(j2);
IkReal x1966=IKsin(j2);
IkReal x1967=(cj5*r21);
IkReal x1968=(cj3*cj4);
IkReal x1969=(r11*sj5);
IkReal x1970=((1.0)*sj3);
IkReal x1971=((1.0)*cj4);
IkReal x1972=((0.27155)*cj0);
IkReal x1973=((0.07155)*cj5);
IkReal x1974=(cj5*sj4);
IkReal x1975=((0.07155)*sj5);
IkReal x1976=((0.27155)*sj0);
IkReal x1977=((1.0)*sj1);
IkReal x1978=(r20*sj5);
IkReal x1979=(r10*sj5);
IkReal x1980=(cj3*sj4);
IkReal x1981=(cj5*sj3);
IkReal x1982=(r00*sj5);
IkReal x1983=((0.3571)*sj1);
IkReal x1984=(cj1*x1965);
IkReal x1985=(sj0*x1966);
IkReal x1986=(sj1*x1965);
IkReal x1987=(cj0*x1966);
IkReal x1988=(cj1*x1966);
IkReal x1989=(sj1*x1966);
evalcond[0]=((((-1.0)*r22*x1971))+(((-1.0)*x1965*x1977))+(((-1.0)*x1988))+((sj4*x1978))+((sj4*x1967)));
evalcond[1]=((((-1.0)*r02*x1971))+((sj4*x1982))+((r01*x1974))+(((-1.0)*x1977*x1987))+((cj0*x1984)));
evalcond[2]=(((r11*x1974))+((sj0*x1984))+(((-1.0)*x1977*x1985))+((sj4*x1979))+(((-1.0)*r12*x1971)));
evalcond[3]=((((-0.27155)*x1988))+(((-0.27155)*x1986))+(((0.3571)*cj1))+((r21*x1975))+(((-1.0)*pz))+(((-1.0)*r20*x1973)));
evalcond[4]=(((x1972*x1984))+(((-1.0)*x1972*x1989))+(((-1.0)*r00*x1973))+(((-1.0)*px))+((r01*x1975))+((cj0*x1983)));
evalcond[5]=((((-1.0)*x1976*x1989))+((x1976*x1984))+((sj0*x1983))+(((-1.0)*py))+(((-1.0)*r10*x1973))+(((0.07155)*x1969)));
evalcond[6]=((((-1.0)*r21*sj5*x1970))+(((-1.0)*x1966*x1977))+x1984+((r22*x1980))+((x1968*x1978))+((r20*x1981))+((x1967*x1968)));
evalcond[7]=(((x1968*x1982))+((cj1*x1987))+((r00*x1981))+(((-1.0)*r01*sj5*x1970))+((cj0*x1986))+((cj5*r01*x1968))+((r02*x1980)));
evalcond[8]=(((r10*x1981))+((cj5*r11*x1968))+((sj0*x1986))+((r12*x1980))+((cj1*x1985))+(((-1.0)*x1969*x1970))+((x1968*x1979)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1990=((0.07155)*sj0);
IkReal x1991=((0.27155)*sj0);
IkReal x1992=(sj4*sj5);
IkReal x1993=(cj5*sj4);
CheckValue<IkReal> x1994=IKPowWithIntegerCheck(sj0,-2);
if(!x1994.valid){
continue;
}
if( IKabs(((-2.80033604032484)*(x1994.value)*((((r11*sj5*x1990))+((cj4*r12*x1991))+(((-1.0)*r11*x1991*x1993))+(((-1.0)*r10*x1991*x1992))+(((-1.0)*cj5*r10*x1990))+(((-1.0)*py*sj0)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.76043125175021)*r20*x1992))+(((-0.200364043685242)*r21*sj5))+(((2.80033604032484)*pz))+(((0.200364043685242)*cj5*r20))+(((0.76043125175021)*r21*x1993))+(((-0.76043125175021)*cj4*r22)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-2.80033604032484)*(x1994.value)*((((r11*sj5*x1990))+((cj4*r12*x1991))+(((-1.0)*r11*x1991*x1993))+(((-1.0)*r10*x1991*x1992))+(((-1.0)*cj5*r10*x1990))+(((-1.0)*py*sj0))))))+IKsqr(((((0.76043125175021)*r20*x1992))+(((-0.200364043685242)*r21*sj5))+(((2.80033604032484)*pz))+(((0.200364043685242)*cj5*r20))+(((0.76043125175021)*r21*x1993))+(((-0.76043125175021)*cj4*r22))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-2.80033604032484)*(x1994.value)*((((r11*sj5*x1990))+((cj4*r12*x1991))+(((-1.0)*r11*x1991*x1993))+(((-1.0)*r10*x1991*x1992))+(((-1.0)*cj5*r10*x1990))+(((-1.0)*py*sj0))))), ((((0.76043125175021)*r20*x1992))+(((-0.200364043685242)*r21*sj5))+(((2.80033604032484)*pz))+(((0.200364043685242)*cj5*r20))+(((0.76043125175021)*r21*x1993))+(((-0.76043125175021)*cj4*r22))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[9];
IkReal x1995=IKsin(j1);
IkReal x1996=IKcos(j1);
IkReal x1997=((0.07155)*cj5);
IkReal x1998=(r00*sj0);
IkReal x1999=(cj3*cj4);
IkReal x2000=(cj0*sj5);
IkReal x2001=((0.07155)*r11);
IkReal x2002=(cj5*sj3);
IkReal x2003=((0.27155)*sj4);
IkReal x2004=(cj3*r22);
IkReal x2005=(cj5*r11);
IkReal x2006=((0.27155)*r20);
IkReal x2007=((1.0)*sj0);
IkReal x2008=(sj0*sj5);
IkReal x2009=((0.27155)*sj5);
IkReal x2010=((1.0)*pz);
IkReal x2011=((0.07155)*r21);
IkReal x2012=(cj5*r01);
IkReal x2013=((0.27155)*cj4);
IkReal x2014=(cj5*r21);
IkReal x2015=((1.0)*cj0);
IkReal x2016=(sj0*x2006);
IkReal x2017=((0.3571)*x1996);
IkReal x2018=((0.07155)*r01*sj5);
IkReal x2019=((0.3571)*x1995);
IkReal x2020=((0.27155)*r21*sj3);
IkReal x2021=(cj0*x2019);
IkReal x2022=(sj0*x2021);
evalcond[0]=((((-1.0)*x2010))+x2017+(((-1.0)*r20*sj5*x2003))+((r22*x2013))+(((-1.0)*x2003*x2014))+((sj5*x2011))+(((-1.0)*r20*x1997)));
evalcond[1]=((((-1.0)*py*x2007))+(((-1.0)*sj0*x2003*x2005))+((x2019*(sj0*sj0)))+(((-1.0)*r10*x2003*x2008))+((x2001*x2008))+(((-1.0)*r10*sj0*x1997))+((r12*sj0*x2013)));
evalcond[2]=((((0.07155)*r01*x2000))+(((-1.0)*cj0*x2003*x2012))+((cj0*x2021))+(((-1.0)*r00*x2000*x2003))+((cj0*r02*x2013))+(((-1.0)*cj0*r00*x1997))+(((-1.0)*px*x2015)));
evalcond[3]=(((x1999*x2006*x2008))+(((-1.0)*x2008*x2020))+(((-1.0)*sj0*x2019))+((r10*x1997))+(((-1.0)*sj5*x2001))+(((0.27155)*sj0*x1999*x2014))+((x2002*x2016))+py+((sj0*x2003*x2004)));
evalcond[4]=((((-1.0)*x2018))+(((0.27155)*cj0*x1999*x2014))+px+(((-1.0)*x2000*x2020))+((r00*x1997))+(((-1.0)*x2021))+((cj0*x2002*x2006))+((cj0*x2003*x2004))+((x1999*x2000*x2006)));
evalcond[5]=(((sj0*x2017))+(((-1.0)*pz*x2007))+(((-1.0)*r20*sj0*x1997))+((r10*x1999*x2009))+((x2008*x2011))+(((-1.0)*r11*sj3*x2009))+((cj3*r12*x2003))+(((0.27155)*r10*x2002))+(((0.27155)*x1999*x2005)));
evalcond[6]=((((0.27155)*x1999*x2012))+((cj3*r02*x2003))+(((-1.0)*cj0*r20*x1997))+((x2000*x2011))+(((0.27155)*r00*x2002))+((r00*x1999*x2009))+((cj0*x2017))+(((-1.0)*r01*sj3*x2009))+(((-1.0)*cj0*x2010)));
evalcond[7]=((((-1.0)*px*x2007))+(((-1.0)*x1997*x1998))+((cj0*r12*x2013))+x2022+(((0.07155)*r01*x2008))+(((-1.0)*cj0*x2003*x2005))+(((-1.0)*r10*x2000*x2003)));
evalcond[8]=(((r02*sj0*x2013))+(((-1.0)*py*x2015))+x2022+((x2000*x2001))+(((-1.0)*sj0*x2003*x2012))+(((-1.0)*cj0*r10*x1997))+(((-1.0)*sj5*x1998*x2003)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=cj0;
j2eval[1]=IKsign(cj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=sj0;
j2eval[1]=IKsign(sj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2023=(cj5*sj4);
IkReal x2024=(cj4*r02);
IkReal x2025=((1.0)*cj1);
IkReal x2026=(sj4*sj5);
IkReal x2027=((1.0)*cj4*r22);
IkReal x2028=(sj1*x2026);
if( IKabs((((r00*x2028))+(((-1.0)*sj1*x2024))+(((-1.0)*cj4*r22*x2025))+((r01*sj1*x2023))+((cj1*r21*x2023))+((cj1*r20*x2026)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r21*sj1*x2023))+(((-1.0)*sj1*x2027))+(((-1.0)*r01*x2023*x2025))+((cj1*x2024))+((r20*x2028))+(((-1.0)*r00*x2025*x2026)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x2028))+(((-1.0)*sj1*x2024))+(((-1.0)*cj4*r22*x2025))+((r01*sj1*x2023))+((cj1*r21*x2023))+((cj1*r20*x2026))))+IKsqr((((r21*sj1*x2023))+(((-1.0)*sj1*x2027))+(((-1.0)*r01*x2023*x2025))+((cj1*x2024))+((r20*x2028))+(((-1.0)*r00*x2025*x2026))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r00*x2028))+(((-1.0)*sj1*x2024))+(((-1.0)*cj4*r22*x2025))+((r01*sj1*x2023))+((cj1*r21*x2023))+((cj1*r20*x2026))), (((r21*sj1*x2023))+(((-1.0)*sj1*x2027))+(((-1.0)*r01*x2023*x2025))+((cj1*x2024))+((r20*x2028))+(((-1.0)*r00*x2025*x2026))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2029=IKcos(j2);
IkReal x2030=IKsin(j2);
IkReal x2031=(cj3*sj4);
IkReal x2032=((1.0)*cj4);
IkReal x2033=(r00*sj5);
IkReal x2034=(cj3*cj4);
IkReal x2035=(cj5*sj4);
IkReal x2036=((0.07155)*sj5);
IkReal x2037=(cj5*r20);
IkReal x2038=(cj5*r00);
IkReal x2039=(r20*sj5);
IkReal x2040=(cj1*x2029);
IkReal x2041=(sj1*x2029);
IkReal x2042=(cj1*x2030);
IkReal x2043=((1.0)*sj3*sj5);
IkReal x2044=(sj1*x2030);
IkReal x2045=((1.0)*x2044);
evalcond[0]=((((-1.0)*x2045))+((r01*x2035))+x2040+(((-1.0)*r02*x2032))+((sj4*x2033)));
evalcond[1]=(((r21*x2035))+(((-1.0)*r22*x2032))+(((-1.0)*x2042))+(((-1.0)*x2041))+((sj4*x2039)));
evalcond[2]=(((r21*x2036))+(((0.3571)*cj1))+(((-1.0)*pz))+(((-0.27155)*x2041))+(((-0.27155)*x2042))+(((-0.07155)*x2037)));
evalcond[3]=((((0.3571)*sj1))+((r01*x2036))+(((-1.0)*px))+(((-0.27155)*x2044))+(((0.27155)*x2040))+(((-0.07155)*x2038)));
evalcond[4]=(((sj3*x2038))+((x2033*x2034))+x2042+x2041+((cj5*r01*x2034))+((r02*x2031))+(((-1.0)*r01*x2043)));
evalcond[5]=(((r22*x2031))+((x2034*x2039))+((sj3*x2037))+(((-1.0)*x2045))+((cj5*r21*x2034))+x2040+(((-1.0)*r21*x2043)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2046=(cj4*r02);
IkReal x2047=(cj5*sj4);
IkReal x2048=((1.0)*sj1);
IkReal x2049=(sj4*sj5);
IkReal x2050=((1.0)*cj4*r22);
if( IKabs((((cj1*r21*x2047))+(((-1.0)*r00*x2048*x2049))+(((-1.0)*cj1*x2050))+((sj1*x2046))+(((-1.0)*r01*x2047*x2048))+((cj1*r20*x2049)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj4*r22*x2048))+((cj1*r00*x2049))+((cj1*r01*x2047))+(((-1.0)*cj1*x2046))+((r21*sj1*x2047))+((r20*sj1*x2049)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*r21*x2047))+(((-1.0)*r00*x2048*x2049))+(((-1.0)*cj1*x2050))+((sj1*x2046))+(((-1.0)*r01*x2047*x2048))+((cj1*r20*x2049))))+IKsqr(((((-1.0)*cj4*r22*x2048))+((cj1*r00*x2049))+((cj1*r01*x2047))+(((-1.0)*cj1*x2046))+((r21*sj1*x2047))+((r20*sj1*x2049))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*r21*x2047))+(((-1.0)*r00*x2048*x2049))+(((-1.0)*cj1*x2050))+((sj1*x2046))+(((-1.0)*r01*x2047*x2048))+((cj1*r20*x2049))), ((((-1.0)*cj4*r22*x2048))+((cj1*r00*x2049))+((cj1*r01*x2047))+(((-1.0)*cj1*x2046))+((r21*sj1*x2047))+((r20*sj1*x2049))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2051=IKcos(j2);
IkReal x2052=IKsin(j2);
IkReal x2053=(cj3*sj4);
IkReal x2054=((1.0)*cj4);
IkReal x2055=(cj5*sj4);
IkReal x2056=((0.07155)*sj5);
IkReal x2057=(cj5*r20);
IkReal x2058=(sj4*sj5);
IkReal x2059=(cj5*r00);
IkReal x2060=(cj1*x2051);
IkReal x2061=(cj3*cj4*sj5);
IkReal x2062=(sj1*x2051);
IkReal x2063=((0.27155)*x2052);
IkReal x2064=((1.0)*sj3*sj5);
IkReal x2065=(sj1*x2052);
IkReal x2066=(cj3*cj4*cj5);
IkReal x2067=((1.0)*x2062);
IkReal x2068=((1.0)*cj1*x2052);
IkReal x2069=(x2068+x2067);
evalcond[0]=(((r01*x2055))+x2065+(((-1.0)*x2060))+(((-1.0)*r02*x2054))+((r00*x2058)));
evalcond[1]=((((-1.0)*r22*x2054))+(((-1.0)*x2069))+((r20*x2058))+((r21*x2055)));
evalcond[2]=((((0.3571)*cj1))+(((-1.0)*pz))+(((-1.0)*cj1*x2063))+(((-0.07155)*x2057))+(((-0.27155)*x2062))+((r21*x2056)));
evalcond[3]=(((r01*x2056))+(((-1.0)*px))+(((-0.3571)*sj1))+((sj1*x2063))+(((-0.07155)*x2059))+(((-0.27155)*x2060)));
evalcond[4]=(((r21*x2066))+((r22*x2053))+x2060+((sj3*x2057))+(((-1.0)*x2065))+((r20*x2061))+(((-1.0)*r21*x2064)));
evalcond[5]=(((sj3*x2059))+(((-1.0)*x2069))+((r02*x2053))+((r00*x2061))+((r01*x2066))+(((-1.0)*r01*x2064)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2070=(cj1*cj4);
IkReal x2071=((1.0)*r22);
IkReal x2072=(cj4*sj1);
IkReal x2073=(sj4*sj5);
IkReal x2074=(cj1*cj5*sj4);
IkReal x2075=(cj5*sj1*sj4);
if( IKabs((((cj1*r20*x2073))+(((-1.0)*x2070*x2071))+((r11*x2075))+(((-1.0)*r12*x2072))+((r10*sj1*x2073))+((r21*x2074)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r20*sj1*x2073))+((r12*x2070))+(((-1.0)*x2071*x2072))+(((-1.0)*cj1*r10*x2073))+(((-1.0)*r11*x2074))+((r21*x2075)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*r20*x2073))+(((-1.0)*x2070*x2071))+((r11*x2075))+(((-1.0)*r12*x2072))+((r10*sj1*x2073))+((r21*x2074))))+IKsqr((((r20*sj1*x2073))+((r12*x2070))+(((-1.0)*x2071*x2072))+(((-1.0)*cj1*r10*x2073))+(((-1.0)*r11*x2074))+((r21*x2075))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*r20*x2073))+(((-1.0)*x2070*x2071))+((r11*x2075))+(((-1.0)*r12*x2072))+((r10*sj1*x2073))+((r21*x2074))), (((r20*sj1*x2073))+((r12*x2070))+(((-1.0)*x2071*x2072))+(((-1.0)*cj1*r10*x2073))+(((-1.0)*r11*x2074))+((r21*x2075))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2076=IKcos(j2);
IkReal x2077=IKsin(j2);
IkReal x2078=((1.0)*cj4);
IkReal x2079=((0.07155)*cj5);
IkReal x2080=(cj5*sj4);
IkReal x2081=(cj3*cj4);
IkReal x2082=(r20*sj5);
IkReal x2083=(r10*sj5);
IkReal x2084=((0.07155)*sj5);
IkReal x2085=(cj5*sj3);
IkReal x2086=(cj3*sj4);
IkReal x2087=(cj1*x2076);
IkReal x2088=((1.0)*sj3*sj5);
IkReal x2089=(cj1*x2077);
IkReal x2090=(sj1*x2076);
IkReal x2091=(sj1*x2077);
IkReal x2092=((1.0)*x2091);
evalcond[0]=((((-1.0)*x2092))+(((-1.0)*r12*x2078))+x2087+((sj4*x2083))+((r11*x2080)));
evalcond[1]=((((-1.0)*x2089))+(((-1.0)*r22*x2078))+((sj4*x2082))+((r21*x2080))+(((-1.0)*x2090)));
evalcond[2]=((((-0.27155)*x2089))+(((-0.27155)*x2090))+(((0.3571)*cj1))+(((-1.0)*pz))+(((-1.0)*r20*x2079))+((r21*x2084)));
evalcond[3]=((((-1.0)*r10*x2079))+(((0.3571)*sj1))+(((-0.27155)*x2091))+(((-1.0)*py))+((r11*x2084))+(((0.27155)*x2087)));
evalcond[4]=(((cj5*r11*x2081))+x2090+x2089+((x2081*x2083))+((r10*x2085))+(((-1.0)*r11*x2088))+((r12*x2086)));
evalcond[5]=((((-1.0)*x2092))+(((-1.0)*r21*x2088))+((cj5*r21*x2081))+x2087+((r20*x2085))+((x2081*x2082))+((r22*x2086)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2093=(cj4*sj1);
IkReal x2094=(cj5*sj4);
IkReal x2095=((1.0)*sj1);
IkReal x2096=(sj4*sj5);
IkReal x2097=((1.0)*cj1*cj4);
if( IKabs((((cj1*r21*x2094))+((cj1*r20*x2096))+((r12*x2093))+(((-1.0)*r10*x2095*x2096))+(((-1.0)*r22*x2097))+(((-1.0)*r11*x2094*x2095)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r21*sj1*x2094))+((cj1*r11*x2094))+((r20*sj1*x2096))+((cj1*r10*x2096))+(((-1.0)*r12*x2097))+(((-1.0)*r22*x2093)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*r21*x2094))+((cj1*r20*x2096))+((r12*x2093))+(((-1.0)*r10*x2095*x2096))+(((-1.0)*r22*x2097))+(((-1.0)*r11*x2094*x2095))))+IKsqr((((r21*sj1*x2094))+((cj1*r11*x2094))+((r20*sj1*x2096))+((cj1*r10*x2096))+(((-1.0)*r12*x2097))+(((-1.0)*r22*x2093))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*r21*x2094))+((cj1*r20*x2096))+((r12*x2093))+(((-1.0)*r10*x2095*x2096))+(((-1.0)*r22*x2097))+(((-1.0)*r11*x2094*x2095))), (((r21*sj1*x2094))+((cj1*r11*x2094))+((r20*sj1*x2096))+((cj1*r10*x2096))+(((-1.0)*r12*x2097))+(((-1.0)*r22*x2093))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2098=IKcos(j2);
IkReal x2099=IKsin(j2);
IkReal x2100=((1.0)*cj4);
IkReal x2101=((0.07155)*cj5);
IkReal x2102=(cj5*sj4);
IkReal x2103=(cj3*cj4);
IkReal x2104=(r20*sj5);
IkReal x2105=(r10*sj5);
IkReal x2106=((0.07155)*sj5);
IkReal x2107=(cj5*sj3);
IkReal x2108=(cj3*sj4);
IkReal x2109=(cj1*x2098);
IkReal x2110=((1.0)*sj3*sj5);
IkReal x2111=(sj1*x2098);
IkReal x2112=((0.27155)*x2099);
IkReal x2113=(sj1*x2099);
IkReal x2114=((1.0)*x2111);
IkReal x2115=((1.0)*cj1*x2099);
IkReal x2116=(x2114+x2115);
evalcond[0]=((((-1.0)*r12*x2100))+((r11*x2102))+((sj4*x2105))+x2113+(((-1.0)*x2109)));
evalcond[1]=((((-1.0)*r22*x2100))+((r21*x2102))+((sj4*x2104))+(((-1.0)*x2116)));
evalcond[2]=(((r21*x2106))+(((0.3571)*cj1))+(((-0.27155)*x2111))+(((-1.0)*pz))+(((-1.0)*r20*x2101))+(((-1.0)*cj1*x2112)));
evalcond[3]=((((-1.0)*r10*x2101))+((sj1*x2112))+((r11*x2106))+(((-1.0)*py))+(((-0.3571)*sj1))+(((-0.27155)*x2109)));
evalcond[4]=(((r20*x2107))+(((-1.0)*r21*x2110))+((x2103*x2104))+x2109+((r22*x2108))+((cj5*r21*x2103))+(((-1.0)*x2113)));
evalcond[5]=(((r12*x2108))+((x2103*x2105))+((r10*x2107))+((cj5*r11*x2103))+(((-1.0)*x2116))+(((-1.0)*r11*x2110)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2117=(cj4*r12);
IkReal x2118=(cj5*sj4);
IkReal x2119=(r21*sj0);
IkReal x2120=((1.0)*cj1);
IkReal x2121=(r10*sj4*sj5);
IkReal x2122=(r20*sj0*sj4*sj5);
IkReal x2123=((1.0)*cj4*r22*sj0);
CheckValue<IkReal> x2124=IKPowWithIntegerCheck(IKsign(sj0),-1);
if(!x2124.valid){
continue;
}
CheckValue<IkReal> x2125 = IKatan2WithCheck(IkReal(((((-1.0)*cj4*r22*sj0*x2120))+(((-1.0)*sj1*x2117))+((sj1*x2121))+((cj1*x2122))+((r11*sj1*x2118))+((cj1*x2118*x2119)))),IkReal((((sj1*x2118*x2119))+((sj1*x2122))+(((-1.0)*x2120*x2121))+(((-1.0)*r11*x2118*x2120))+((cj1*x2117))+(((-1.0)*sj1*x2123)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2125.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2124.value)))+(x2125.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x2126=IKcos(j2);
IkReal x2127=IKsin(j2);
IkReal x2128=(cj5*r21);
IkReal x2129=(cj3*cj4);
IkReal x2130=(r11*sj5);
IkReal x2131=((1.0)*sj3);
IkReal x2132=((1.0)*cj4);
IkReal x2133=((0.27155)*cj0);
IkReal x2134=((0.07155)*cj5);
IkReal x2135=(cj5*sj4);
IkReal x2136=((0.07155)*sj5);
IkReal x2137=((0.27155)*sj0);
IkReal x2138=((1.0)*sj1);
IkReal x2139=(r20*sj5);
IkReal x2140=(r10*sj5);
IkReal x2141=(cj3*sj4);
IkReal x2142=(cj5*sj3);
IkReal x2143=(r00*sj5);
IkReal x2144=((0.3571)*sj1);
IkReal x2145=(cj1*x2126);
IkReal x2146=(sj0*x2127);
IkReal x2147=(sj1*x2126);
IkReal x2148=(cj0*x2127);
IkReal x2149=(cj1*x2127);
IkReal x2150=(sj1*x2127);
evalcond[0]=((((-1.0)*r22*x2132))+(((-1.0)*x2149))+((sj4*x2139))+((sj4*x2128))+(((-1.0)*x2126*x2138)));
evalcond[1]=((((-1.0)*x2138*x2148))+((cj0*x2145))+((r01*x2135))+((sj4*x2143))+(((-1.0)*r02*x2132)));
evalcond[2]=((((-1.0)*x2138*x2146))+(((-1.0)*r12*x2132))+((r11*x2135))+((sj0*x2145))+((sj4*x2140)));
evalcond[3]=(((r21*x2136))+(((0.3571)*cj1))+(((-1.0)*pz))+(((-1.0)*r20*x2134))+(((-0.27155)*x2149))+(((-0.27155)*x2147)));
evalcond[4]=(((x2133*x2145))+(((-1.0)*x2133*x2150))+((cj0*x2144))+(((-1.0)*r00*x2134))+((r01*x2136))+(((-1.0)*px)));
evalcond[5]=((((-1.0)*x2137*x2150))+((sj0*x2144))+(((-1.0)*py))+(((0.07155)*x2130))+((x2137*x2145))+(((-1.0)*r10*x2134)));
evalcond[6]=(((r20*x2142))+((x2128*x2129))+x2145+(((-1.0)*r21*sj5*x2131))+(((-1.0)*x2127*x2138))+((x2129*x2139))+((r22*x2141)));
evalcond[7]=(((cj1*x2148))+((r02*x2141))+((cj0*x2147))+((x2129*x2143))+((cj5*r01*x2129))+((r00*x2142))+(((-1.0)*r01*sj5*x2131)));
evalcond[8]=(((cj1*x2146))+((cj5*r11*x2129))+((sj0*x2147))+((x2129*x2140))+(((-1.0)*x2130*x2131))+((r10*x2142))+((r12*x2141)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2151=((1.0)*cj4);
IkReal x2152=(cj0*cj1);
IkReal x2153=(sj4*sj5);
IkReal x2154=(cj5*sj4);
IkReal x2155=((1.0)*cj1);
IkReal x2156=(cj0*sj1);
IkReal x2157=(sj1*x2154);
CheckValue<IkReal> x2158=IKPowWithIntegerCheck(IKsign(cj0),-1);
if(!x2158.valid){
continue;
}
CheckValue<IkReal> x2159 = IKatan2WithCheck(IkReal((((r21*x2152*x2154))+(((-1.0)*r22*x2151*x2152))+((r20*x2152*x2153))+((r01*x2157))+(((-1.0)*r02*sj1*x2151))+((r00*sj1*x2153)))),IkReal((((cj1*cj4*r02))+(((-1.0)*r01*x2154*x2155))+((r21*x2154*x2156))+((r20*x2153*x2156))+(((-1.0)*r22*x2151*x2156))+(((-1.0)*r00*x2153*x2155)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2159.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2158.value)))+(x2159.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x2160=IKcos(j2);
IkReal x2161=IKsin(j2);
IkReal x2162=(cj5*r21);
IkReal x2163=(cj3*cj4);
IkReal x2164=(r11*sj5);
IkReal x2165=((1.0)*sj3);
IkReal x2166=((1.0)*cj4);
IkReal x2167=((0.27155)*cj0);
IkReal x2168=((0.07155)*cj5);
IkReal x2169=(cj5*sj4);
IkReal x2170=((0.07155)*sj5);
IkReal x2171=((0.27155)*sj0);
IkReal x2172=((1.0)*sj1);
IkReal x2173=(r20*sj5);
IkReal x2174=(r10*sj5);
IkReal x2175=(cj3*sj4);
IkReal x2176=(cj5*sj3);
IkReal x2177=(r00*sj5);
IkReal x2178=((0.3571)*sj1);
IkReal x2179=(cj1*x2160);
IkReal x2180=(sj0*x2161);
IkReal x2181=(sj1*x2160);
IkReal x2182=(cj0*x2161);
IkReal x2183=(cj1*x2161);
IkReal x2184=(sj1*x2161);
evalcond[0]=((((-1.0)*x2160*x2172))+(((-1.0)*x2183))+((sj4*x2162))+(((-1.0)*r22*x2166))+((sj4*x2173)));
evalcond[1]=(((cj0*x2179))+((r01*x2169))+(((-1.0)*x2172*x2182))+(((-1.0)*r02*x2166))+((sj4*x2177)));
evalcond[2]=((((-1.0)*x2172*x2180))+(((-1.0)*r12*x2166))+((r11*x2169))+((sj4*x2174))+((sj0*x2179)));
evalcond[3]=(((r21*x2170))+(((-0.27155)*x2181))+(((-0.27155)*x2183))+(((-1.0)*r20*x2168))+(((0.3571)*cj1))+(((-1.0)*pz)));
evalcond[4]=(((r01*x2170))+((cj0*x2178))+(((-1.0)*px))+((x2167*x2179))+(((-1.0)*x2167*x2184))+(((-1.0)*r00*x2168)));
evalcond[5]=((((-1.0)*r10*x2168))+(((-1.0)*x2171*x2184))+(((0.07155)*x2164))+((x2171*x2179))+(((-1.0)*py))+((sj0*x2178)));
evalcond[6]=(((x2163*x2173))+((r22*x2175))+(((-1.0)*r21*sj5*x2165))+(((-1.0)*x2161*x2172))+x2179+((r20*x2176))+((x2162*x2163)));
evalcond[7]=(((x2163*x2177))+((r00*x2176))+((cj1*x2182))+((cj0*x2181))+((r02*x2175))+((cj5*r01*x2163))+(((-1.0)*r01*sj5*x2165)));
evalcond[8]=(((x2163*x2174))+((cj1*x2180))+((sj0*x2181))+((cj5*r11*x2163))+((r10*x2176))+(((-1.0)*x2164*x2165))+((r12*x2175)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x2185=((1.0)*sj5);
IkReal x2186=((1.0)*sj4);
IkReal x2187=((1.0)*cj5*sj0);
CheckValue<IkReal> x2188=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj4*x2185))+(((-1.0)*cj5*r11*x2186))+((cj4*r12)))),-1);
if(!x2188.valid){
continue;
}
CheckValue<IkReal> x2189 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x2187))+((r21*sj0*sj5)))),IkReal(((((-1.0)*cj4*r21*x2187))+(((-1.0)*r22*sj0*x2186))+(((-1.0)*cj4*r20*sj0*x2185)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2189.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2188.value)))+(x2189.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x2190=IKsin(j3);
IkReal x2191=IKcos(j3);
IkReal x2192=(sj4*x2190);
IkReal x2193=(sj5*x2191);
IkReal x2194=(cj4*cj5*x2190);
IkReal x2195=(cj4*sj5*x2190);
IkReal x2196=((1.0)*cj5*x2191);
evalcond[0]=(((r22*x2192))+(((-1.0)*r20*x2196))+((r20*x2195))+((r21*x2193))+((r21*x2194)));
evalcond[1]=(sj0+((r02*x2192))+((r00*x2195))+((r01*x2193))+((r01*x2194))+(((-1.0)*r00*x2196)));
evalcond[2]=((((-1.0)*r10*x2196))+((r12*x2192))+((r11*x2194))+((r11*x2193))+((r10*x2195))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
j1eval[0]=sj0;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
j1eval[0]=cj0;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2197=((0.76043125175021)*sj4);
IkReal x2198=((0.200364043685242)*sj5);
IkReal x2199=((0.200364043685242)*cj5);
IkReal x2200=((0.76043125175021)*cj4);
if( IKabs(((((2.80033604032484)*py))+(((-1.0)*r12*x2200))+((r10*sj5*x2197))+((cj5*r11*x2197))+(((-1.0)*r11*x2198))+((r10*x2199)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r20*sj5*x2197))+(((2.80033604032484)*pz))+(((-1.0)*r21*x2198))+(((-1.0)*r22*x2200))+((cj5*r21*x2197))+((r20*x2199)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.80033604032484)*py))+(((-1.0)*r12*x2200))+((r10*sj5*x2197))+((cj5*r11*x2197))+(((-1.0)*r11*x2198))+((r10*x2199))))+IKsqr((((r20*sj5*x2197))+(((2.80033604032484)*pz))+(((-1.0)*r21*x2198))+(((-1.0)*r22*x2200))+((cj5*r21*x2197))+((r20*x2199))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((2.80033604032484)*py))+(((-1.0)*r12*x2200))+((r10*sj5*x2197))+((cj5*r11*x2197))+(((-1.0)*r11*x2198))+((r10*x2199))), (((r20*sj5*x2197))+(((2.80033604032484)*pz))+(((-1.0)*r21*x2198))+(((-1.0)*r22*x2200))+((cj5*r21*x2197))+((r20*x2199))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x2201=((1.0)*pz);
IkReal x2202=((0.27155)*sj5);
IkReal x2203=((0.07155)*cj5);
IkReal x2204=(cj3*cj4);
IkReal x2205=((0.27155)*sj4);
IkReal x2206=((0.27155)*cj4);
IkReal x2207=((0.07155)*sj5);
IkReal x2208=(cj5*r21);
IkReal x2209=(r10*x2203);
IkReal x2210=(r11*x2207);
IkReal x2211=((0.3571)*(IKsin(j1)));
IkReal x2212=(r21*x2207);
IkReal x2213=((0.3571)*(IKcos(j1)));
IkReal x2214=(r20*x2203);
IkReal x2215=((0.27155)*cj5*r11);
IkReal x2216=((0.27155)*cj5*sj3);
IkReal x2217=(x2201+x2214);
IkReal x2218=(x2211+x2210);
IkReal x2219=(x2213+x2212);
evalcond[0]=(x2219+(((-1.0)*x2217))+(((-1.0)*x2205*x2208))+(((-1.0)*r20*sj4*x2202))+((r22*x2206)));
evalcond[1]=(x2218+(((-1.0)*x2209))+((r12*x2206))+(((-1.0)*r10*sj4*x2202))+(((-1.0)*py))+(((-1.0)*cj5*r11*x2205)));
evalcond[2]=((((0.27155)*x2204*x2208))+(((-1.0)*r21*sj3*x2202))+((r20*x2216))+x2209+(((-1.0)*x2218))+((r20*x2202*x2204))+py+((cj3*r22*x2205)));
evalcond[3]=(x2219+(((-1.0)*x2217))+((r10*x2202*x2204))+(((-1.0)*r11*sj3*x2202))+((x2204*x2215))+((cj3*r12*x2205))+((r10*x2216)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2220=(cj1*cj4);
IkReal x2221=((1.0)*r22);
IkReal x2222=(cj4*sj1);
IkReal x2223=(sj4*sj5);
IkReal x2224=(cj1*cj5*sj4);
IkReal x2225=(cj5*sj1*sj4);
if( IKabs(((((-1.0)*x2220*x2221))+((r21*x2224))+((r10*sj1*x2223))+(((-1.0)*r12*x2222))+((r11*x2225))+((cj1*r20*x2223)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r12*x2220))+(((-1.0)*x2221*x2222))+(((-1.0)*r11*x2224))+((r21*x2225))+((r20*sj1*x2223))+(((-1.0)*cj1*r10*x2223)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x2220*x2221))+((r21*x2224))+((r10*sj1*x2223))+(((-1.0)*r12*x2222))+((r11*x2225))+((cj1*r20*x2223))))+IKsqr((((r12*x2220))+(((-1.0)*x2221*x2222))+(((-1.0)*r11*x2224))+((r21*x2225))+((r20*sj1*x2223))+(((-1.0)*cj1*r10*x2223))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x2220*x2221))+((r21*x2224))+((r10*sj1*x2223))+(((-1.0)*r12*x2222))+((r11*x2225))+((cj1*r20*x2223))), (((r12*x2220))+(((-1.0)*x2221*x2222))+(((-1.0)*r11*x2224))+((r21*x2225))+((r20*sj1*x2223))+(((-1.0)*cj1*r10*x2223))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2226=IKcos(j2);
IkReal x2227=IKsin(j2);
IkReal x2228=((1.0)*cj4);
IkReal x2229=((0.07155)*cj5);
IkReal x2230=(cj5*sj4);
IkReal x2231=(cj3*cj4);
IkReal x2232=(r20*sj5);
IkReal x2233=(r10*sj5);
IkReal x2234=((0.07155)*sj5);
IkReal x2235=(cj5*sj3);
IkReal x2236=(cj3*sj4);
IkReal x2237=(cj1*x2226);
IkReal x2238=((1.0)*sj3*sj5);
IkReal x2239=(cj1*x2227);
IkReal x2240=(sj1*x2226);
IkReal x2241=(sj1*x2227);
IkReal x2242=((1.0)*x2241);
evalcond[0]=(((sj4*x2233))+x2237+(((-1.0)*r12*x2228))+(((-1.0)*x2242))+((r11*x2230)));
evalcond[1]=(((sj4*x2232))+(((-1.0)*x2240))+((r21*x2230))+(((-1.0)*x2239))+(((-1.0)*r22*x2228)));
evalcond[2]=((((-1.0)*r20*x2229))+(((-0.27155)*x2240))+(((0.3571)*cj1))+((r21*x2234))+(((-0.27155)*x2239))+(((-1.0)*pz)));
evalcond[3]=((((-1.0)*r10*x2229))+(((-0.27155)*x2241))+(((0.3571)*sj1))+(((-1.0)*py))+((r11*x2234))+(((0.27155)*x2237)));
evalcond[4]=(x2239+x2240+((cj5*r11*x2231))+((r10*x2235))+(((-1.0)*r11*x2238))+((x2231*x2233))+((r12*x2236)));
evalcond[5]=((((-1.0)*r21*x2238))+x2237+((r22*x2236))+((cj5*r21*x2231))+((r20*x2235))+(((-1.0)*x2242))+((x2231*x2232)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2243=((0.76043125175021)*sj4);
IkReal x2244=((0.200364043685242)*sj5);
IkReal x2245=((0.200364043685242)*cj5);
IkReal x2246=((0.76043125175021)*cj4);
if( IKabs(((((-2.80033604032484)*py))+((r11*x2244))+(((-1.0)*r10*x2245))+(((-1.0)*r10*sj5*x2243))+(((-1.0)*cj5*r11*x2243))+((r12*x2246)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.80033604032484)*pz))+(((-1.0)*r22*x2246))+((r20*x2245))+((r20*sj5*x2243))+((cj5*r21*x2243))+(((-1.0)*r21*x2244)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.80033604032484)*py))+((r11*x2244))+(((-1.0)*r10*x2245))+(((-1.0)*r10*sj5*x2243))+(((-1.0)*cj5*r11*x2243))+((r12*x2246))))+IKsqr(((((2.80033604032484)*pz))+(((-1.0)*r22*x2246))+((r20*x2245))+((r20*sj5*x2243))+((cj5*r21*x2243))+(((-1.0)*r21*x2244))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-2.80033604032484)*py))+((r11*x2244))+(((-1.0)*r10*x2245))+(((-1.0)*r10*sj5*x2243))+(((-1.0)*cj5*r11*x2243))+((r12*x2246))), ((((2.80033604032484)*pz))+(((-1.0)*r22*x2246))+((r20*x2245))+((r20*sj5*x2243))+((cj5*r21*x2243))+(((-1.0)*r21*x2244))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x2247=((0.27155)*sj5);
IkReal x2248=((0.07155)*cj5);
IkReal x2249=(cj3*cj4);
IkReal x2250=((0.27155)*sj4);
IkReal x2251=((0.27155)*cj4);
IkReal x2252=((0.07155)*sj5);
IkReal x2253=(cj5*r21);
IkReal x2254=(r10*x2248);
IkReal x2255=((0.3571)*(IKsin(j1)));
IkReal x2256=(r11*x2252);
IkReal x2257=(r20*x2248);
IkReal x2258=(r21*x2252);
IkReal x2259=((0.3571)*(IKcos(j1)));
IkReal x2260=((0.27155)*cj5*r11);
IkReal x2261=((0.27155)*cj5*sj3);
IkReal x2262=(x2259+x2258);
IkReal x2263=(x2255+x2254+py);
evalcond[0]=(x2263+((r10*sj4*x2247))+(((-1.0)*r12*x2251))+(((-1.0)*x2256))+((cj5*r11*x2250)));
evalcond[1]=(x2262+(((-1.0)*x2257))+(((-1.0)*pz))+((r22*x2251))+(((-1.0)*r20*sj4*x2247))+(((-1.0)*x2250*x2253)));
evalcond[2]=(x2263+(((-1.0)*cj3*r22*x2250))+(((-1.0)*r20*x2247*x2249))+(((-1.0)*r20*x2261))+(((-0.27155)*x2249*x2253))+(((-1.0)*x2256))+((r21*sj3*x2247)));
evalcond[3]=(x2257+((cj3*r12*x2250))+((r10*x2247*x2249))+((r10*x2261))+pz+((x2249*x2260))+(((-1.0)*x2262))+(((-1.0)*r11*sj3*x2247)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2264=(cj4*sj1);
IkReal x2265=(cj5*sj4);
IkReal x2266=((1.0)*sj1);
IkReal x2267=(sj4*sj5);
IkReal x2268=((1.0)*cj1*cj4);
if( IKabs(((((-1.0)*r11*x2265*x2266))+(((-1.0)*r22*x2268))+((r12*x2264))+((cj1*r20*x2267))+((cj1*r21*x2265))+(((-1.0)*r10*x2266*x2267)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*r11*x2265))+(((-1.0)*r22*x2264))+((r21*sj1*x2265))+((cj1*r10*x2267))+((r20*sj1*x2267))+(((-1.0)*r12*x2268)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x2265*x2266))+(((-1.0)*r22*x2268))+((r12*x2264))+((cj1*r20*x2267))+((cj1*r21*x2265))+(((-1.0)*r10*x2266*x2267))))+IKsqr((((cj1*r11*x2265))+(((-1.0)*r22*x2264))+((r21*sj1*x2265))+((cj1*r10*x2267))+((r20*sj1*x2267))+(((-1.0)*r12*x2268))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r11*x2265*x2266))+(((-1.0)*r22*x2268))+((r12*x2264))+((cj1*r20*x2267))+((cj1*r21*x2265))+(((-1.0)*r10*x2266*x2267))), (((cj1*r11*x2265))+(((-1.0)*r22*x2264))+((r21*sj1*x2265))+((cj1*r10*x2267))+((r20*sj1*x2267))+(((-1.0)*r12*x2268))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2269=IKcos(j2);
IkReal x2270=IKsin(j2);
IkReal x2271=((1.0)*cj4);
IkReal x2272=((0.07155)*cj5);
IkReal x2273=(cj5*sj4);
IkReal x2274=(cj3*cj4);
IkReal x2275=(r20*sj5);
IkReal x2276=(r10*sj5);
IkReal x2277=((0.07155)*sj5);
IkReal x2278=(cj5*sj3);
IkReal x2279=(cj3*sj4);
IkReal x2280=(cj1*x2269);
IkReal x2281=((1.0)*sj3*sj5);
IkReal x2282=(sj1*x2269);
IkReal x2283=((0.27155)*x2270);
IkReal x2284=(sj1*x2270);
IkReal x2285=((1.0)*x2282);
IkReal x2286=((1.0)*cj1*x2270);
IkReal x2287=(x2285+x2286);
evalcond[0]=(x2284+((sj4*x2276))+(((-1.0)*x2280))+((r11*x2273))+(((-1.0)*r12*x2271)));
evalcond[1]=(((r21*x2273))+((sj4*x2275))+(((-1.0)*x2287))+(((-1.0)*r22*x2271)));
evalcond[2]=((((-0.27155)*x2282))+((r21*x2277))+(((0.3571)*cj1))+(((-1.0)*r20*x2272))+(((-1.0)*pz))+(((-1.0)*cj1*x2283)));
evalcond[3]=((((-0.27155)*x2280))+(((-1.0)*py))+(((-0.3571)*sj1))+((sj1*x2283))+((r11*x2277))+(((-1.0)*r10*x2272)));
evalcond[4]=(x2280+((cj5*r21*x2274))+(((-1.0)*x2284))+((r22*x2279))+((r20*x2278))+(((-1.0)*r21*x2281))+((x2274*x2275)));
evalcond[5]=((((-1.0)*r11*x2281))+(((-1.0)*x2287))+((cj5*r11*x2274))+((r10*x2278))+((r12*x2279))+((x2274*x2276)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2288=((0.76043125175021)*sj4);
IkReal x2289=((0.76043125175021)*cj4);
IkReal x2290=((0.200364043685242)*sj5);
IkReal x2291=((0.200364043685242)*cj5);
if( IKabs(((((-1.0)*r02*x2289))+(((2.80033604032484)*px))+((r00*sj5*x2288))+(((-1.0)*r01*x2290))+((r00*x2291))+((cj5*r01*x2288)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.80033604032484)*pz))+((r20*sj5*x2288))+((cj5*r21*x2288))+((r20*x2291))+(((-1.0)*r22*x2289))+(((-1.0)*r21*x2290)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r02*x2289))+(((2.80033604032484)*px))+((r00*sj5*x2288))+(((-1.0)*r01*x2290))+((r00*x2291))+((cj5*r01*x2288))))+IKsqr(((((2.80033604032484)*pz))+((r20*sj5*x2288))+((cj5*r21*x2288))+((r20*x2291))+(((-1.0)*r22*x2289))+(((-1.0)*r21*x2290))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*r02*x2289))+(((2.80033604032484)*px))+((r00*sj5*x2288))+(((-1.0)*r01*x2290))+((r00*x2291))+((cj5*r01*x2288))), ((((2.80033604032484)*pz))+((r20*sj5*x2288))+((cj5*r21*x2288))+((r20*x2291))+(((-1.0)*r22*x2289))+(((-1.0)*r21*x2290))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x2292=((1.0)*pz);
IkReal x2293=((0.27155)*sj4);
IkReal x2294=(r00*sj5);
IkReal x2295=((0.07155)*sj5);
IkReal x2296=((0.27155)*cj4);
IkReal x2297=(cj5*r20);
IkReal x2298=(cj3*cj5);
IkReal x2299=((0.27155)*sj3);
IkReal x2300=(r20*sj5);
IkReal x2301=(cj5*r00);
IkReal x2302=((0.07155)*x2301);
IkReal x2303=(r01*x2295);
IkReal x2304=((0.3571)*(IKsin(j1)));
IkReal x2305=(r21*x2295);
IkReal x2306=((0.3571)*(IKcos(j1)));
IkReal x2307=((0.07155)*x2297);
IkReal x2308=(sj5*x2299);
IkReal x2309=(x2292+x2307);
IkReal x2310=(x2303+x2304);
IkReal x2311=(x2305+x2306);
evalcond[0]=((((-1.0)*x2293*x2300))+x2311+((r22*x2296))+(((-1.0)*x2309))+(((-1.0)*cj5*r21*x2293)));
evalcond[1]=((((-1.0)*cj5*r01*x2293))+x2310+(((-1.0)*x2293*x2294))+(((-1.0)*x2302))+((r02*x2296))+(((-1.0)*px)));
evalcond[2]=(((r21*x2296*x2298))+(((-1.0)*r21*x2308))+x2302+((cj3*x2296*x2300))+((cj3*r22*x2293))+px+(((-1.0)*x2310))+((x2297*x2299)));
evalcond[3]=(x2311+(((-1.0)*r01*x2308))+((r01*x2296*x2298))+((cj3*x2294*x2296))+(((-1.0)*x2309))+((cj3*r02*x2293))+((x2299*x2301)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2312=(cj5*sj4);
IkReal x2313=(cj4*r02);
IkReal x2314=((1.0)*cj1);
IkReal x2315=(sj4*sj5);
IkReal x2316=((1.0)*cj4*r22);
IkReal x2317=(sj1*x2315);
if( IKabs(((((-1.0)*cj4*r22*x2314))+((cj1*r20*x2315))+((r01*sj1*x2312))+((cj1*r21*x2312))+((r00*x2317))+(((-1.0)*sj1*x2313)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x2312*x2314))+((cj1*x2313))+(((-1.0)*r00*x2314*x2315))+(((-1.0)*sj1*x2316))+((r20*x2317))+((r21*sj1*x2312)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r22*x2314))+((cj1*r20*x2315))+((r01*sj1*x2312))+((cj1*r21*x2312))+((r00*x2317))+(((-1.0)*sj1*x2313))))+IKsqr(((((-1.0)*r01*x2312*x2314))+((cj1*x2313))+(((-1.0)*r00*x2314*x2315))+(((-1.0)*sj1*x2316))+((r20*x2317))+((r21*sj1*x2312))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*cj4*r22*x2314))+((cj1*r20*x2315))+((r01*sj1*x2312))+((cj1*r21*x2312))+((r00*x2317))+(((-1.0)*sj1*x2313))), ((((-1.0)*r01*x2312*x2314))+((cj1*x2313))+(((-1.0)*r00*x2314*x2315))+(((-1.0)*sj1*x2316))+((r20*x2317))+((r21*sj1*x2312))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2318=IKcos(j2);
IkReal x2319=IKsin(j2);
IkReal x2320=(cj3*sj4);
IkReal x2321=((1.0)*cj4);
IkReal x2322=(r00*sj5);
IkReal x2323=(cj3*cj4);
IkReal x2324=(cj5*sj4);
IkReal x2325=((0.07155)*sj5);
IkReal x2326=(cj5*r20);
IkReal x2327=(cj5*r00);
IkReal x2328=(r20*sj5);
IkReal x2329=(cj1*x2318);
IkReal x2330=(sj1*x2318);
IkReal x2331=(cj1*x2319);
IkReal x2332=((1.0)*sj3*sj5);
IkReal x2333=(sj1*x2319);
IkReal x2334=((1.0)*x2333);
evalcond[0]=((((-1.0)*x2334))+x2329+((sj4*x2322))+((r01*x2324))+(((-1.0)*r02*x2321)));
evalcond[1]=((((-1.0)*r22*x2321))+((r21*x2324))+((sj4*x2328))+(((-1.0)*x2330))+(((-1.0)*x2331)));
evalcond[2]=((((-0.27155)*x2331))+(((-0.27155)*x2330))+(((-0.07155)*x2326))+((r21*x2325))+(((0.3571)*cj1))+(((-1.0)*pz)));
evalcond[3]=((((-0.27155)*x2333))+(((0.3571)*sj1))+(((-0.07155)*x2327))+(((0.27155)*x2329))+(((-1.0)*px))+((r01*x2325)));
evalcond[4]=(((r02*x2320))+((sj3*x2327))+((cj5*r01*x2323))+x2330+x2331+((x2322*x2323))+(((-1.0)*r01*x2332)));
evalcond[5]=(((sj3*x2326))+(((-1.0)*x2334))+x2329+((r22*x2320))+((cj5*r21*x2323))+(((-1.0)*r21*x2332))+((x2323*x2328)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2335=((0.76043125175021)*sj4);
IkReal x2336=((0.76043125175021)*cj4);
IkReal x2337=((0.200364043685242)*sj5);
IkReal x2338=((0.200364043685242)*cj5);
if( IKabs(((((-1.0)*r00*sj5*x2335))+((r02*x2336))+(((-2.80033604032484)*px))+(((-1.0)*cj5*r01*x2335))+((r01*x2337))+(((-1.0)*r00*x2338)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r20*sj5*x2335))+(((2.80033604032484)*pz))+(((-1.0)*r22*x2336))+((cj5*r21*x2335))+(((-1.0)*r21*x2337))+((r20*x2338)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*sj5*x2335))+((r02*x2336))+(((-2.80033604032484)*px))+(((-1.0)*cj5*r01*x2335))+((r01*x2337))+(((-1.0)*r00*x2338))))+IKsqr((((r20*sj5*x2335))+(((2.80033604032484)*pz))+(((-1.0)*r22*x2336))+((cj5*r21*x2335))+(((-1.0)*r21*x2337))+((r20*x2338))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*r00*sj5*x2335))+((r02*x2336))+(((-2.80033604032484)*px))+(((-1.0)*cj5*r01*x2335))+((r01*x2337))+(((-1.0)*r00*x2338))), (((r20*sj5*x2335))+(((2.80033604032484)*pz))+(((-1.0)*r22*x2336))+((cj5*r21*x2335))+(((-1.0)*r21*x2337))+((r20*x2338))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x2339=((0.27155)*sj4);
IkReal x2340=(r00*sj5);
IkReal x2341=((0.07155)*sj5);
IkReal x2342=((0.27155)*cj4);
IkReal x2343=(cj5*r20);
IkReal x2344=(cj3*cj5);
IkReal x2345=((0.27155)*sj3);
IkReal x2346=(r20*sj5);
IkReal x2347=(cj5*r00);
IkReal x2348=((0.07155)*x2347);
IkReal x2349=((0.3571)*(IKsin(j1)));
IkReal x2350=(r01*x2341);
IkReal x2351=((0.07155)*x2343);
IkReal x2352=(r21*x2341);
IkReal x2353=((0.3571)*(IKcos(j1)));
IkReal x2354=(sj5*x2345);
IkReal x2355=(x2352+x2353);
IkReal x2356=(x2349+x2348+px);
evalcond[0]=(x2356+((cj5*r01*x2339))+(((-1.0)*r02*x2342))+((x2339*x2340))+(((-1.0)*x2350)));
evalcond[1]=((((-1.0)*x2339*x2346))+x2355+((r22*x2342))+(((-1.0)*cj5*r21*x2339))+(((-1.0)*pz))+(((-1.0)*x2351)));
evalcond[2]=(x2356+(((-1.0)*cj3*x2342*x2346))+(((-1.0)*x2343*x2345))+(((-1.0)*cj3*r22*x2339))+(((-1.0)*r21*x2342*x2344))+((r21*x2354))+(((-1.0)*x2350)));
evalcond[3]=(x2351+((r01*x2342*x2344))+(((-1.0)*r01*x2354))+((cj3*r02*x2339))+((x2345*x2347))+pz+((cj3*x2340*x2342))+(((-1.0)*x2355)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2357=(cj4*r02);
IkReal x2358=(cj5*sj4);
IkReal x2359=((1.0)*sj1);
IkReal x2360=(sj4*sj5);
IkReal x2361=((1.0)*cj4*r22);
if( IKabs(((((-1.0)*r00*x2359*x2360))+((cj1*r20*x2360))+((cj1*r21*x2358))+(((-1.0)*r01*x2358*x2359))+(((-1.0)*cj1*x2361))+((sj1*x2357)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*r00*x2360))+(((-1.0)*cj1*x2357))+((r21*sj1*x2358))+(((-1.0)*cj4*r22*x2359))+((r20*sj1*x2360))+((cj1*r01*x2358)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x2359*x2360))+((cj1*r20*x2360))+((cj1*r21*x2358))+(((-1.0)*r01*x2358*x2359))+(((-1.0)*cj1*x2361))+((sj1*x2357))))+IKsqr((((cj1*r00*x2360))+(((-1.0)*cj1*x2357))+((r21*sj1*x2358))+(((-1.0)*cj4*r22*x2359))+((r20*sj1*x2360))+((cj1*r01*x2358))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r00*x2359*x2360))+((cj1*r20*x2360))+((cj1*r21*x2358))+(((-1.0)*r01*x2358*x2359))+(((-1.0)*cj1*x2361))+((sj1*x2357))), (((cj1*r00*x2360))+(((-1.0)*cj1*x2357))+((r21*sj1*x2358))+(((-1.0)*cj4*r22*x2359))+((r20*sj1*x2360))+((cj1*r01*x2358))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2362=IKcos(j2);
IkReal x2363=IKsin(j2);
IkReal x2364=(cj3*sj4);
IkReal x2365=((1.0)*cj4);
IkReal x2366=(cj5*sj4);
IkReal x2367=((0.07155)*sj5);
IkReal x2368=(cj5*r20);
IkReal x2369=(sj4*sj5);
IkReal x2370=(cj5*r00);
IkReal x2371=(cj1*x2362);
IkReal x2372=(cj3*cj4*sj5);
IkReal x2373=(sj1*x2362);
IkReal x2374=((0.27155)*x2363);
IkReal x2375=((1.0)*sj3*sj5);
IkReal x2376=(sj1*x2363);
IkReal x2377=(cj3*cj4*cj5);
IkReal x2378=((1.0)*x2373);
IkReal x2379=((1.0)*cj1*x2363);
IkReal x2380=(x2378+x2379);
evalcond[0]=(x2376+(((-1.0)*x2371))+((r01*x2366))+((r00*x2369))+(((-1.0)*r02*x2365)));
evalcond[1]=(((r20*x2369))+(((-1.0)*x2380))+(((-1.0)*r22*x2365))+((r21*x2366)));
evalcond[2]=((((0.3571)*cj1))+(((-0.27155)*x2373))+(((-0.07155)*x2368))+(((-1.0)*pz))+(((-1.0)*cj1*x2374))+((r21*x2367)));
evalcond[3]=(((sj1*x2374))+(((-0.27155)*x2371))+(((-0.07155)*x2370))+(((-1.0)*px))+(((-0.3571)*sj1))+((r01*x2367)));
evalcond[4]=(((r20*x2372))+x2371+(((-1.0)*x2376))+(((-1.0)*r21*x2375))+((sj3*x2368))+((r22*x2364))+((r21*x2377)));
evalcond[5]=(((r02*x2364))+((sj3*x2370))+(((-1.0)*r01*x2375))+(((-1.0)*x2380))+((r00*x2372))+((r01*x2377)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1, j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2381=((0.27155)*cj0);
IkReal x2382=(sj4*sj5);
IkReal x2383=((0.07155)*cj0);
IkReal x2384=(cj5*sj4);
CheckValue<IkReal> x2385=IKPowWithIntegerCheck(cj0,-2);
if(!x2385.valid){
continue;
}
if( IKabs(((-2.80033604032484)*(x2385.value)*(((((-1.0)*cj5*r00*x2383))+(((-1.0)*r00*x2381*x2382))+(((-1.0)*r01*x2381*x2384))+((cj4*r02*x2381))+((r01*sj5*x2383))+(((-1.0)*cj0*px)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.200364043685242)*r21*sj5))+(((2.80033604032484)*pz))+(((0.76043125175021)*r21*x2384))+(((0.200364043685242)*cj5*r20))+(((0.76043125175021)*r20*x2382))+(((-0.76043125175021)*cj4*r22)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-2.80033604032484)*(x2385.value)*(((((-1.0)*cj5*r00*x2383))+(((-1.0)*r00*x2381*x2382))+(((-1.0)*r01*x2381*x2384))+((cj4*r02*x2381))+((r01*sj5*x2383))+(((-1.0)*cj0*px))))))+IKsqr(((((-0.200364043685242)*r21*sj5))+(((2.80033604032484)*pz))+(((0.76043125175021)*r21*x2384))+(((0.200364043685242)*cj5*r20))+(((0.76043125175021)*r20*x2382))+(((-0.76043125175021)*cj4*r22))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-2.80033604032484)*(x2385.value)*(((((-1.0)*cj5*r00*x2383))+(((-1.0)*r00*x2381*x2382))+(((-1.0)*r01*x2381*x2384))+((cj4*r02*x2381))+((r01*sj5*x2383))+(((-1.0)*cj0*px))))), ((((-0.200364043685242)*r21*sj5))+(((2.80033604032484)*pz))+(((0.76043125175021)*r21*x2384))+(((0.200364043685242)*cj5*r20))+(((0.76043125175021)*r20*x2382))+(((-0.76043125175021)*cj4*r22))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[9];
IkReal x2386=IKsin(j1);
IkReal x2387=IKcos(j1);
IkReal x2388=((0.07155)*cj5);
IkReal x2389=(r00*sj0);
IkReal x2390=(cj3*cj4);
IkReal x2391=(cj0*sj5);
IkReal x2392=((0.07155)*r11);
IkReal x2393=(cj5*sj3);
IkReal x2394=((0.27155)*sj4);
IkReal x2395=(cj3*r22);
IkReal x2396=(cj5*r11);
IkReal x2397=((0.27155)*r20);
IkReal x2398=((1.0)*sj0);
IkReal x2399=(sj0*sj5);
IkReal x2400=((0.27155)*sj5);
IkReal x2401=((1.0)*pz);
IkReal x2402=((0.07155)*r21);
IkReal x2403=(cj5*r01);
IkReal x2404=((0.27155)*cj4);
IkReal x2405=(cj5*r21);
IkReal x2406=((1.0)*cj0);
IkReal x2407=(sj0*x2397);
IkReal x2408=((0.3571)*x2387);
IkReal x2409=((0.07155)*r01*sj5);
IkReal x2410=((0.3571)*x2386);
IkReal x2411=((0.27155)*r21*sj3);
IkReal x2412=(cj0*x2410);
IkReal x2413=(sj0*x2412);
evalcond[0]=(x2408+(((-1.0)*x2394*x2405))+(((-1.0)*x2401))+(((-1.0)*r20*x2388))+((sj5*x2402))+(((-1.0)*r20*sj5*x2394))+((r22*x2404)));
evalcond[1]=(((x2392*x2399))+((x2410*(sj0*sj0)))+(((-1.0)*r10*sj0*x2388))+(((-1.0)*sj0*x2394*x2396))+(((-1.0)*py*x2398))+((r12*sj0*x2404))+(((-1.0)*r10*x2394*x2399)));
evalcond[2]=((((-1.0)*px*x2406))+(((-1.0)*cj0*r00*x2388))+(((-1.0)*r00*x2391*x2394))+((cj0*r02*x2404))+((cj0*x2412))+(((-1.0)*cj0*x2394*x2403))+(((0.07155)*r01*x2391)));
evalcond[3]=(((sj0*x2394*x2395))+(((0.27155)*sj0*x2390*x2405))+(((-1.0)*x2399*x2411))+(((-1.0)*sj0*x2410))+((x2393*x2407))+(((-1.0)*sj5*x2392))+py+((r10*x2388))+((x2390*x2397*x2399)));
evalcond[4]=(((cj0*x2394*x2395))+(((-1.0)*x2409))+((r00*x2388))+(((-1.0)*x2391*x2411))+((x2390*x2391*x2397))+((cj0*x2393*x2397))+(((-1.0)*x2412))+px+(((0.27155)*cj0*x2390*x2405)));
evalcond[5]=((((-1.0)*r11*sj3*x2400))+((cj3*r12*x2394))+(((0.27155)*x2390*x2396))+((x2399*x2402))+(((-1.0)*pz*x2398))+(((-1.0)*r20*sj0*x2388))+((r10*x2390*x2400))+((sj0*x2408))+(((0.27155)*r10*x2393)));
evalcond[6]=(((cj3*r02*x2394))+((cj0*x2408))+(((0.27155)*r00*x2393))+(((-1.0)*r01*sj3*x2400))+(((-1.0)*cj0*r20*x2388))+((r00*x2390*x2400))+(((-1.0)*cj0*x2401))+((x2391*x2402))+(((0.27155)*x2390*x2403)));
evalcond[7]=(x2413+(((-1.0)*px*x2398))+((cj0*r12*x2404))+(((-1.0)*r10*x2391*x2394))+(((-1.0)*x2388*x2389))+(((-1.0)*cj0*x2394*x2396))+(((0.07155)*r01*x2399)));
evalcond[8]=(x2413+(((-1.0)*sj5*x2389*x2394))+(((-1.0)*sj0*x2394*x2403))+(((-1.0)*py*x2406))+((r02*sj0*x2404))+(((-1.0)*cj0*r10*x2388))+((x2391*x2392)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=cj0;
j2eval[1]=IKsign(cj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=sj0;
j2eval[1]=IKsign(sj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2414=(cj5*sj4);
IkReal x2415=(cj4*r02);
IkReal x2416=((1.0)*cj1);
IkReal x2417=(sj4*sj5);
IkReal x2418=((1.0)*cj4*r22);
IkReal x2419=(sj1*x2417);
if( IKabs((((cj1*r21*x2414))+((cj1*r20*x2417))+(((-1.0)*sj1*x2415))+((r00*x2419))+(((-1.0)*cj4*r22*x2416))+((r01*sj1*x2414)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x2414*x2416))+((r20*x2419))+((r21*sj1*x2414))+((cj1*x2415))+(((-1.0)*sj1*x2418))+(((-1.0)*r00*x2416*x2417)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*r21*x2414))+((cj1*r20*x2417))+(((-1.0)*sj1*x2415))+((r00*x2419))+(((-1.0)*cj4*r22*x2416))+((r01*sj1*x2414))))+IKsqr(((((-1.0)*r01*x2414*x2416))+((r20*x2419))+((r21*sj1*x2414))+((cj1*x2415))+(((-1.0)*sj1*x2418))+(((-1.0)*r00*x2416*x2417))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*r21*x2414))+((cj1*r20*x2417))+(((-1.0)*sj1*x2415))+((r00*x2419))+(((-1.0)*cj4*r22*x2416))+((r01*sj1*x2414))), ((((-1.0)*r01*x2414*x2416))+((r20*x2419))+((r21*sj1*x2414))+((cj1*x2415))+(((-1.0)*sj1*x2418))+(((-1.0)*r00*x2416*x2417))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2420=IKcos(j2);
IkReal x2421=IKsin(j2);
IkReal x2422=(cj3*sj4);
IkReal x2423=((1.0)*cj4);
IkReal x2424=(r00*sj5);
IkReal x2425=(cj3*cj4);
IkReal x2426=(cj5*sj4);
IkReal x2427=((0.07155)*sj5);
IkReal x2428=(cj5*r20);
IkReal x2429=(cj5*r00);
IkReal x2430=(r20*sj5);
IkReal x2431=(cj1*x2420);
IkReal x2432=(sj1*x2420);
IkReal x2433=(cj1*x2421);
IkReal x2434=((1.0)*sj3*sj5);
IkReal x2435=(sj1*x2421);
IkReal x2436=((1.0)*x2435);
evalcond[0]=((((-1.0)*r02*x2423))+x2431+(((-1.0)*x2436))+((sj4*x2424))+((r01*x2426)));
evalcond[1]=((((-1.0)*x2433))+(((-1.0)*x2432))+((r21*x2426))+(((-1.0)*r22*x2423))+((sj4*x2430)));
evalcond[2]=(((r21*x2427))+(((0.3571)*cj1))+(((-0.27155)*x2433))+(((-0.27155)*x2432))+(((-0.07155)*x2428))+(((-1.0)*pz)));
evalcond[3]=((((0.3571)*sj1))+(((-0.27155)*x2435))+(((-0.07155)*x2429))+(((0.27155)*x2431))+(((-1.0)*px))+((r01*x2427)));
evalcond[4]=(x2433+x2432+(((-1.0)*r01*x2434))+((x2424*x2425))+((cj5*r01*x2425))+((sj3*x2429))+((r02*x2422)));
evalcond[5]=(((r22*x2422))+x2431+((x2425*x2430))+(((-1.0)*x2436))+((cj5*r21*x2425))+(((-1.0)*r21*x2434))+((sj3*x2428)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2437=(cj4*r02);
IkReal x2438=(cj5*sj4);
IkReal x2439=((1.0)*sj1);
IkReal x2440=(sj4*sj5);
IkReal x2441=((1.0)*cj4*r22);
if( IKabs((((cj1*r20*x2440))+(((-1.0)*r00*x2439*x2440))+((cj1*r21*x2438))+(((-1.0)*cj1*x2441))+(((-1.0)*r01*x2438*x2439))+((sj1*x2437)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r21*sj1*x2438))+((cj1*r01*x2438))+(((-1.0)*cj1*x2437))+(((-1.0)*cj4*r22*x2439))+((cj1*r00*x2440))+((r20*sj1*x2440)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*r20*x2440))+(((-1.0)*r00*x2439*x2440))+((cj1*r21*x2438))+(((-1.0)*cj1*x2441))+(((-1.0)*r01*x2438*x2439))+((sj1*x2437))))+IKsqr((((r21*sj1*x2438))+((cj1*r01*x2438))+(((-1.0)*cj1*x2437))+(((-1.0)*cj4*r22*x2439))+((cj1*r00*x2440))+((r20*sj1*x2440))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*r20*x2440))+(((-1.0)*r00*x2439*x2440))+((cj1*r21*x2438))+(((-1.0)*cj1*x2441))+(((-1.0)*r01*x2438*x2439))+((sj1*x2437))), (((r21*sj1*x2438))+((cj1*r01*x2438))+(((-1.0)*cj1*x2437))+(((-1.0)*cj4*r22*x2439))+((cj1*r00*x2440))+((r20*sj1*x2440))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2442=IKcos(j2);
IkReal x2443=IKsin(j2);
IkReal x2444=(cj3*sj4);
IkReal x2445=((1.0)*cj4);
IkReal x2446=(cj5*sj4);
IkReal x2447=((0.07155)*sj5);
IkReal x2448=(cj5*r20);
IkReal x2449=(sj4*sj5);
IkReal x2450=(cj5*r00);
IkReal x2451=(cj1*x2442);
IkReal x2452=(cj3*cj4*sj5);
IkReal x2453=(sj1*x2442);
IkReal x2454=((0.27155)*x2443);
IkReal x2455=((1.0)*sj3*sj5);
IkReal x2456=(sj1*x2443);
IkReal x2457=(cj3*cj4*cj5);
IkReal x2458=((1.0)*x2453);
IkReal x2459=((1.0)*cj1*x2443);
IkReal x2460=(x2459+x2458);
evalcond[0]=(x2456+((r00*x2449))+((r01*x2446))+(((-1.0)*x2451))+(((-1.0)*r02*x2445)));
evalcond[1]=((((-1.0)*x2460))+(((-1.0)*r22*x2445))+((r20*x2449))+((r21*x2446)));
evalcond[2]=((((-0.07155)*x2448))+(((0.3571)*cj1))+(((-1.0)*pz))+(((-1.0)*cj1*x2454))+(((-0.27155)*x2453))+((r21*x2447)));
evalcond[3]=((((-0.07155)*x2450))+((sj1*x2454))+(((-1.0)*px))+(((-0.3571)*sj1))+((r01*x2447))+(((-0.27155)*x2451)));
evalcond[4]=(((sj3*x2448))+x2451+((r22*x2444))+(((-1.0)*r21*x2455))+(((-1.0)*x2456))+((r20*x2452))+((r21*x2457)));
evalcond[5]=(((r02*x2444))+((sj3*x2450))+((r01*x2457))+((r00*x2452))+(((-1.0)*x2460))+(((-1.0)*r01*x2455)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2461=(cj1*cj4);
IkReal x2462=((1.0)*r22);
IkReal x2463=(cj4*sj1);
IkReal x2464=(sj4*sj5);
IkReal x2465=(cj1*cj5*sj4);
IkReal x2466=(cj5*sj1*sj4);
if( IKabs((((r11*x2466))+((cj1*r20*x2464))+((r21*x2465))+((r10*sj1*x2464))+(((-1.0)*r12*x2463))+(((-1.0)*x2461*x2462)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r12*x2461))+((r21*x2466))+((r20*sj1*x2464))+(((-1.0)*cj1*r10*x2464))+(((-1.0)*r11*x2465))+(((-1.0)*x2462*x2463)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r11*x2466))+((cj1*r20*x2464))+((r21*x2465))+((r10*sj1*x2464))+(((-1.0)*r12*x2463))+(((-1.0)*x2461*x2462))))+IKsqr((((r12*x2461))+((r21*x2466))+((r20*sj1*x2464))+(((-1.0)*cj1*r10*x2464))+(((-1.0)*r11*x2465))+(((-1.0)*x2462*x2463))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r11*x2466))+((cj1*r20*x2464))+((r21*x2465))+((r10*sj1*x2464))+(((-1.0)*r12*x2463))+(((-1.0)*x2461*x2462))), (((r12*x2461))+((r21*x2466))+((r20*sj1*x2464))+(((-1.0)*cj1*r10*x2464))+(((-1.0)*r11*x2465))+(((-1.0)*x2462*x2463))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2467=IKcos(j2);
IkReal x2468=IKsin(j2);
IkReal x2469=((1.0)*cj4);
IkReal x2470=((0.07155)*cj5);
IkReal x2471=(cj5*sj4);
IkReal x2472=(cj3*cj4);
IkReal x2473=(r20*sj5);
IkReal x2474=(r10*sj5);
IkReal x2475=((0.07155)*sj5);
IkReal x2476=(cj5*sj3);
IkReal x2477=(cj3*sj4);
IkReal x2478=(cj1*x2467);
IkReal x2479=((1.0)*sj3*sj5);
IkReal x2480=(cj1*x2468);
IkReal x2481=(sj1*x2467);
IkReal x2482=(sj1*x2468);
IkReal x2483=((1.0)*x2482);
evalcond[0]=(x2478+(((-1.0)*r12*x2469))+((sj4*x2474))+(((-1.0)*x2483))+((r11*x2471)));
evalcond[1]=((((-1.0)*r22*x2469))+(((-1.0)*x2480))+(((-1.0)*x2481))+((sj4*x2473))+((r21*x2471)));
evalcond[2]=((((-1.0)*r20*x2470))+((r21*x2475))+(((0.3571)*cj1))+(((-0.27155)*x2480))+(((-0.27155)*x2481))+(((-1.0)*pz)));
evalcond[3]=((((0.27155)*x2478))+(((0.3571)*sj1))+(((-0.27155)*x2482))+(((-1.0)*py))+(((-1.0)*r10*x2470))+((r11*x2475)));
evalcond[4]=(((r12*x2477))+x2480+x2481+(((-1.0)*r11*x2479))+((r10*x2476))+((x2472*x2474))+((cj5*r11*x2472)));
evalcond[5]=((((-1.0)*r21*x2479))+x2478+(((-1.0)*x2483))+((r20*x2476))+((cj5*r21*x2472))+((x2472*x2473))+((r22*x2477)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2484=(cj4*sj1);
IkReal x2485=(cj5*sj4);
IkReal x2486=((1.0)*sj1);
IkReal x2487=(sj4*sj5);
IkReal x2488=((1.0)*cj1*cj4);
if( IKabs(((((-1.0)*r22*x2488))+(((-1.0)*r10*x2486*x2487))+(((-1.0)*r11*x2485*x2486))+((cj1*r20*x2487))+((cj1*r21*x2485))+((r12*x2484)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r20*sj1*x2487))+((cj1*r11*x2485))+((cj1*r10*x2487))+((r21*sj1*x2485))+(((-1.0)*r12*x2488))+(((-1.0)*r22*x2484)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r22*x2488))+(((-1.0)*r10*x2486*x2487))+(((-1.0)*r11*x2485*x2486))+((cj1*r20*x2487))+((cj1*r21*x2485))+((r12*x2484))))+IKsqr((((r20*sj1*x2487))+((cj1*r11*x2485))+((cj1*r10*x2487))+((r21*sj1*x2485))+(((-1.0)*r12*x2488))+(((-1.0)*r22*x2484))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r22*x2488))+(((-1.0)*r10*x2486*x2487))+(((-1.0)*r11*x2485*x2486))+((cj1*r20*x2487))+((cj1*r21*x2485))+((r12*x2484))), (((r20*sj1*x2487))+((cj1*r11*x2485))+((cj1*r10*x2487))+((r21*sj1*x2485))+(((-1.0)*r12*x2488))+(((-1.0)*r22*x2484))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2489=IKcos(j2);
IkReal x2490=IKsin(j2);
IkReal x2491=((1.0)*cj4);
IkReal x2492=((0.07155)*cj5);
IkReal x2493=(cj5*sj4);
IkReal x2494=(cj3*cj4);
IkReal x2495=(r20*sj5);
IkReal x2496=(r10*sj5);
IkReal x2497=((0.07155)*sj5);
IkReal x2498=(cj5*sj3);
IkReal x2499=(cj3*sj4);
IkReal x2500=(cj1*x2489);
IkReal x2501=((1.0)*sj3*sj5);
IkReal x2502=(sj1*x2489);
IkReal x2503=((0.27155)*x2490);
IkReal x2504=(sj1*x2490);
IkReal x2505=((1.0)*x2502);
IkReal x2506=((1.0)*cj1*x2490);
IkReal x2507=(x2506+x2505);
evalcond[0]=(x2504+((r11*x2493))+(((-1.0)*x2500))+((sj4*x2496))+(((-1.0)*r12*x2491)));
evalcond[1]=((((-1.0)*x2507))+((sj4*x2495))+((r21*x2493))+(((-1.0)*r22*x2491)));
evalcond[2]=((((0.3571)*cj1))+(((-1.0)*r20*x2492))+(((-1.0)*pz))+(((-0.27155)*x2502))+((r21*x2497))+(((-1.0)*cj1*x2503)));
evalcond[3]=((((-1.0)*r10*x2492))+((sj1*x2503))+(((-1.0)*py))+(((-0.3571)*sj1))+((r11*x2497))+(((-0.27155)*x2500)));
evalcond[4]=(x2500+((x2494*x2495))+((r22*x2499))+((cj5*r21*x2494))+(((-1.0)*x2504))+((r20*x2498))+(((-1.0)*r21*x2501)));
evalcond[5]=((((-1.0)*x2507))+((cj5*r11*x2494))+((x2494*x2496))+(((-1.0)*r11*x2501))+((r12*x2499))+((r10*x2498)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2508=(cj4*r12);
IkReal x2509=(cj5*sj4);
IkReal x2510=(r21*sj0);
IkReal x2511=((1.0)*cj1);
IkReal x2512=(r10*sj4*sj5);
IkReal x2513=(r20*sj0*sj4*sj5);
IkReal x2514=((1.0)*cj4*r22*sj0);
CheckValue<IkReal> x2515=IKPowWithIntegerCheck(IKsign(sj0),-1);
if(!x2515.valid){
continue;
}
CheckValue<IkReal> x2516 = IKatan2WithCheck(IkReal(((((-1.0)*sj1*x2508))+((r11*sj1*x2509))+((sj1*x2512))+((cj1*x2513))+((cj1*x2509*x2510))+(((-1.0)*cj4*r22*sj0*x2511)))),IkReal((((sj1*x2509*x2510))+(((-1.0)*sj1*x2514))+((sj1*x2513))+(((-1.0)*r11*x2509*x2511))+((cj1*x2508))+(((-1.0)*x2511*x2512)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2516.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2515.value)))+(x2516.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x2517=IKcos(j2);
IkReal x2518=IKsin(j2);
IkReal x2519=(cj5*r21);
IkReal x2520=(cj3*cj4);
IkReal x2521=(r11*sj5);
IkReal x2522=((1.0)*sj3);
IkReal x2523=((1.0)*cj4);
IkReal x2524=((0.27155)*cj0);
IkReal x2525=((0.07155)*cj5);
IkReal x2526=(cj5*sj4);
IkReal x2527=((0.07155)*sj5);
IkReal x2528=((0.27155)*sj0);
IkReal x2529=((1.0)*sj1);
IkReal x2530=(r20*sj5);
IkReal x2531=(r10*sj5);
IkReal x2532=(cj3*sj4);
IkReal x2533=(cj5*sj3);
IkReal x2534=(r00*sj5);
IkReal x2535=((0.3571)*sj1);
IkReal x2536=(cj1*x2517);
IkReal x2537=(sj0*x2518);
IkReal x2538=(sj1*x2517);
IkReal x2539=(cj0*x2518);
IkReal x2540=(cj1*x2518);
IkReal x2541=(sj1*x2518);
evalcond[0]=(((sj4*x2519))+(((-1.0)*x2540))+((sj4*x2530))+(((-1.0)*x2517*x2529))+(((-1.0)*r22*x2523)));
evalcond[1]=(((cj0*x2536))+((sj4*x2534))+((r01*x2526))+(((-1.0)*r02*x2523))+(((-1.0)*x2529*x2539)));
evalcond[2]=((((-1.0)*r12*x2523))+((sj0*x2536))+((r11*x2526))+((sj4*x2531))+(((-1.0)*x2529*x2537)));
evalcond[3]=((((-0.27155)*x2538))+(((0.3571)*cj1))+(((-0.27155)*x2540))+(((-1.0)*r20*x2525))+(((-1.0)*pz))+((r21*x2527)));
evalcond[4]=(((cj0*x2535))+(((-1.0)*px))+((x2524*x2536))+(((-1.0)*r00*x2525))+((r01*x2527))+(((-1.0)*x2524*x2541)));
evalcond[5]=((((0.07155)*x2521))+((sj0*x2535))+(((-1.0)*x2528*x2541))+(((-1.0)*py))+(((-1.0)*r10*x2525))+((x2528*x2536)));
evalcond[6]=(x2536+((x2519*x2520))+((r20*x2533))+((x2520*x2530))+((r22*x2532))+(((-1.0)*r21*sj5*x2522))+(((-1.0)*x2518*x2529)));
evalcond[7]=(((cj5*r01*x2520))+((cj0*x2538))+((x2520*x2534))+(((-1.0)*r01*sj5*x2522))+((r02*x2532))+((cj1*x2539))+((r00*x2533)));
evalcond[8]=(((cj5*r11*x2520))+((sj0*x2538))+((r10*x2533))+((x2520*x2531))+((cj1*x2537))+((r12*x2532))+(((-1.0)*x2521*x2522)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2542=((1.0)*cj4);
IkReal x2543=(cj0*cj1);
IkReal x2544=(sj4*sj5);
IkReal x2545=(cj5*sj4);
IkReal x2546=((1.0)*cj1);
IkReal x2547=(cj0*sj1);
IkReal x2548=(sj1*x2545);
CheckValue<IkReal> x2549 = IKatan2WithCheck(IkReal((((r00*sj1*x2544))+(((-1.0)*r02*sj1*x2542))+((r01*x2548))+((r21*x2543*x2545))+((r20*x2543*x2544))+(((-1.0)*r22*x2542*x2543)))),IkReal((((cj1*cj4*r02))+((r21*x2545*x2547))+(((-1.0)*r01*x2545*x2546))+((r20*x2544*x2547))+(((-1.0)*r00*x2544*x2546))+(((-1.0)*r22*x2542*x2547)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2549.valid){
continue;
}
CheckValue<IkReal> x2550=IKPowWithIntegerCheck(IKsign(cj0),-1);
if(!x2550.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x2549.value)+(((1.5707963267949)*(x2550.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x2551=IKcos(j2);
IkReal x2552=IKsin(j2);
IkReal x2553=(cj5*r21);
IkReal x2554=(cj3*cj4);
IkReal x2555=(r11*sj5);
IkReal x2556=((1.0)*sj3);
IkReal x2557=((1.0)*cj4);
IkReal x2558=((0.27155)*cj0);
IkReal x2559=((0.07155)*cj5);
IkReal x2560=(cj5*sj4);
IkReal x2561=((0.07155)*sj5);
IkReal x2562=((0.27155)*sj0);
IkReal x2563=((1.0)*sj1);
IkReal x2564=(r20*sj5);
IkReal x2565=(r10*sj5);
IkReal x2566=(cj3*sj4);
IkReal x2567=(cj5*sj3);
IkReal x2568=(r00*sj5);
IkReal x2569=((0.3571)*sj1);
IkReal x2570=(cj1*x2551);
IkReal x2571=(sj0*x2552);
IkReal x2572=(sj1*x2551);
IkReal x2573=(cj0*x2552);
IkReal x2574=(cj1*x2552);
IkReal x2575=(sj1*x2552);
evalcond[0]=(((sj4*x2553))+(((-1.0)*x2574))+((sj4*x2564))+(((-1.0)*x2551*x2563))+(((-1.0)*r22*x2557)));
evalcond[1]=(((r01*x2560))+(((-1.0)*x2563*x2573))+(((-1.0)*r02*x2557))+((sj4*x2568))+((cj0*x2570)));
evalcond[2]=((((-1.0)*r12*x2557))+(((-1.0)*x2563*x2571))+((r11*x2560))+((sj4*x2565))+((sj0*x2570)));
evalcond[3]=((((0.3571)*cj1))+(((-0.27155)*x2572))+(((-0.27155)*x2574))+(((-1.0)*pz))+(((-1.0)*r20*x2559))+((r21*x2561)));
evalcond[4]=(((r01*x2561))+(((-1.0)*x2558*x2575))+((cj0*x2569))+((x2558*x2570))+(((-1.0)*px))+(((-1.0)*r00*x2559)));
evalcond[5]=((((0.07155)*x2555))+(((-1.0)*x2562*x2575))+(((-1.0)*py))+((sj0*x2569))+((x2562*x2570))+(((-1.0)*r10*x2559)));
evalcond[6]=(((r22*x2566))+x2570+((x2554*x2564))+((r20*x2567))+(((-1.0)*r21*sj5*x2556))+((x2553*x2554))+(((-1.0)*x2552*x2563)));
evalcond[7]=(((cj5*r01*x2554))+((r00*x2567))+((x2554*x2568))+((cj1*x2573))+(((-1.0)*r01*sj5*x2556))+((cj0*x2572))+((r02*x2566)));
evalcond[8]=(((x2554*x2565))+((cj5*r11*x2554))+((cj1*x2571))+(((-1.0)*x2555*x2556))+((r10*x2567))+((r12*x2566))+((sj0*x2572)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2576=((0.07155)*sj0);
IkReal x2577=((0.27155)*sj0);
IkReal x2578=(sj4*sj5);
IkReal x2579=(cj5*sj4);
CheckValue<IkReal> x2580=IKPowWithIntegerCheck(sj0,-2);
if(!x2580.valid){
continue;
}
if( IKabs(((-2.80033604032484)*(x2580.value)*((((cj4*r12*x2577))+(((-1.0)*r10*x2577*x2578))+(((-1.0)*cj5*r10*x2576))+(((-1.0)*r11*x2577*x2579))+((r11*sj5*x2576))+(((-1.0)*py*sj0)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.76043125175021)*r20*x2578))+(((-0.200364043685242)*r21*sj5))+(((2.80033604032484)*pz))+(((0.200364043685242)*cj5*r20))+(((0.76043125175021)*r21*x2579))+(((-0.76043125175021)*cj4*r22)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-2.80033604032484)*(x2580.value)*((((cj4*r12*x2577))+(((-1.0)*r10*x2577*x2578))+(((-1.0)*cj5*r10*x2576))+(((-1.0)*r11*x2577*x2579))+((r11*sj5*x2576))+(((-1.0)*py*sj0))))))+IKsqr(((((0.76043125175021)*r20*x2578))+(((-0.200364043685242)*r21*sj5))+(((2.80033604032484)*pz))+(((0.200364043685242)*cj5*r20))+(((0.76043125175021)*r21*x2579))+(((-0.76043125175021)*cj4*r22))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-2.80033604032484)*(x2580.value)*((((cj4*r12*x2577))+(((-1.0)*r10*x2577*x2578))+(((-1.0)*cj5*r10*x2576))+(((-1.0)*r11*x2577*x2579))+((r11*sj5*x2576))+(((-1.0)*py*sj0))))), ((((0.76043125175021)*r20*x2578))+(((-0.200364043685242)*r21*sj5))+(((2.80033604032484)*pz))+(((0.200364043685242)*cj5*r20))+(((0.76043125175021)*r21*x2579))+(((-0.76043125175021)*cj4*r22))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[9];
IkReal x2581=IKsin(j1);
IkReal x2582=IKcos(j1);
IkReal x2583=((0.07155)*cj5);
IkReal x2584=(r00*sj0);
IkReal x2585=(cj3*cj4);
IkReal x2586=(cj0*sj5);
IkReal x2587=((0.07155)*r11);
IkReal x2588=(cj5*sj3);
IkReal x2589=((0.27155)*sj4);
IkReal x2590=(cj3*r22);
IkReal x2591=(cj5*r11);
IkReal x2592=((0.27155)*r20);
IkReal x2593=((1.0)*sj0);
IkReal x2594=(sj0*sj5);
IkReal x2595=((0.27155)*sj5);
IkReal x2596=((1.0)*pz);
IkReal x2597=((0.07155)*r21);
IkReal x2598=(cj5*r01);
IkReal x2599=((0.27155)*cj4);
IkReal x2600=(cj5*r21);
IkReal x2601=((1.0)*cj0);
IkReal x2602=(sj0*x2592);
IkReal x2603=((0.3571)*x2582);
IkReal x2604=((0.07155)*r01*sj5);
IkReal x2605=((0.3571)*x2581);
IkReal x2606=((0.27155)*r21*sj3);
IkReal x2607=(cj0*x2605);
IkReal x2608=(sj0*x2607);
evalcond[0]=(((r22*x2599))+((sj5*x2597))+(((-1.0)*r20*x2583))+(((-1.0)*x2596))+(((-1.0)*x2589*x2600))+(((-1.0)*r20*sj5*x2589))+x2603);
evalcond[1]=(((x2605*(sj0*sj0)))+(((-1.0)*r10*sj0*x2583))+(((-1.0)*py*x2593))+(((-1.0)*sj0*x2589*x2591))+(((-1.0)*r10*x2589*x2594))+((r12*sj0*x2599))+((x2587*x2594)));
evalcond[2]=(((cj0*r02*x2599))+(((-1.0)*cj0*r00*x2583))+(((-1.0)*cj0*x2589*x2598))+(((0.07155)*r01*x2586))+((cj0*x2607))+(((-1.0)*px*x2601))+(((-1.0)*r00*x2586*x2589)));
evalcond[3]=(((sj0*x2589*x2590))+((x2588*x2602))+((x2585*x2592*x2594))+(((-1.0)*sj5*x2587))+((r10*x2583))+py+(((-1.0)*sj0*x2605))+(((-1.0)*x2594*x2606))+(((0.27155)*sj0*x2585*x2600)));
evalcond[4]=((((0.27155)*cj0*x2585*x2600))+((r00*x2583))+((cj0*x2588*x2592))+(((-1.0)*x2586*x2606))+((cj0*x2589*x2590))+px+(((-1.0)*x2604))+(((-1.0)*x2607))+((x2585*x2586*x2592)));
evalcond[5]=(((x2594*x2597))+(((0.27155)*x2585*x2591))+((cj3*r12*x2589))+(((0.27155)*r10*x2588))+(((-1.0)*r11*sj3*x2595))+((r10*x2585*x2595))+(((-1.0)*r20*sj0*x2583))+((sj0*x2603))+(((-1.0)*pz*x2593)));
evalcond[6]=((((0.27155)*x2585*x2598))+((cj3*r02*x2589))+((x2586*x2597))+(((-1.0)*r01*sj3*x2595))+(((-1.0)*cj0*x2596))+((cj0*x2603))+((r00*x2585*x2595))+(((0.27155)*r00*x2588))+(((-1.0)*cj0*r20*x2583)));
evalcond[7]=((((-1.0)*cj0*x2589*x2591))+(((-1.0)*r10*x2586*x2589))+(((0.07155)*r01*x2594))+((cj0*r12*x2599))+(((-1.0)*x2583*x2584))+x2608+(((-1.0)*px*x2593)));
evalcond[8]=((((-1.0)*cj0*r10*x2583))+((r02*sj0*x2599))+((x2586*x2587))+(((-1.0)*sj5*x2584*x2589))+(((-1.0)*py*x2601))+(((-1.0)*sj0*x2589*x2598))+x2608);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=cj0;
j2eval[1]=IKsign(cj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=sj0;
j2eval[1]=IKsign(sj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2609=(cj5*sj4);
IkReal x2610=(cj4*r02);
IkReal x2611=((1.0)*cj1);
IkReal x2612=(sj4*sj5);
IkReal x2613=((1.0)*cj4*r22);
IkReal x2614=(sj1*x2612);
if( IKabs((((r00*x2614))+(((-1.0)*sj1*x2610))+((cj1*r21*x2609))+((cj1*r20*x2612))+((r01*sj1*x2609))+(((-1.0)*cj4*r22*x2611)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj1*x2613))+((r21*sj1*x2609))+((r20*x2614))+(((-1.0)*r01*x2609*x2611))+((cj1*x2610))+(((-1.0)*r00*x2611*x2612)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x2614))+(((-1.0)*sj1*x2610))+((cj1*r21*x2609))+((cj1*r20*x2612))+((r01*sj1*x2609))+(((-1.0)*cj4*r22*x2611))))+IKsqr(((((-1.0)*sj1*x2613))+((r21*sj1*x2609))+((r20*x2614))+(((-1.0)*r01*x2609*x2611))+((cj1*x2610))+(((-1.0)*r00*x2611*x2612))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r00*x2614))+(((-1.0)*sj1*x2610))+((cj1*r21*x2609))+((cj1*r20*x2612))+((r01*sj1*x2609))+(((-1.0)*cj4*r22*x2611))), ((((-1.0)*sj1*x2613))+((r21*sj1*x2609))+((r20*x2614))+(((-1.0)*r01*x2609*x2611))+((cj1*x2610))+(((-1.0)*r00*x2611*x2612))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2615=IKcos(j2);
IkReal x2616=IKsin(j2);
IkReal x2617=(cj3*sj4);
IkReal x2618=((1.0)*cj4);
IkReal x2619=(r00*sj5);
IkReal x2620=(cj3*cj4);
IkReal x2621=(cj5*sj4);
IkReal x2622=((0.07155)*sj5);
IkReal x2623=(cj5*r20);
IkReal x2624=(cj5*r00);
IkReal x2625=(r20*sj5);
IkReal x2626=(cj1*x2615);
IkReal x2627=(sj1*x2615);
IkReal x2628=(cj1*x2616);
IkReal x2629=((1.0)*sj3*sj5);
IkReal x2630=(sj1*x2616);
IkReal x2631=((1.0)*x2630);
evalcond[0]=(((r01*x2621))+(((-1.0)*x2631))+((sj4*x2619))+(((-1.0)*r02*x2618))+x2626);
evalcond[1]=((((-1.0)*x2628))+(((-1.0)*x2627))+((sj4*x2625))+(((-1.0)*r22*x2618))+((r21*x2621)));
evalcond[2]=((((-0.07155)*x2623))+(((0.3571)*cj1))+(((-1.0)*pz))+((r21*x2622))+(((-0.27155)*x2627))+(((-0.27155)*x2628)));
evalcond[3]=(((r01*x2622))+(((-0.07155)*x2624))+(((0.3571)*sj1))+(((0.27155)*x2626))+(((-0.27155)*x2630))+(((-1.0)*px)));
evalcond[4]=((((-1.0)*r01*x2629))+((sj3*x2624))+((x2619*x2620))+((r02*x2617))+((cj5*r01*x2620))+x2627+x2628);
evalcond[5]=(((sj3*x2623))+(((-1.0)*x2631))+((x2620*x2625))+((r22*x2617))+(((-1.0)*r21*x2629))+((cj5*r21*x2620))+x2626);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2632=(cj4*r02);
IkReal x2633=(cj5*sj4);
IkReal x2634=((1.0)*sj1);
IkReal x2635=(sj4*sj5);
IkReal x2636=((1.0)*cj4*r22);
if( IKabs((((sj1*x2632))+(((-1.0)*cj1*x2636))+((cj1*r20*x2635))+((cj1*r21*x2633))+(((-1.0)*r00*x2634*x2635))+(((-1.0)*r01*x2633*x2634)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r20*sj1*x2635))+(((-1.0)*cj4*r22*x2634))+(((-1.0)*cj1*x2632))+((cj1*r00*x2635))+((cj1*r01*x2633))+((r21*sj1*x2633)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj1*x2632))+(((-1.0)*cj1*x2636))+((cj1*r20*x2635))+((cj1*r21*x2633))+(((-1.0)*r00*x2634*x2635))+(((-1.0)*r01*x2633*x2634))))+IKsqr((((r20*sj1*x2635))+(((-1.0)*cj4*r22*x2634))+(((-1.0)*cj1*x2632))+((cj1*r00*x2635))+((cj1*r01*x2633))+((r21*sj1*x2633))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((sj1*x2632))+(((-1.0)*cj1*x2636))+((cj1*r20*x2635))+((cj1*r21*x2633))+(((-1.0)*r00*x2634*x2635))+(((-1.0)*r01*x2633*x2634))), (((r20*sj1*x2635))+(((-1.0)*cj4*r22*x2634))+(((-1.0)*cj1*x2632))+((cj1*r00*x2635))+((cj1*r01*x2633))+((r21*sj1*x2633))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2637=IKcos(j2);
IkReal x2638=IKsin(j2);
IkReal x2639=(cj3*sj4);
IkReal x2640=((1.0)*cj4);
IkReal x2641=(cj5*sj4);
IkReal x2642=((0.07155)*sj5);
IkReal x2643=(cj5*r20);
IkReal x2644=(sj4*sj5);
IkReal x2645=(cj5*r00);
IkReal x2646=(cj1*x2637);
IkReal x2647=(cj3*cj4*sj5);
IkReal x2648=(sj1*x2637);
IkReal x2649=((0.27155)*x2638);
IkReal x2650=((1.0)*sj3*sj5);
IkReal x2651=(sj1*x2638);
IkReal x2652=(cj3*cj4*cj5);
IkReal x2653=((1.0)*x2648);
IkReal x2654=((1.0)*cj1*x2638);
IkReal x2655=(x2653+x2654);
evalcond[0]=((((-1.0)*r02*x2640))+((r00*x2644))+((r01*x2641))+(((-1.0)*x2646))+x2651);
evalcond[1]=((((-1.0)*r22*x2640))+((r21*x2641))+(((-1.0)*x2655))+((r20*x2644)));
evalcond[2]=(((r21*x2642))+(((-1.0)*cj1*x2649))+(((0.3571)*cj1))+(((-1.0)*pz))+(((-0.07155)*x2643))+(((-0.27155)*x2648)));
evalcond[3]=((((-1.0)*px))+(((-0.3571)*sj1))+((r01*x2642))+(((-0.07155)*x2645))+(((-0.27155)*x2646))+((sj1*x2649)));
evalcond[4]=(((r21*x2652))+((r22*x2639))+(((-1.0)*r21*x2650))+((sj3*x2643))+(((-1.0)*x2651))+x2646+((r20*x2647)));
evalcond[5]=((((-1.0)*r01*x2650))+((r00*x2647))+((r01*x2652))+(((-1.0)*x2655))+((sj3*x2645))+((r02*x2639)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2656=(cj1*cj4);
IkReal x2657=((1.0)*r22);
IkReal x2658=(cj4*sj1);
IkReal x2659=(sj4*sj5);
IkReal x2660=(cj1*cj5*sj4);
IkReal x2661=(cj5*sj1*sj4);
if( IKabs((((r21*x2660))+((cj1*r20*x2659))+(((-1.0)*x2656*x2657))+(((-1.0)*r12*x2658))+((r10*sj1*x2659))+((r11*x2661)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj1*r10*x2659))+((r12*x2656))+((r21*x2661))+((r20*sj1*x2659))+(((-1.0)*x2657*x2658))+(((-1.0)*r11*x2660)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r21*x2660))+((cj1*r20*x2659))+(((-1.0)*x2656*x2657))+(((-1.0)*r12*x2658))+((r10*sj1*x2659))+((r11*x2661))))+IKsqr(((((-1.0)*cj1*r10*x2659))+((r12*x2656))+((r21*x2661))+((r20*sj1*x2659))+(((-1.0)*x2657*x2658))+(((-1.0)*r11*x2660))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r21*x2660))+((cj1*r20*x2659))+(((-1.0)*x2656*x2657))+(((-1.0)*r12*x2658))+((r10*sj1*x2659))+((r11*x2661))), ((((-1.0)*cj1*r10*x2659))+((r12*x2656))+((r21*x2661))+((r20*sj1*x2659))+(((-1.0)*x2657*x2658))+(((-1.0)*r11*x2660))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2662=IKcos(j2);
IkReal x2663=IKsin(j2);
IkReal x2664=((1.0)*cj4);
IkReal x2665=((0.07155)*cj5);
IkReal x2666=(cj5*sj4);
IkReal x2667=(cj3*cj4);
IkReal x2668=(r20*sj5);
IkReal x2669=(r10*sj5);
IkReal x2670=((0.07155)*sj5);
IkReal x2671=(cj5*sj3);
IkReal x2672=(cj3*sj4);
IkReal x2673=(cj1*x2662);
IkReal x2674=((1.0)*sj3*sj5);
IkReal x2675=(cj1*x2663);
IkReal x2676=(sj1*x2662);
IkReal x2677=(sj1*x2663);
IkReal x2678=((1.0)*x2677);
evalcond[0]=((((-1.0)*r12*x2664))+((sj4*x2669))+(((-1.0)*x2678))+((r11*x2666))+x2673);
evalcond[1]=((((-1.0)*x2676))+(((-1.0)*x2675))+((sj4*x2668))+((r21*x2666))+(((-1.0)*r22*x2664)));
evalcond[2]=(((r21*x2670))+(((0.3571)*cj1))+(((-1.0)*pz))+(((-1.0)*r20*x2665))+(((-0.27155)*x2675))+(((-0.27155)*x2676)));
evalcond[3]=((((0.3571)*sj1))+(((-1.0)*py))+(((0.27155)*x2673))+(((-0.27155)*x2677))+((r11*x2670))+(((-1.0)*r10*x2665)));
evalcond[4]=((((-1.0)*r11*x2674))+((r12*x2672))+((cj5*r11*x2667))+((x2667*x2669))+((r10*x2671))+x2675+x2676);
evalcond[5]=(((cj5*r21*x2667))+((x2667*x2668))+((r22*x2672))+(((-1.0)*x2678))+(((-1.0)*r21*x2674))+((r20*x2671))+x2673);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2679=(cj4*sj1);
IkReal x2680=(cj5*sj4);
IkReal x2681=((1.0)*sj1);
IkReal x2682=(sj4*sj5);
IkReal x2683=((1.0)*cj1*cj4);
if( IKabs((((r12*x2679))+(((-1.0)*r11*x2680*x2681))+(((-1.0)*r10*x2681*x2682))+(((-1.0)*r22*x2683))+((cj1*r21*x2680))+((cj1*r20*x2682)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r12*x2683))+(((-1.0)*r22*x2679))+((cj1*r11*x2680))+((r21*sj1*x2680))+((r20*sj1*x2682))+((cj1*r10*x2682)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r12*x2679))+(((-1.0)*r11*x2680*x2681))+(((-1.0)*r10*x2681*x2682))+(((-1.0)*r22*x2683))+((cj1*r21*x2680))+((cj1*r20*x2682))))+IKsqr(((((-1.0)*r12*x2683))+(((-1.0)*r22*x2679))+((cj1*r11*x2680))+((r21*sj1*x2680))+((r20*sj1*x2682))+((cj1*r10*x2682))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r12*x2679))+(((-1.0)*r11*x2680*x2681))+(((-1.0)*r10*x2681*x2682))+(((-1.0)*r22*x2683))+((cj1*r21*x2680))+((cj1*r20*x2682))), ((((-1.0)*r12*x2683))+(((-1.0)*r22*x2679))+((cj1*r11*x2680))+((r21*sj1*x2680))+((r20*sj1*x2682))+((cj1*r10*x2682))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2684=IKcos(j2);
IkReal x2685=IKsin(j2);
IkReal x2686=((1.0)*cj4);
IkReal x2687=((0.07155)*cj5);
IkReal x2688=(cj5*sj4);
IkReal x2689=(cj3*cj4);
IkReal x2690=(r20*sj5);
IkReal x2691=(r10*sj5);
IkReal x2692=((0.07155)*sj5);
IkReal x2693=(cj5*sj3);
IkReal x2694=(cj3*sj4);
IkReal x2695=(cj1*x2684);
IkReal x2696=((1.0)*sj3*sj5);
IkReal x2697=(sj1*x2684);
IkReal x2698=((0.27155)*x2685);
IkReal x2699=(sj1*x2685);
IkReal x2700=((1.0)*x2697);
IkReal x2701=((1.0)*cj1*x2685);
IkReal x2702=(x2701+x2700);
evalcond[0]=((((-1.0)*r12*x2686))+((sj4*x2691))+((r11*x2688))+(((-1.0)*x2695))+x2699);
evalcond[1]=(((sj4*x2690))+((r21*x2688))+(((-1.0)*r22*x2686))+(((-1.0)*x2702)));
evalcond[2]=((((-1.0)*cj1*x2698))+(((0.3571)*cj1))+(((-0.27155)*x2697))+(((-1.0)*pz))+((r21*x2692))+(((-1.0)*r20*x2687)));
evalcond[3]=((((-0.27155)*x2695))+((sj1*x2698))+(((-1.0)*py))+(((-0.3571)*sj1))+(((-1.0)*r10*x2687))+((r11*x2692)));
evalcond[4]=(((cj5*r21*x2689))+((r22*x2694))+((x2689*x2690))+(((-1.0)*x2699))+((r20*x2693))+x2695+(((-1.0)*r21*x2696)));
evalcond[5]=(((r12*x2694))+((r10*x2693))+((x2689*x2691))+(((-1.0)*x2702))+(((-1.0)*r11*x2696))+((cj5*r11*x2689)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2703=(cj4*r12);
IkReal x2704=(cj5*sj4);
IkReal x2705=(r21*sj0);
IkReal x2706=((1.0)*cj1);
IkReal x2707=(r10*sj4*sj5);
IkReal x2708=(r20*sj0*sj4*sj5);
IkReal x2709=((1.0)*cj4*r22*sj0);
CheckValue<IkReal> x2710 = IKatan2WithCheck(IkReal((((cj1*x2704*x2705))+(((-1.0)*sj1*x2703))+((r11*sj1*x2704))+(((-1.0)*cj4*r22*sj0*x2706))+((cj1*x2708))+((sj1*x2707)))),IkReal(((((-1.0)*r11*x2704*x2706))+(((-1.0)*x2706*x2707))+((sj1*x2704*x2705))+(((-1.0)*sj1*x2709))+((cj1*x2703))+((sj1*x2708)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2710.valid){
continue;
}
CheckValue<IkReal> x2711=IKPowWithIntegerCheck(IKsign(sj0),-1);
if(!x2711.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x2710.value)+(((1.5707963267949)*(x2711.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x2712=IKcos(j2);
IkReal x2713=IKsin(j2);
IkReal x2714=(cj5*r21);
IkReal x2715=(cj3*cj4);
IkReal x2716=(r11*sj5);
IkReal x2717=((1.0)*sj3);
IkReal x2718=((1.0)*cj4);
IkReal x2719=((0.27155)*cj0);
IkReal x2720=((0.07155)*cj5);
IkReal x2721=(cj5*sj4);
IkReal x2722=((0.07155)*sj5);
IkReal x2723=((0.27155)*sj0);
IkReal x2724=((1.0)*sj1);
IkReal x2725=(r20*sj5);
IkReal x2726=(r10*sj5);
IkReal x2727=(cj3*sj4);
IkReal x2728=(cj5*sj3);
IkReal x2729=(r00*sj5);
IkReal x2730=((0.3571)*sj1);
IkReal x2731=(cj1*x2712);
IkReal x2732=(sj0*x2713);
IkReal x2733=(sj1*x2712);
IkReal x2734=(cj0*x2713);
IkReal x2735=(cj1*x2713);
IkReal x2736=(sj1*x2713);
evalcond[0]=((((-1.0)*x2735))+((sj4*x2725))+(((-1.0)*r22*x2718))+((sj4*x2714))+(((-1.0)*x2712*x2724)));
evalcond[1]=((((-1.0)*x2724*x2734))+(((-1.0)*r02*x2718))+((sj4*x2729))+((r01*x2721))+((cj0*x2731)));
evalcond[2]=((((-1.0)*x2724*x2732))+((sj4*x2726))+((r11*x2721))+((sj0*x2731))+(((-1.0)*r12*x2718)));
evalcond[3]=((((-0.27155)*x2735))+(((-0.27155)*x2733))+(((0.3571)*cj1))+(((-1.0)*pz))+((r21*x2722))+(((-1.0)*r20*x2720)));
evalcond[4]=((((-1.0)*r00*x2720))+(((-1.0)*x2719*x2736))+(((-1.0)*px))+((x2719*x2731))+((r01*x2722))+((cj0*x2730)));
evalcond[5]=((((-1.0)*x2723*x2736))+(((-1.0)*py))+((x2723*x2731))+((sj0*x2730))+(((0.07155)*x2716))+(((-1.0)*r10*x2720)));
evalcond[6]=(x2731+((x2715*x2725))+((r22*x2727))+(((-1.0)*r21*sj5*x2717))+(((-1.0)*x2713*x2724))+((r20*x2728))+((x2714*x2715)));
evalcond[7]=(((r02*x2727))+((x2715*x2729))+((cj5*r01*x2715))+((cj1*x2734))+(((-1.0)*r01*sj5*x2717))+((r00*x2728))+((cj0*x2733)));
evalcond[8]=(((x2715*x2726))+((cj1*x2732))+((cj5*r11*x2715))+((sj0*x2733))+((r10*x2728))+(((-1.0)*x2716*x2717))+((r12*x2727)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2737=((1.0)*cj4);
IkReal x2738=(cj0*cj1);
IkReal x2739=(sj4*sj5);
IkReal x2740=(cj5*sj4);
IkReal x2741=((1.0)*cj1);
IkReal x2742=(cj0*sj1);
IkReal x2743=(sj1*x2740);
CheckValue<IkReal> x2744 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x2737*x2738))+((r20*x2738*x2739))+((r01*x2743))+((r00*sj1*x2739))+(((-1.0)*r02*sj1*x2737))+((r21*x2738*x2740)))),IkReal((((cj1*cj4*r02))+(((-1.0)*r01*x2740*x2741))+(((-1.0)*r22*x2737*x2742))+((r21*x2740*x2742))+(((-1.0)*r00*x2739*x2741))+((r20*x2739*x2742)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2744.valid){
continue;
}
CheckValue<IkReal> x2745=IKPowWithIntegerCheck(IKsign(cj0),-1);
if(!x2745.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x2744.value)+(((1.5707963267949)*(x2745.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x2746=IKcos(j2);
IkReal x2747=IKsin(j2);
IkReal x2748=(cj5*r21);
IkReal x2749=(cj3*cj4);
IkReal x2750=(r11*sj5);
IkReal x2751=((1.0)*sj3);
IkReal x2752=((1.0)*cj4);
IkReal x2753=((0.27155)*cj0);
IkReal x2754=((0.07155)*cj5);
IkReal x2755=(cj5*sj4);
IkReal x2756=((0.07155)*sj5);
IkReal x2757=((0.27155)*sj0);
IkReal x2758=((1.0)*sj1);
IkReal x2759=(r20*sj5);
IkReal x2760=(r10*sj5);
IkReal x2761=(cj3*sj4);
IkReal x2762=(cj5*sj3);
IkReal x2763=(r00*sj5);
IkReal x2764=((0.3571)*sj1);
IkReal x2765=(cj1*x2746);
IkReal x2766=(sj0*x2747);
IkReal x2767=(sj1*x2746);
IkReal x2768=(cj0*x2747);
IkReal x2769=(cj1*x2747);
IkReal x2770=(sj1*x2747);
evalcond[0]=((((-1.0)*r22*x2752))+(((-1.0)*x2769))+((sj4*x2759))+((sj4*x2748))+(((-1.0)*x2746*x2758)));
evalcond[1]=(((sj4*x2763))+(((-1.0)*x2758*x2768))+((cj0*x2765))+((r01*x2755))+(((-1.0)*r02*x2752)));
evalcond[2]=(((r11*x2755))+((sj0*x2765))+((sj4*x2760))+(((-1.0)*x2758*x2766))+(((-1.0)*r12*x2752)));
evalcond[3]=(((r21*x2756))+(((0.3571)*cj1))+(((-1.0)*pz))+(((-1.0)*r20*x2754))+(((-0.27155)*x2767))+(((-0.27155)*x2769)));
evalcond[4]=((((-1.0)*r00*x2754))+(((-1.0)*px))+((cj0*x2764))+(((-1.0)*x2753*x2770))+((r01*x2756))+((x2753*x2765)));
evalcond[5]=((((0.07155)*x2750))+((sj0*x2764))+((x2757*x2765))+(((-1.0)*r10*x2754))+(((-1.0)*py))+(((-1.0)*x2757*x2770)));
evalcond[6]=(((x2749*x2759))+x2765+(((-1.0)*r21*sj5*x2751))+((r20*x2762))+((x2748*x2749))+((r22*x2761))+(((-1.0)*x2747*x2758)));
evalcond[7]=(((cj1*x2768))+((r00*x2762))+((cj0*x2767))+((r02*x2761))+((x2749*x2763))+((cj5*r01*x2749))+(((-1.0)*r01*sj5*x2751)));
evalcond[8]=(((cj1*x2766))+((r12*x2761))+((sj0*x2767))+((cj5*r11*x2749))+((r10*x2762))+(((-1.0)*x2750*x2751))+((x2749*x2760)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}

}

}
}
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - hdt_arm (0ca02899c791d5f0c8d94eaa8de57edc)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
